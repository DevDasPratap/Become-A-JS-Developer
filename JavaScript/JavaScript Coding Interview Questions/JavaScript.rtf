{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f34\fbidi \froman\fcharset0\fprq2{\*\panose 02040503050406030204}Cambria Math;}
{\f37\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\f42\fbidi \fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Segoe UI Emoji;}{\f43\fbidi \fswiss\fcharset0\fprq2{\*\panose 020b0502040204020203}Segoe UI Symbol;}
{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0302020204030204}Calibri Light;}{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f44\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\f45\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\f47\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f48\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f49\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f50\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f51\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f52\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f414\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\f415\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\f417\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\f418\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}{\f419\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}
{\f420\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\f421\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\f422\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Calibri Light CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Calibri Light Cyr;}{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Calibri Light Greek;}
{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Calibri Light Tur;}{\fhimajor\f31533\fbidi \fswiss\fcharset177\fprq2 Calibri Light (Hebrew);}{\fhimajor\f31534\fbidi \fswiss\fcharset178\fprq2 Calibri Light (Arabic);}
{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Calibri Light Baltic;}{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Calibri Light (Vietnamese);}{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}
{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31573\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\fhiminor\f31574\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green0\blue0;\red0\green0\blue0;}{\*\defchp \fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap 
\ql \li0\ri0\sa160\sl259\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa160\sl259\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 
\af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa160\sl259\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused 
Normal Table;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid339097\rsid13257675}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\operator Pratap Das}{\creatim\yr2022\mo11\dy2\hr23\min50}
{\revtim\yr2022\mo11\dy2\hr23\min50}{\version2}{\edmins0}{\nofpages141}{\nofwords21189}{\nofchars120781}{\nofcharsws141687}{\vern59}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\rsidroot339097 \fet0{\*\wgrffmtfilter 2450}\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\sa160\sl259\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid339097 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 
\fs22\lang1033\langfe1033\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 \hich\af31506\dbch\af31505\loch\f31506 
For JavaScript Theorytical questions: "https://github.com/sudheerj/javascript-interview-questions"
\par \hich\af31506\dbch\af31505\loch\f31506 For Reactjs theory questions: https://github.com/sudheerj/reactjs-interview-questions/tree/master/.github/workflows
\par \hich\af31506\dbch\af31505\loch\f31506 For Google, Facebook, Microsoft coding challenges: https://youtube.com/c/KevinNaughtonJr
\par \hich\af31506\dbch\af31505\loch\f31506 Jest: https://github.com/sapegin/jest-cheat-sheet
\par \hich\af31506\dbch\af31505\loch\f31506 h\hich\af31506\dbch\af31505\loch\f31506 ttps://plainenglish.io/blog/50-javascript-output-questions
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 https://learnersbucket.com/javascript-sde-cheat-sheet/
\par \hich\af31506\dbch\af31505\loch\f31506 https://javascript.info/
\par \hich\af31506\dbch\af31505\loch\f31506 https://frontenddeveloperinterview.netlify.app/
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ===================================================================\hich\af31506\dbch\af31505\loch\f31506 =============================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 1: Remove Duplicate characters from String
\par \hich\af31506\dbch\af31505\loch\f31506 function removeDuplicateCharacters() \{
\par \hich\af31506\dbch\af31505\loch\f31506   var string='priya riya supriya'
\par \hich\af31506\dbch\af31505\loch\f31506   let result= string.spli\hich\af31506\dbch\af31505\loch\f31506 t('').filter((item, index, arr)=> \{
\par \hich\af31506\dbch\af31505\loch\f31506                return arr.indexOf(item) == index;
\par \hich\af31506\dbch\af31505\loch\f31506                \}).join('');
\par \hich\af31506\dbch\af31505\loch\f31506   return result;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(removeDuplicateCharacters());
\par \hich\af31506\dbch\af31505\loch\f31506 =================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===============================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 2: Remove Duplicate characters from array of element and find the count of an elements using set object
\par \hich\af31506\dbch\af31505\loch\f31506 var arr = [55, 44, 55,67,67,67,67,8,8,8,8,8,65,1,2,\hich\af31506\dbch\af31505\loch\f31506 3,3,34,5];
\par \hich\af31506\dbch\af31505\loch\f31506 var unique = [...new Set(arr)]
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(unique) //output: [55, 44, 67, 8, 65, 1, 2, 3, 34, 5]
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(unique.length) //output: 10
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ====================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 3: Remove Duplicate characters from array of element using filter
\par \hich\af31506\dbch\af31505\loch\f31506 var myArray = ['a', 1, 'a', 2, '1'];
\par \hich\af31506\dbch\af31505\loch\f31506 var unique = myArray.filter((value, index, arr) => arr.indexOf(value) === index\hich\af31506\dbch\af31505\loch\f31506 );
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 4:String reverse without reversing of individual words (Array of elements \hich\af31506\dbch\af31505\loch\f31506 can be reverse with reverse() method but for string it is won't possible so required to split 

\par \hich\af31506\dbch\af31505\loch\f31506 and then join().
\par \hich\af31506\dbch\af31505\loch\f31506 function removeDuplicates()\{
\par \hich\af31506\dbch\af31505\loch\f31506    var string ="India is my country"
\par \hich\af31506\dbch\af31505\loch\f31506    let result = string.split('').reverse().join('').split(' ').reverse().join(\hich\af31506\dbch\af31505\loch\f31506 ' ')
\par \hich\af31506\dbch\af31505\loch\f31506    return result
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(removeDuplicates()) 
\par \hich\af31506\dbch\af31505\loch\f31506 output = "aidnI si ym yrtnuoc"
\par ------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 var reverseWords = function(s) \{
\par \hich\af31506\dbch\af31505\loch\f31506     let res = '';
\par \hich\af31506\dbch\af31505\loch\f31506     let word = '';
\par \hich\af31506\dbch\af31505\loch\f31506     for (let c of s) \{
\par \hich\af31506\dbch\af31505\loch\f31506         if (c === ' ') \{
\par \hich\af31506\dbch\af31505\loch\f31506        \hich\af31506\dbch\af31505\loch\f31506      res += word + c;
\par \hich\af31506\dbch\af31505\loch\f31506             word = '';
\par \hich\af31506\dbch\af31505\loch\f31506         \} else \{
\par \hich\af31506\dbch\af31505\loch\f31506             word = c + word;
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     return res + word;
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(reverseWords("priya bagde"))
\par \hich\af31506\dbch\af31505\loch\f31506 ==================================================================================\hich\af31506\dbch\af31505\loch\f31506 ==============================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 5:String reverse with reversing of individual words
\par \hich\af31506\dbch\af31505\loch\f31506 function withoutReverse()\{
\par \hich\af31506\dbch\af31505\loch\f31506    var string ="India is my country"
\par \hich\af31506\dbch\af31505\loch\f31506    let result = string.split('').reverse().join('')
\par \hich\af31506\dbch\af31505\loch\f31506    return result
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(withoutReverse())
\par \hich\af31506\dbch\af31505\loch\f31506 output = "yrtnuoc ym si aidnI"
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ====================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 6:String reverse without using inbult function
\par \hich\af31506\dbch\af31505\loch\f31506 function Reverse()\{
\par \hich\af31506\dbch\af31505\loch\f31506    var string ="India is my country";
\par \hich\af31506\dbch\af31505\loch\f31506    var result="";
\par \hich\af31506\dbch\af31505\loch\f31506    for( var i=string.length-1; i>=0 ; i-- ) \{
\par \hich\af31506\dbch\af31505\loch\f31506       result=result+string[i]\hich\af31506\dbch\af31505\loch\f31506  \}
\par \hich\af31506\dbch\af31505\loch\f31506    return result
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(Reverse())
\par \hich\af31506\dbch\af31505\loch\f31506 output = "yrtnuoc ym si aidnI"
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Cod\hich\af31506\dbch\af31505\loch\f31506 e 7: Find factorial of user input number
\par \hich\af31506\dbch\af31505\loch\f31506 const number = parseInt(prompt('Enter a positive integer: '));
\par \hich\af31506\dbch\af31505\loch\f31506 if (number < 0) \{ console.log('Error! Factorial for negative number does not exist.')\}
\par \hich\af31506\dbch\af31505\loch\f31506 else if (number === 0) \{ console.log(`The factorial is 1.`)\}
\par \hich\af31506\dbch\af31505\loch\f31506 else\hich\af31506\dbch\af31505\loch\f31506  \{
\par \hich\af31506\dbch\af31505\loch\f31506     let fact = 1;
\par \hich\af31506\dbch\af31505\loch\f31506     for (i = 1; i <= number; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506         fact *= i;
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(`The factorial is $\{fact\}.`);
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 ==============================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ==================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 8:Anagram
\par \hich\af31506\dbch\af31505\loch\f31506 function checkStringsAnagram() \{
\par \hich\af31506\dbch\af31505\loch\f31506 var a="Army";
\par \hich\af31506\dbch\af31505\loch\f31506 var b="Mary"
\par \hich\af31506\dbch\af31505\loch\f31506    let str1 =  a.toLowerCase().split('').sort().join('');
\par \hich\af31506\dbch\af31505\loch\f31506    let str2 =  b.toLowerCase().split('').sort().join('');
\par \hich\af31506\dbch\af31505\loch\f31506    if(str1 === str2)\{
\par \hich\af31506\dbch\af31505\loch\f31506       console.log("True");
\par \hich\af31506\dbch\af31505\loch\f31506    \} 
\par \hich\af31506\dbch\af31505\loch\f31506    else \{ 
\par \hich\af31506\dbch\af31505\loch\f31506       console.log("False");
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 =================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===============================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 9: Swapping of 2 numbers with third variable
\par \hich\af31506\dbch\af31505\loch\f31506 let a=10;
\par \hich\af31506\dbch\af31505\loch\f31506 let b=20;
\par \hich\af31506\dbch\af31505\loch\f31506 let c;
\par \hich\af31506\dbch\af31505\loch\f31506    c=a;
\par \hich\af31506\dbch\af31505\loch\f31506    a=b;
\par \hich\af31506\dbch\af31505\loch\f31506    b=c;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log (a,b,c)
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================\hich\af31506\dbch\af31505\loch\f31506 =========================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 10: Swapping of 2 numbers without third variable
\par \hich\af31506\dbch\af31505\loch\f31506 let a=10; 
\par \hich\af31506\dbch\af31505\loch\f31506 let b=20;
\par \hich\af31506\dbch\af31505\loch\f31506    a=a+b //30
\par \hich\af31506\dbch\af31505\loch\f31506    b=a-b //10
\par \hich\af31506\dbch\af31505\loch\f31506    a=a-b //20
\par \hich\af31506\dbch\af31505\loch\f31506 console.log (a,b)
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 11: To check the string or number is palindrome or not( \hich\af31506\dbch\af31505\loch\f31506 ex: 121,madam,anna) using reverse method
\par \hich\af31506\dbch\af31505\loch\f31506 function checkPalindrome()\{
\par \hich\af31506\dbch\af31505\loch\f31506   const string = "anmna"
\par \hich\af31506\dbch\af31505\loch\f31506   let arr= string.split('').reverse().join('')
\par \hich\af31506\dbch\af31505\loch\f31506   //console.log(arr)
\par \hich\af31506\dbch\af31505\loch\f31506   if (string==arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506       console.log("Palindrome")
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   else\{
\par \hich\af31506\dbch\af31505\loch\f31506       console.log("Not Palindr\hich\af31506\dbch\af31505\loch\f31506 ome")
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 checkPalindrome()
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 12: To check the string or number is palindr\hich\af31506\dbch\af31505\loch\f31506 ome or not( ex: 121,madam,anna) using diving length by 2 and then comparing
\par \hich\af31506\dbch\af31505\loch\f31506 function checkPalindrome()\{
\par \hich\af31506\dbch\af31505\loch\f31506    const string = "12321"
\par \hich\af31506\dbch\af31505\loch\f31506    let len = string.length;
\par \hich\af31506\dbch\af31505\loch\f31506    for (i=0; i<len/2;i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506      if (string[i]!==string[len-1-i])\{
\par \hich\af31506\dbch\af31505\loch\f31506          console.log("Not Palind\hich\af31506\dbch\af31505\loch\f31506 rome")
\par \hich\af31506\dbch\af31505\loch\f31506      \}
\par \hich\af31506\dbch\af31505\loch\f31506      else\{
\par \hich\af31506\dbch\af31505\loch\f31506          console.log(" Palindrome")
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 checkPalindrome()
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 13: To find longest word from a string using (for of) /*for(var i=0; i>=nu\hich\af31506\dbch\af31505\loch\f31506 m; i++) means iterate by indexing*/  /*for (var word of words) means iterate by an elements not 

\par \hich\af31506\dbch\af31505\loch\f31506 by indexing*/
\par \hich\af31506\dbch\af31505\loch\f31506 function longestWord()\{
\par \hich\af31506\dbch\af31505\loch\f31506    let string = "supriya is a masooooom good girl"
\par \hich\af31506\dbch\af31505\loch\f31506    var words= string.split(' ')
\par \hich\af31506\dbch\af31505\loch\f31506    var longest=" "
\par \hich\af31506\dbch\af31505\loch\f31506    for(var word of \hich\af31506\dbch\af31505\loch\f31506 words)\{
\par \hich\af31506\dbch\af31505\loch\f31506         console.log(word)
\par \hich\af31506\dbch\af31505\loch\f31506         if (word.length > longest.length)
\par \hich\af31506\dbch\af31505\loch\f31506         \{
\par \hich\af31506\dbch\af31505\loch\f31506             longest=word;
\par \hich\af31506\dbch\af31505\loch\f31506          \}
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506     return longest.length
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 longestWord()
\par ---------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function longestWord()\{
\par \hich\af31506\dbch\af31505\loch\f31506    let string = "supriya is a haha\hich\af31506\dbch\af31505\loch\f31506 hahaha good girl"
\par \hich\af31506\dbch\af31505\loch\f31506    var arr= string.split(' ')
\par \hich\af31506\dbch\af31505\loch\f31506    var longest=" "
\par \hich\af31506\dbch\af31505\loch\f31506    for(var i=0; i<arr.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506       
\par \hich\af31506\dbch\af31505\loch\f31506         if (arr[i].length > longest.length)
\par \hich\af31506\dbch\af31505\loch\f31506         \{
\par \hich\af31506\dbch\af31505\loch\f31506             longest=arr[i];
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    return longest
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(longestWord())
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 14: To find longest word from a string using fu\hich\af31506\dbch\af31505\loch\f31506 nctions
\par \hich\af31506\dbch\af31505\loch\f31506 function findLongestWord() \{
\par \hich\af31506\dbch\af31505\loch\f31506   var str = "Priya is a goog girl and having hardworking skill"
\par \hich\af31506\dbch\af31505\loch\f31506   var longestWord = str.split(' ').sort((a, b) => \{return b.length - a.length \}); //in desc order //from greater to smallest word
\par \hich\af31506\dbch\af31505\loch\f31506      console.log(longestW\hich\af31506\dbch\af31505\loch\f31506 ord[0]);
\par \hich\af31506\dbch\af31505\loch\f31506      console.log(longestWord[0].length); 
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 findLongestWord();
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 15\hich\af31506\dbch\af31505\loch\f31506 : To find longest word from a string using custom code
\par \hich\af31506\dbch\af31505\loch\f31506 function longest() \{
\par \hich\af31506\dbch\af31505\loch\f31506   var str ="Priya is a good girl and having hardworking skills"
\par \hich\af31506\dbch\af31505\loch\f31506   var words = str.split(' ');
\par \hich\af31506\dbch\af31505\loch\f31506   var longest = ''; 
\par \hich\af31506\dbch\af31505\loch\f31506   for (var i = 0; i < words.length; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506     if (words[i].lengt\hich\af31506\dbch\af31505\loch\f31506 h > longest.length) \{
\par \hich\af31506\dbch\af31505\loch\f31506       longest = words[i]; 
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(longest)
\par \hich\af31506\dbch\af31505\loch\f31506   return longest;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 longest();
\par \hich\af31506\dbch\af31505\loch\f31506 ===============================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 16: To find longest common string from array of strings
\par \hich\af31506\dbch\af31505\loch\f31506 function longestCommonString()\{
\par \hich\af31506\dbch\af31505\loch\f31506   array=["go","google","gosh"]
\par \hich\af31506\dbch\af31505\loch\f31506   var arr = array.sort()
\par \hich\af31506\dbch\af31505\loch\f31506   var i=0;
\par \hich\af31506\dbch\af31505\loch\f31506   while(arr[0].length>0 && arr[0].charAt(i)===arr[arr.length-1].charAt(i))\{
\par \hich\af31506\dbch\af31505\loch\f31506     i++;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(arr[0].substring(0,i)) // "go"
\par \hich\af31506\dbch\af31505\loch\f31506   return arr[0].substring(0,i)
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 longestCommonString() 
\par --------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function longestCommonString()\{
\par \hich\af31506\dbch\af31505\loch\f31506   array=["got","google","gosh"]
\par \hich\af31506\dbch\af31505\loch\f31506   var arr = array.sort()
\par \hich\af31506\dbch\af31505\loch\f31506   var i=0;
\par \hich\af31506\dbch\af31505\loch\f31506   while(arr[0].length>0 && arr[0][i]===arr[arr.length-1][i])\{
\par \hich\af31506\dbch\af31505\loch\f31506     i++;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(arr[0].slice(0,i))
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 longestCommonString() 
\par --------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function longestCommonString()\{
\par \hich\af31506\dbch\af31505\loch\f31506  let array=["go","google","gosh"]
\par \hich\af31506\dbch\af31505\loch\f31506   var arr = array.sort((a,b)=>a.length-b.length)
\par \hich\af31506\dbch\af31505\loch\f31506   let result =""
\par \hich\af31506\dbch\af31505\loch\f31506   for(let i=0; i<arr[0].length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(arr[0][i]===arr[arr.length-1][i])\{
\par \hich\af31506\dbch\af31505\loch\f31506       result+=arr[0][i]
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return result
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(longestCommonString())
\par \hich\af31506\dbch\af31505\loch\f31506 ===============================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 17: To find vowels and its count in a given string
\par \hich\af31506\dbch\af31505\loch\f31506 function vowelCounts()\{
\par \hich\af31506\dbch\af31505\loch\f31506   vowels=["a","i","e","o","u"]
\par \hich\af31506\dbch\af31505\loch\f31506   var str ="priya"
\par \hich\af31506\dbch\af31505\loch\f31506   count=0;
\par \hich\af31506\dbch\af31505\loch\f31506   for(var letter of str.toLowerCase())
\par \hich\af31506\dbch\af31505\loch\f31506   \{
\par \hich\af31506\dbch\af31505\loch\f31506     if(vowels.includes\hich\af31506\dbch\af31505\loch\f31506 (letter))
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506       count++;
\par \hich\af31506\dbch\af31505\loch\f31506       console.log(letter)
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(count)
\par \hich\af31506\dbch\af31505\loch\f31506   return count
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 vowelCounts()
\par \hich\af31506\dbch\af31505\loch\f31506 =========================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =======================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 18:To find character occurance fro the string
\par \hich\af31506\dbch\af31505\loch\f31506 function characterOccurance(str,letter)\{
\par \hich\af31506\dbch\af31505\loch\f31506    let count =0;
\par \hich\af31506\dbch\af31505\loch\f31506   for(var i=0; i<str.length-1; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(str.charAt(i)===letter)
\par \hich\af31506\dbch\af31505\loch\f31506       \{
\par \hich\af31506\dbch\af31505\loch\f31506         count++
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(count)
\par \hich\af31506\dbch\af31505\loch\f31506   return count
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 characterOccurance("priyapri", "p")
\par \hich\af31506\dbch\af31505\loch\f31506 ==========================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ======================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 19: To find a first pair whose sum is zero
\par \hich\af31506\dbch\af31505\loch\f31506 function getSumPairZero(array)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506   for(let number of array)
\par \hich\af31506\dbch\af31505\loch\f31506   \{
\par \hich\af31506\dbch\af31505\loch\f31506      for(let i=1; i<array.length; i++)
\par \hich\af31506\dbch\af31505\loch\f31506      \{
\par \hich\af31506\dbch\af31505\loch\f31506          if(number+array[i]===0)
\par \hich\af31506\dbch\af31505\loch\f31506          \{
\par \hich\af31506\dbch\af31505\loch\f31506             return [number, arr\hich\af31506\dbch\af31505\loch\f31506 ay[i]]
\par \hich\af31506\dbch\af31505\loch\f31506          \}
\par \hich\af31506\dbch\af31505\loch\f31506      \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const result = getSumPairZero([-5,-4,-3,-2,-1,0,1,2,3,4,5])
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(result)
\par ------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function getSumPairZero(array)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506   for(let j=0; j<array.length;j++)
\par \hich\af31506\dbch\af31505\loch\f31506   \{
\par \hich\af31506\dbch\af31505\loch\f31506      for(let i=1; i<array.length; i++)
\par \hich\af31506\dbch\af31505\loch\f31506      \{
\par \hich\af31506\dbch\af31505\loch\f31506          if(array[j]+array[i]===0)
\par \hich\af31506\dbch\af31505\loch\f31506          \{
\par \hich\af31506\dbch\af31505\loch\f31506             return [array[j], array[i]]
\par \hich\af31506\dbch\af31505\loch\f31506          \}
\par \hich\af31506\dbch\af31505\loch\f31506      \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const result = getSumPairZero([-5,-4,-3,-2,-1,0,1,2,3,4,5])
\par \hich\af31506\dbch\af31505\loch\f31506 c\hich\af31506\dbch\af31505\loch\f31506 onsole.log(result)
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 20: To find a first pair whose sum is zero using indexi\hich\af31506\dbch\af31505\loch\f31506 ng //Firstly do a sort here
\par \hich\af31506\dbch\af31505\loch\f31506 function getSumPairZero(array)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506   let left = 0;
\par \hich\af31506\dbch\af31505\loch\f31506   let right = array.length-1;
\par \hich\af31506\dbch\af31505\loch\f31506   while(left<right)
\par \hich\af31506\dbch\af31505\loch\f31506   \{
\par \hich\af31506\dbch\af31505\loch\f31506     sum = array[left]+array[right]
\par \hich\af31506\dbch\af31505\loch\f31506     if(sum===0)\{
\par \hich\af31506\dbch\af31505\loch\f31506        return [array[left],array[right]]
\par \hich\af31506\dbch\af31505\loch\f31506     \}else if(sum>0)\{
\par \hich\af31506\dbch\af31505\loch\f31506       right\hich\af31506\dbch\af31505\loch\f31506 --;
\par \hich\af31506\dbch\af31505\loch\f31506     \}else\{
\par \hich\af31506\dbch\af31505\loch\f31506       left++;
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const result = getSumPairZero([-5,-4,-3,-2,-1,0,2,4,6,8])
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(result)
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 21: To find the largest pair of the 2 elements using indexing with unsorte\hich\af31506\dbch\af31505\loch\f31506 d elements
\par \hich\af31506\dbch\af31505\loch\f31506 function largestPairSumofTwo(numbers)\{
\par \hich\af31506\dbch\af31505\loch\f31506     const num = numbers.sort((a, b) => b - a);
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(num)
\par \hich\af31506\dbch\af31505\loch\f31506     return num[0] + num[1];
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const result = largestPairSumofTwo([9,7,8,4,5,6,1,2,3])
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(result)
\par \hich\af31506\dbch\af31505\loch\f31506 ================================\hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 22: To find the largest pair of the 2 elements using indexing with sorted elements
\par \hich\af31506\dbch\af31505\loch\f31506 function largestPairSum\hich\af31506\dbch\af31505\loch\f31506 ofTwo(num)\{   
\par \hich\af31506\dbch\af31505\loch\f31506     return num[num.length-1] + num[num.length-2];
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const result = largestPairSumofTwo([1,2,3,4,5,6,7,8,9])
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(result)
\par \hich\af31506\dbch\af31505\loch\f31506 =================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===============================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 23: To find the index of an element from an array
\par \hich\af31506\dbch\af31505\loch\f31506 const letters = ['a', 'b', 'c']
\par \hich\af31506\dbch\af31505\loch\f31506 const index = letters.indexOf('b')
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(index) // `1`
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================\hich\af31506\dbch\af31505\loch\f31506 ====================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 24: Fibonacci Series (0,1,1,2,3,5,8,13....)
\par \hich\af31506\dbch\af31505\loch\f31506 function fibonacciSeries()\{
\par \hich\af31506\dbch\af31505\loch\f31506    const number = parseInt(prompt('Enter the number of terms: '));
\par \hich\af31506\dbch\af31505\loch\f31506    let n1 = 0, n2 = 1, nextTerm, arr=[]
\par \hich\af31506\dbch\af31505\loch\f31506    arr.push(n1)
\par \hich\af31506\dbch\af31505\loch\f31506    arr.push(n2)
\par \hich\af31506\dbch\af31505\loch\f31506    for (let i = 1; i <= number; i++) 
\par \hich\af31506\dbch\af31505\loch\f31506    \{
\par \hich\af31506\dbch\af31505\loch\f31506      console.log(n1);
\par \hich\af31506\dbch\af31505\loch\f31506      nextTerm = n1 + n2;
\par \hich\af31506\dbch\af31505\loch\f31506      n1 = n2;
\par \hich\af31506\dbch\af31505\loch\f31506      n2 = nex\hich\af31506\dbch\af31505\loch\f31506 tTerm;
\par \hich\af31506\dbch\af31505\loch\f31506      arr.push(nextTerm)
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    return arr
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(fibonacciSeries())
\par \hich\af31506\dbch\af31505\loch\f31506 =============================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===

\par \hich\af31506\dbch\af31505\loch\f31506 Code 25: Fibonacci Series (0,1,1,2,3,5,8,13....) where keeping in array
\par \hich\af31506\dbch\af31505\loch\f31506 function listFibonacci(n) \{
\par \hich\af31506\dbch\af31505\loch\f31506 var arr = [0, 1]
\par \hich\af31506\dbch\af31505\loch\f31506   for (var  i = 1; i < n; i++) 
\par \hich\af31506\dbch\af31505\loch\f31506     arr.push(arr[i] + arr[i - 1])
\par 
\par \hich\af31506\dbch\af31505\loch\f31506   return arr
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(listFibonacci(4))
\par -----------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function listFibonacci(n) \{
\par \hich\af31506\dbch\af31505\loch\f31506 var arr = [0, 1]
\par \hich\af31506\dbch\af31505\loch\f31506   for (var  i = 0; i < n; i++) 
\par \hich\af31506\dbch\af31505\loch\f31506     arr.push(arr[i] + arr[i + 1])
\par 
\par \hich\af31506\dbch\af31505\loch\f31506   return arr
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(listFibonacci(4))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 26: Finding a missing elements in an array and then add with existing elem\hich\af31506\dbch\af31505\loch\f31506 ents. (-1 means if elements not found then it will return always -1 as per rule)
\par \hich\af31506\dbch\af31505\loch\f31506 function missingElement()\{
\par \hich\af31506\dbch\af31505\loch\f31506   var a = [1,2,5]
\par \hich\af31506\dbch\af31505\loch\f31506   var missing = [];
\par \hich\af31506\dbch\af31505\loch\f31506   for (var i = 1; i <= 6; i++) 
\par \hich\af31506\dbch\af31505\loch\f31506    \{
\par \hich\af31506\dbch\af31505\loch\f31506     if (a.indexOf(i) == -1) 
\par \hich\af31506\dbch\af31505\loch\f31506      \{
\par \hich\af31506\dbch\af31505\loch\f31506        missing.push(i); 
\par \hich\af31506\dbch\af31505\loch\f31506      \}
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506  console.log(missing) //missing array
\par \hich\af31506\dbch\af31505\loch\f31506  console.log(a.concat(missing).sort()); //actual+missing elements
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 missingElement()
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 27: Find the missing no. in an array
\par \hich\af31506\dbch\af31505\loch\f31506 function missing(arr) \{
\par \hich\af31506\dbch\af31505\loch\f31506     var x = 0;
\par \hich\af31506\dbch\af31505\loch\f31506     for (var i = 0; i < arr.length; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506         x = x + 1;
\par \hich\af31506\dbch\af31505\loch\f31506         if (arr[i] != x) \{
\par \hich\af31506\dbch\af31505\loch\f31506             return(x); //9
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 missing([1, 2, 3, 4, 5, 6, 7, 8, 10])
\par -------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function missing(arr) \{
\par \hich\af31506\dbch\af31505\loch\f31506     for (var i = 0, x=1; i < arr.length; x++,i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506         if (arr[i] != x) \{ //index value comparing with pointer
\par \hich\af31506\dbch\af31505\loch\f31506             retu\hich\af31506\dbch\af31505\loch\f31506 rn x; //9
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(missing([1, 2, 3, 4, 5, 6, 7, 8, 10]))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 28: Sorting of an string/character
\par \hich\af31506\dbch\af31505\loch\f31506 function sorting(arr) \{
\par \hich\af31506\dbch\af31505\loch\f31506  return  arr.sort()
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sorting(["d","g","y","e","r","p"]))
\par \hich\af31506\dbch\af31505\loch\f31506 ==========================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ======================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 29: Sorting of an number
\par \hich\af31506\dbch\af31505\loch\f31506 function sorting(arr) \{
\par \hich\af31506\dbch\af31505\loch\f31506  return  arr.sort((a,b)=>\{return a-b\}) 
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sorting([1,23,34,2,76,78])) //[1, 2, 23, 34, 76, 78]
\par \hich\af31506\dbch\af31505\loch\f31506 ========================================\hich\af31506\dbch\af31505\loch\f31506 ========================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 30: To check if given number is prime or not
\par \hich\af31506\dbch\af31505\loch\f31506 function isPrime(num) \{
\par \hich\af31506\dbch\af31505\loch\f31506   if(num < 2) return false;
\par \hich\af31506\dbch\af31505\loch\f31506   for (let k = 2; k < num; k++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if( num % k == 0)\{ return false\}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return true;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(isPrime(17)) //true
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 31: To print all the numbers from 2 to 100
\par \hich\af31506\dbch\af31505\loch\f31506 for (let i = 2; i <= 100; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506     let flag = 0;
\par \hich\af31506\dbch\af31505\loch\f31506     for (let j = 2; j < i; j++) \{
\par \hich\af31506\dbch\af31505\loch\f31506         if (i % j == 0) \{
\par \hich\af31506\dbch\af31505\loch\f31506             flag = 1;
\par \hich\af31506\dbch\af31505\loch\f31506             break;
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506   \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506     if (i > 1 && flag == 0) \{
\par \hich\af31506\dbch\af31505\loch\f31506         console.log(i);
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \}
\par --------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 for (let i = 2; i <= 100; i++) 
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506     let flag = 0;
\par \hich\af31506\dbch\af31505\loch\f31506     for (let j = 2; j < i; j++) \{ //2<2 //2<3 //3<4
\par \hich\af31506\dbch\af31505\loch\f31506         if (i % j == 0) \{
\par \hich\af31506\dbch\af31505\loch\f31506             flag = 1;
\par \hich\af31506\dbch\af31505\loch\f31506             break;
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     if (i > 1 && flag == 0) 
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         document.write(i+ "</br>");
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 32: To find unique values from 2 arrays and keep into one array.
\par \hich\af31506\dbch\af31505\loch\f31506 function \hich\af31506\dbch\af31505\loch\f31506 uniqueElements(arr1,arr2)\{
\par \hich\af31506\dbch\af31505\loch\f31506    let arr =[...arr1,...arr2];
\par \hich\af31506\dbch\af31505\loch\f31506    let array =[...new Set(arr)]
\par \hich\af31506\dbch\af31505\loch\f31506    console.log(array)
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 uniqueElements([1,2,3,4,4],[2,3,4,5,6])
\par \hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ==========================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 33: Find first duplicate element from an array
\par \hich\af31506\dbch\af31505\loch\f31506 function firstDuplicate() \{
\par \hich\af31506\dbch\af31505\loch\f31506     let arr = [1,2,2,5,5];
\par \hich\af31506\dbch\af31505\loch\f31506     let data = \{\};
\par \hich\af31506\dbch\af31505\loch\f31506     for (var item of arr) \{
\par \hich\af31506\dbch\af31505\loch\f31506         if (data[item]) \{
\par \hich\af31506\dbch\af31505\loch\f31506  \hich\af31506\dbch\af31505\loch\f31506            return item
\par \hich\af31506\dbch\af31505\loch\f31506         \} else \{
\par \hich\af31506\dbch\af31505\loch\f31506             data[item] = item
\par \hich\af31506\dbch\af31505\loch\f31506             console.log(data[item])
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     return -1
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(firstDuplicate()) 
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 34: Write a program that prints the numbers from 1 to 100. But for multipl\hich\af31506\dbch\af31505\loch\f31506 es of three, print "Fizz" instead of the number, and for the multiples of five, print "Buzz". 

\par \hich\af31506\dbch\af31505\loch\f31506 For numbers which are multiples of both three and five, print "FizzBuzz"
\par \hich\af31506\dbch\af31505\loch\f31506 for (var i=1; i <= 20; i++)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506     if (i % 15 == 0)
\par \hich\af31506\dbch\af31505\loch\f31506         console.log("FizzBuzz");
\par \hich\af31506\dbch\af31505\loch\f31506     \hich\af31506\dbch\af31505\loch\f31506 else if (i % 3 == 0)
\par \hich\af31506\dbch\af31505\loch\f31506         console.log("Fizz");
\par \hich\af31506\dbch\af31505\loch\f31506     else if (i % 5 == 0)
\par \hich\af31506\dbch\af31505\loch\f31506         console.log("Buzz");
\par \hich\af31506\dbch\af31505\loch\f31506     else
\par \hich\af31506\dbch\af31505\loch\f31506         console.log(i);
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 35: Uppercase of each first letter of a words 
\par \hich\af31506\dbch\af31505\loch\f31506 function upperCaseFirsstLetter()\{
\par \hich\af31506\dbch\af31505\loch\f31506    var string ="India is my country";
\par \hich\af31506\dbch\af31505\loch\f31506    var words = string.toLowerCase().split(" ")
\par \hich\af31506\dbch\af31505\loch\f31506    for( var i=0; i<words.\hich\af31506\dbch\af31505\loch\f31506 length; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506       words[i]=words[i][0].toUpperCase() + words[i].slice(1) //slice is used here to give all the letters except first letter.
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506    return words.join(" ")
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(upperCaseFirsstLetter())
\par \hich\af31506\dbch\af31505\loch\f31506 =========================================\hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 36: Uppercase of each first letter of a words using map function
\par \hich\af31506\dbch\af31505\loch\f31506 function upperCaseFirsstLetter()\{
\par \hich\af31506\dbch\af31505\loch\f31506    var string ="India is my country";
\par \hich\af31506\dbch\af31505\loch\f31506    var words = string.toLowerCase().split(" ").map((ele)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506                return ele[0].toUpperCase() + ele.slice(1)
\par \hich\af31506\dbch\af31505\loch\f31506    \})
\par \hich\af31506\dbch\af31505\loch\f31506    return words.join(" ")
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(upperCaseFirsstLetter())
\par \hich\af31506\dbch\af31505\loch\f31506 =============================\hich\af31506\dbch\af31505\loch\f31506 ===================================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 37: To check ending of the string with given character/s using inbuild function
\par \hich\af31506\dbch\af31505\loch\f31506 function confirmEnding(\hich\af31506\dbch\af31505\loch\f31506 str,target)\{
\par \hich\af31506\dbch\af31505\loch\f31506    return str.endsWith(target) //true
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(confirmEnding("priya","a"))
\par \hich\af31506\dbch\af31505\loch\f31506 ===================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ============

\par \hich\af31506\dbch\af31505\loch\f31506 Code 38: To check ending of the string with given character/s using custom
\par \hich\af31506\dbch\af31505\loch\f31506 function confirmEnding(str,target)\{
\par \hich\af31506\dbch\af31505\loch\f31506    return str.substr(-target.length)===target
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(confirmEnding("priya","a"))
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================\hich\af31506\dbch\af31505\loch\f31506 ===================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 39: To find the largest elements fro the 2 dimensional array 
\par \hich\af31506\dbch\af31505\loch\f31506 function largestFromArray(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506    var max=[];
\par \hich\af31506\dbch\af31505\loch\f31506    for(var\hich\af31506\dbch\af31505\loch\f31506  i=0; i<arr.length;i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506      var tempMax =arr[i][0] //first elements of the 4 internal arrays i,e(1,5,45,89
\par \hich\af31506\dbch\af31505\loch\f31506      for(var j=0; j<arr[i].length; j++)\{
\par \hich\af31506\dbch\af31505\loch\f31506         var currElement = arr[i][j];
\par \hich\af31506\dbch\af31505\loch\f31506         if(currElement>=tempMax)\{
\par \hich\af31506\dbch\af31505\loch\f31506           tempMax = currElement
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506      \}
\par \hich\af31506\dbch\af31505\loch\f31506       max.push(tempMax)
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(max)
\par \hich\af31506\dbch\af31505\loch\f31506    return max;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 largestFromArray([[1,2,3,4],[5,6,7,9],[45,76,2,1],[89,90,87,9]])
\par \hich\af31506\dbch\af31505\loch\f31506 =============================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 40: To find the largest elements fro the 2 dimensional array in another way
\par \hich\af31506\dbch\af31505\loch\f31506 function largestFromArray(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506    var max=[0,0,0,0];
\par \hich\af31506\dbch\af31505\loch\f31506    for(var i=0; i<arr.length;i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506       for(var j=0;\hich\af31506\dbch\af31505\loch\f31506  j<arr[i].length; j++)
\par \hich\af31506\dbch\af31505\loch\f31506       \{
\par \hich\af31506\dbch\af31505\loch\f31506           if(arr[i][j]>=max[i])\{
\par \hich\af31506\dbch\af31505\loch\f31506           max[i] = arr[i][j]
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(max)
\par \hich\af31506\dbch\af31505\loch\f31506   return max;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 largestFromArray([[1,2,3,4],[5,6,7,9],[45,76,2,1],[89,90,87,9]])
\par \hich\af31506\dbch\af31505\loch\f31506 ========================================\hich\af31506\dbch\af31505\loch\f31506 ========================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 41: Print string n times using inbuilt function
\par \hich\af31506\dbch\af31505\loch\f31506 function repeatStrinNumTimes(str, num)\{
\par \hich\af31506\dbch\af31505\loch\f31506 if (num<1) return ""
\par \hich\af31506\dbch\af31505\loch\f31506 retur\hich\af31506\dbch\af31505\loch\f31506 n str.repeat(num)
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(repeatStrinNumTimes("priya",3))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 42: Print string n times in custom way
\par \hich\af31506\dbch\af31505\loch\f31506 function repeatStrinNumTimes(str, n\hich\af31506\dbch\af31505\loch\f31506 um)\{
\par \hich\af31506\dbch\af31505\loch\f31506 var final="";
\par \hich\af31506\dbch\af31505\loch\f31506 if(num<0) return ""
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=0; i<num;i++)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506   final=final+str
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 return final
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(repeatStrinNumTimes("priya",3))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 43:Print string n times in custom way
\par \hich\af31506\dbch\af31505\loch\f31506 function repeatStrinNumTimes(str, num)\{
\par \hich\af31506\dbch\af31505\loch\f31506 if(num<0) return ""
\par \hich\af31506\dbch\af31505\loch\f31506 if(num===1) return str
\par \hich\af31506\dbch\af31505\loch\f31506 return str+ repeatStrinNumTimes(str, num-1)
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(repeatS\hich\af31506\dbch\af31505\loch\f31506 trinNumTimes("priya",3))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 44: Truncate the string
\par \hich\af31506\dbch\af31505\loch\f31506 function truncateString(s\hich\af31506\dbch\af31505\loch\f31506 tr, num)\{
\par \hich\af31506\dbch\af31505\loch\f31506 if(num<=3) return str.slice(0,num)
\par \hich\af31506\dbch\af31505\loch\f31506 return str.slice(0,num-3)+"..." //retuen only 4 digits thats why subtracted from 3
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(truncateString("priyabagde",2)) //pr
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(truncateString("priyabagde",4)) //p... //retuen only 4 digits
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code \hich\af31506\dbch\af31505\loch\f31506 45: Converting one dimensional array into n dimensional array using slice
\par \hich\af31506\dbch\af31505\loch\f31506 function chunkArrayInGroup(arr, size)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var group=[]
\par \hich\af31506\dbch\af31505\loch\f31506   while(arr.length>0)\{
\par \hich\af31506\dbch\af31505\loch\f31506   group.push(arr.slice(0, size))
\par \hich\af31506\dbch\af31505\loch\f31506   arr = arr.slice(size)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return group
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log (chunkArrayInGr\hich\af31506\dbch\af31505\loch\f31506 oup(['a','b','c','d'],2)) //[["a", "b"], ["c", "d"]]
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 46: Converting one di\hich\af31506\dbch\af31505\loch\f31506 mensional array into n dimensional array using splice
\par \hich\af31506\dbch\af31505\loch\f31506 function chunkArrayInGroup(arr, size)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var group=[]
\par \hich\af31506\dbch\af31505\loch\f31506   while(arr.length>0)\{
\par \hich\af31506\dbch\af31505\loch\f31506   group.push(arr.splice(0, size))
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return group
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log (chunkArrayInGroup(['a','b','c','d'],2)) //[["a", "b"], ["\hich\af31506\dbch\af31505\loch\f31506 c", "d"]]
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 47: To find only truthy values
\par \hich\af31506\dbch\af31505\loch\f31506 function removeFalseValue(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506  \hich\af31506\dbch\af31505\loch\f31506 var trueth = []
\par \hich\af31506\dbch\af31505\loch\f31506  for (var item of arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506    if(item)\{
\par \hich\af31506\dbch\af31505\loch\f31506       trueth.push(item)
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506  \}
\par \hich\af31506\dbch\af31505\loch\f31506  return trueth
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(removeFalseValue(["priya", 0 ,"", false, null,undefined, "ate", Nan ,9 ])) //["priya","ate",9]
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 49:  To find only truthy values using filter
\par \hich\af31506\dbch\af31505\loch\f31506 function removeFalseValue(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   return arr.filter((item)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506                 return item\})
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(removeFalseValue(["priya", 0 ,"", false, null,undefined, "ate", 9 ]))
\par \hich\af31506\dbch\af31505\loch\f31506 ==\hich\af31506\dbch\af31505\loch\f31506 ==============================================================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 50: Checking all letters of second words should present in first word, in th\hich\af31506\dbch\af31505\loch\f31506 e same order using include function
\par \hich\af31506\dbch\af31505\loch\f31506 function characterPresent(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var first = arr[0].toLowerCase()
\par \hich\af31506\dbch\af31505\loch\f31506   var second = arr[1].toLowerCase()
\par \hich\af31506\dbch\af31505\loch\f31506   for (var letter of second)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(!first.includes(letter))\{
\par \hich\af31506\dbch\af31505\loch\f31506       return false
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return true
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.l\hich\af31506\dbch\af31505\loch\f31506 og(characterPresent(["hello","hey"]))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 51: Checking all letters of second w\hich\af31506\dbch\af31505\loch\f31506 ords should present in first word, in the same order using indexOf without indexing i.e for-of loop
\par \hich\af31506\dbch\af31505\loch\f31506 function characterPresent(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var first = arr[0].toLowerCase()
\par \hich\af31506\dbch\af31505\loch\f31506   var second = arr[1].toLowerCase()
\par \hich\af31506\dbch\af31505\loch\f31506   for (var letter of second)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(first.indexOf(letter)== -1)\{ //-1 means not found in array
\par \hich\af31506\dbch\af31505\loch\f31506       return false
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return true
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(characterPresent(["hello","he"]))
\par ---------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function characte\hich\af31506\dbch\af31505\loch\f31506 rPresent(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var first = arr[0].toLowerCase()
\par \hich\af31506\dbch\af31505\loch\f31506   var second = arr[1].toLowerCase()
\par \hich\af31506\dbch\af31505\loch\f31506   for (var i=0; i<second.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(!first.includes(second[i]))\{ //-1 means not found in array
\par \hich\af31506\dbch\af31505\loch\f31506       return false
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return true
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(characte\hich\af31506\dbch\af31505\loch\f31506 rPresent(["hello","he"]))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 52: Checking all letters of second words should \hich\af31506\dbch\af31505\loch\f31506 present in first word, in the same order using indexOf with indexing
\par \hich\af31506\dbch\af31505\loch\f31506 function characterPresent(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var first = arr[0].toLowerCase()
\par \hich\af31506\dbch\af31505\loch\f31506   var second = arr[1].toLowerCase()
\par \hich\af31506\dbch\af31505\loch\f31506   for (var i=0; i<second.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(first.indexOf(second)== -1)\{ //-1 mean\hich\af31506\dbch\af31505\loch\f31506 s not found in array
\par \hich\af31506\dbch\af31505\loch\f31506       return false
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return true
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(characterPresent(["hello","he"]))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 53: Unique values only from 2 arrays
\par \hich\af31506\dbch\af31505\loch\f31506 function diffArrayElement(arr1, arr2)\{
\par \hich\af31506\dbch\af31505\loch\f31506 var result =[]
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=0; i<arr1.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506   if(arr2.indexOf(arr1[i]) === -1)\{
\par \hich\af31506\dbch\af31505\loch\f31506     result.push(arr1[i])
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 for(var j=0; j<arr2.length; j++)\{
\par \hich\af31506\dbch\af31505\loch\f31506   if(arr1.indexOf(arr2[j]) === -1)\{
\par \hich\af31506\dbch\af31505\loch\f31506     result.push(arr2[j])
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 return result
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(diffArray\hich\af31506\dbch\af31505\loch\f31506 Element([1,2,3,4], [2,3,4,5])) //[1,5]
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 54: Unique values only from 2 array\hich\af31506\dbch\af31505\loch\f31506 s
\par \hich\af31506\dbch\af31505\loch\f31506 function diffArrayElement(arr1, arr2)\{
\par \hich\af31506\dbch\af31505\loch\f31506 var combine = arr1.concat(arr2)
\par \hich\af31506\dbch\af31505\loch\f31506 return combine.filter( (num)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506   if(arr1.indexOf(num)== -1 || arr2.indexOf(num)== -1 ) return num
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(diffArrayElement([1,2,3,4], [2,3,4,5])) [1,5]
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 55: Remove Dupli\hich\af31506\dbch\af31505\loch\f31506 cates from 2 arrays using Set
\par \hich\af31506\dbch\af31505\loch\f31506 function uniquefromArrays(arr1, arr2)\{
\par \hich\af31506\dbch\af31505\loch\f31506  let arr = [...arr1, ...arr2]
\par \hich\af31506\dbch\af31505\loch\f31506  let unique = [...new Set(arr)];
\par \hich\af31506\dbch\af31505\loch\f31506  return unique
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(uniquefromArrays([1,2,3,4], [2,3,4,5])) //[1,2,3,4,5]
\par \hich\af31506\dbch\af31505\loch\f31506 =========================================\hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 56: Sum of all numbers from start to end given number
\par \hich\af31506\dbch\af31505\loch\f31506 function sumFromStartToEnd(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var start = Math.min(arr[0\hich\af31506\dbch\af31505\loch\f31506 ], arr[1])
\par \hich\af31506\dbch\af31505\loch\f31506   var end = Math.max(arr[0], arr[1])
\par \hich\af31506\dbch\af31505\loch\f31506   sum =0
\par \hich\af31506\dbch\af31505\loch\f31506   for(var i= start; i<=end; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     sum+=i
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return sum
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sumFromStartToEnd([1,4]))
\par \hich\af31506\dbch\af31505\loch\f31506 =================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===============================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 57: Remove or Delete elements from an array using various ways
\par \hich\af31506\dbch\af31505\loch\f31506 Way 1: Removing Elements from End of a JavaScript Array
\par \hich\af31506\dbch\af31505\loch\f31506        var ar = [1, 2, 3, 4, 5, 6]; 
\par \hich\af31506\dbch\af31505\loch\f31506        ar.lengt\hich\af31506\dbch\af31505\loch\f31506 h = 4; // set length to remove elements
\par \hich\af31506\dbch\af31505\loch\f31506        console.log( ar ); // [1, 2, 3, 4]
\par \hich\af31506\dbch\af31505\loch\f31506     
\par \hich\af31506\dbch\af31505\loch\f31506 Way 2: Removing Elements from Beginning of a JavaScript Array
\par \hich\af31506\dbch\af31505\loch\f31506         var ar = ['zero', 'one', 'two', 'three'];
\par \hich\af31506\dbch\af31505\loch\f31506         ar.shift(); // returns "zero"
\par \hich\af31506\dbch\af31505\loch\f31506         console.log( ar ); // ["one", "two", "three"]
\par \hich\af31506\dbch\af31505\loch\f31506         
\par \hich\af31506\dbch\af31505\loch\f31506 Way 3: Using Splice to Remove Array Elements in JavaScript
\par \hich\af31506\dbch\af31505\loch\f31506         var list = ["bar", "baz", "foo", "qux"];
\par \hich\af31506\dbch\af31505\loch\f31506         list.splice(0, 2); // Starting at index\hich\af31506\dbch\af31505\loch\f31506  position 0, remove two elements ["bar", "baz"] and retains ["foo", "qux"].
\par \hich\af31506\dbch\af31505\loch\f31506         
\par \hich\af31506\dbch\af31505\loch\f31506 Way 4: Removing Array Items By Value Using Splice
\par \hich\af31506\dbch\af31505\loch\f31506        var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
\par \hich\af31506\dbch\af31505\loch\f31506        for( var i = 0; i < arr.length; i++)\{ 
\par \hich\af31506\dbch\af31505\loch\f31506            if ( arr[i] ===\hich\af31506\dbch\af31505\loch\f31506  5) \{ 
\par \hich\af31506\dbch\af31505\loch\f31506               arr.splice(i, 1); 
\par \hich\af31506\dbch\af31505\loch\f31506            \}
\par \hich\af31506\dbch\af31505\loch\f31506        \} // [1, 2, 3, 4, 6, 7, 8, 9, 0]
\par \hich\af31506\dbch\af31505\loch\f31506        
\par \hich\af31506\dbch\af31505\loch\f31506        OR
\par \hich\af31506\dbch\af31505\loch\f31506        
\par \hich\af31506\dbch\af31505\loch\f31506         var arr = [1, 2, 3, 4, 5, 5, 6, 7, 8, 5, 9, 0];
\par \hich\af31506\dbch\af31505\loch\f31506         for( var i = 0; i < arr.length; i++)\{                             
\par \hich\af31506\dbch\af31505\loch\f31506       \hich\af31506\dbch\af31505\loch\f31506   if ( arr[i] === 5) \{ 
\par \hich\af31506\dbch\af31505\loch\f31506             arr.splice(i, 1); 
\par \hich\af31506\dbch\af31505\loch\f31506             i--; 
\par \hich\af31506\dbch\af31505\loch\f31506           \}
\par \hich\af31506\dbch\af31505\loch\f31506         \} // [1, 2, 3, 4, 6, 7, 8, 9, 0]
\par \hich\af31506\dbch\af31505\loch\f31506         
\par \hich\af31506\dbch\af31505\loch\f31506 Way 5: Using the Array filter Method to Remove Items By Value
\par \hich\af31506\dbch\af31505\loch\f31506         var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
\par \hich\af31506\dbch\af31505\loch\f31506         var filtered = array.filter(function(value, index, arr)\{ 
\par \hich\af31506\dbch\af31505\loch\f31506         return value > 5;
\par \hich\af31506\dbch\af31505\loch\f31506         \}); //filtered => [6, 7, 8, 9]
\par \hich\af31506\dbch\af31505\loch\f31506    
\par \hich\af31506\dbch\af31505\loch\f31506 Way 6: Making a Remove Method
\par \hich\af31506\dbch\af31505\loch\f31506        function arrayRemove(arr, value) \{ 
\par \hich\af31506\dbch\af31505\loch\f31506         return arr.filter(function(ele)\{ 
\par \hich\af31506\dbch\af31505\loch\f31506       \hich\af31506\dbch\af31505\loch\f31506       return ele != value; 
\par \hich\af31506\dbch\af31505\loch\f31506         \});
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     var result = arrayRemove(array, 6); // result = [1, 2, 3, 4, 5, 7, 8, 9, 0]
\par \hich\af31506\dbch\af31505\loch\f31506     
\par \hich\af31506\dbch\af31505\loch\f31506 Way 7: Explicitly Remove Array Elements Using the Delete Operator
\par \hich\af31506\dbch\af31505\loch\f31506          var ar = [1, 2, 3, 4, 5, 6];
\par \hich\af31506\dbch\af31505\loch\f31506          delete ar[4]\hich\af31506\dbch\af31505\loch\f31506 ; // delete element with index 4
\par \hich\af31506\dbch\af31505\loch\f31506          console.log( ar ); // [1, 2, 3, 4, undefined, 6]
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========

\par \hich\af31506\dbch\af31505\loch\f31506 Code 58 : Spiral Matrix Printing | Print the elements of a matrix in spiral form
\par \hich\af31506\dbch\af31505\loch\f31506 var input = [[1,  2,   3,  4],
\par \hich\af31506\dbch\af31505\loch\f31506              [5,  6,   7,  8],
\par \hich\af31506\dbch\af31505\loch\f31506              [9,  10, 11, 12],
\par \hich\af31506\dbch\af31505\loch\f31506              [13, 14, 15, 16]];
\par \hich\af31506\dbch\af31505\loch\f31506 function run(input, result) \{
\par \hich\af31506\dbch\af31505\loch\f31506     // a\hich\af31506\dbch\af31505\loch\f31506 dd the first row to result
\par \hich\af31506\dbch\af31505\loch\f31506     result = result.concat(input.shift());
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("res1", result) //[1, 2, 3, 4] //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7]
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("in1", input)   //[[5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] // [[\hich\af31506\dbch\af31505\loch\f31506 10, 11]]
\par 
\par \hich\af31506\dbch\af31505\loch\f31506     // add the last element of each remaining row
\par \hich\af31506\dbch\af31505\loch\f31506     input.forEach(function(rightEnd) \{
\par \hich\af31506\dbch\af31505\loch\f31506         result.push(rightEnd.pop());
\par \hich\af31506\dbch\af31505\loch\f31506     \});
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("res2", result) //[1, 2, 3, 4, 8, 12, 16] //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11]
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("in2", input)   //[[5, 6, 7], [9, 10, 11], [13, 14, 15]] // [[10]]
\par 
\par \hich\af31506\dbch\af31505\loch\f31506     // add the last row in reverse order
\par \hich\af31506\dbch\af31505\loch\f31506     result = result\hich\af31506\dbch\af31505\loch\f31506 .concat(input.pop().reverse());
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("res3", result) //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13] //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("in3", input)   //[[5, 6, 7], [9, 10, 11]]
\par 
\par \hich\af31506\dbch\af31505\loch\f31506     // add the first element in each\hich\af31506\dbch\af31505\loch\f31506  remaining row (going upwards)
\par \hich\af31506\dbch\af31505\loch\f31506     var tmp = [];
\par \hich\af31506\dbch\af31505\loch\f31506     input.forEach(function(leftEnd) \{    
\par \hich\af31506\dbch\af31505\loch\f31506         tmp.push(leftEnd.shift());
\par \hich\af31506\dbch\af31505\loch\f31506     \});
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("res4", result) //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13]
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("in4", input)   //[[6, 7], [10, 11]]
\par \hich\af31506\dbch\af31505\loch\f31506     
\par \hich\af31506\dbch\af31505\loch\f31506     result = result.concat(tmp.reverse());
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("temp", temp) //[9, 5]
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("res5", result) //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5]
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("in5", input)   //[[6, 7], [10, 11]]
\par \hich\af31506\dbch\af31505\loch\f31506     
\par \hich\af31506\dbch\af31505\loch\f31506     //again start the function
\par \hich\af31506\dbch\af31505\loch\f31506    \hich\af31506\dbch\af31505\loch\f31506  return run(input, result); 
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log('result', run(input, [])); // [1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10]
\par \hich\af31506\dbch\af31505\loch\f31506 ==============================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ==================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 59: Currying function i.e sum of multiple argument functions //inner function can access outer function variables but outer functions can't able to acceess inner function.
\par \hich\af31506\dbch\af31505\loch\f31506 function sum(a)\{
\par \hich\af31506\dbch\af31505\loch\f31506   return function sum(b)\{
\par \hich\af31506\dbch\af31505\loch\f31506     return function sum(c)\{
\par \hich\af31506\dbch\af31505\loch\f31506       re\hich\af31506\dbch\af31505\loch\f31506 turn function sum(d)\{
\par \hich\af31506\dbch\af31505\loch\f31506          return a+b+c+d;
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sum(1)(2)(3)(4))
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const sum = (a) => (b) => (c) => (d) => a+b+c+d // using ES6
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sum(1)(2)(3)(4))
\par \hich\af31506\dbch\af31505\loch\f31506 =================================================================\hich\af31506\dbch\af31505\loch\f31506 ===============================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 60: Find SUM, PRODUCT AND AVERAGE of the numbers //accumulation means collection
\par \hich\af31506\dbch\af31505\loch\f31506 let arr=[1,2,3,4,5]
\par \hich\af31506\dbch\af31505\loch\f31506 let sum = arr.reduce((accum, curr) =>\{
\par \hich\af31506\dbch\af31505\loch\f31506     return accum + curr;
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sum) //15
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let sum = arr.reduce((accum, curr) =>\{
\par \hich\af31506\dbch\af31505\loch\f31506     return accum + curr;
\par \}\hich\af31506\dbch\af31505\loch\f31506 ,5) // can set initial value as 5 also
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sum) //20
\par 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let product = arr.reduce((accum, curr) =>\{
\par \hich\af31506\dbch\af31505\loch\f31506     return accum * curr;
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(product)//120
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let average = arr.reduce((accum, curr, index, array) =>\{
\par \hich\af31506\dbch\af31505\loch\f31506     let total = accum + curr;
\par \hich\af31506\dbch\af31505\loch\f31506     if(index === array.length-1)\{
\par \hich\af31506\dbch\af31505\loch\f31506        return total/array.length
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     return total
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(average)//3
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 61: Convert 2D/3D array into\hich\af31506\dbch\af31505\loch\f31506  1D using reduce function and inbuilt function i.e flat
\par \hich\af31506\dbch\af31505\loch\f31506 const arr = [
\par \hich\af31506\dbch\af31505\loch\f31506                ['a','b'],
\par \hich\af31506\dbch\af31505\loch\f31506                ['c','d'],
\par \hich\af31506\dbch\af31505\loch\f31506                ['e','f'],
\par \hich\af31506\dbch\af31505\loch\f31506             ]
\par \hich\af31506\dbch\af31505\loch\f31506 const flatArr = arr.reduce((accum, curr)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506 return accum.concat(curr)
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(flatArr) \hich\af31506\dbch\af31505\loch\f31506 //["a", "b", "c", "d", "e", "f"]
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const arr = [
\par \hich\af31506\dbch\af31505\loch\f31506 ['a','b'],
\par \hich\af31506\dbch\af31505\loch\f31506 ['c','d'],
\par \hich\af31506\dbch\af31505\loch\f31506 ['e',['f','g']],
\par \hich\af31506\dbch\af31505\loch\f31506 ]
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(arr.flat(2)) //["a", "b", "c", "d", "e", "f"] //bydefault 1 hota h as a argument
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const arr = [
\par \hich\af31506\dbch\af31505\loch\f31506 ['a','b'],
\par \hich\af31506\dbch\af31505\loch\f31506 ['c','d'],
\par \hich\af31506\dbch\af31505\loch\f31506 ['e',['f',['g','h']]],
\par \hich\af31506\dbch\af31505\loch\f31506 ]
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(arr.flat(3)) //["a", "b", "c", "d", "e", "f", "g", "h"]
\par \hich\af31506\dbch\af31505\loch\f31506 =============================\hich\af31506\dbch\af31505\loch\f31506 ===================================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 62: Reverse of a nuber using converting into string
\par \hich\af31506\dbch\af31505\loch\f31506 function reverseNumber(input)\{
\par \hich\af31506\dbch\af31505\loch\f31506 return(
\par \hich\af31506\dbch\af31505\loch\f31506     parseFlo\hich\af31506\dbch\af31505\loch\f31506 at(input.toString().split('').reverse().join(''))*Math.sign(input)
\par \hich\af31506\dbch\af31505\loch\f31506 )
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(reverseNumber(123)) //321
\par \hich\af31506\dbch\af31505\loch\f31506 ===================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =============================

\par \hich\af31506\dbch\af31505\loch\f31506 code 63: Reverse of a nuber
\par \hich\af31506\dbch\af31505\loch\f31506 function reverseNumber(input)\{
\par \hich\af31506\dbch\af31505\loch\f31506 var result=0;
\par \hich\af31506\dbch\af31505\loch\f31506 while(input!=0)\{ //123 //12 //1
\par \hich\af31506\dbch\af31505\loch\f31506     result = result *10; //0*10=0 //3*10=30 // 32*10 =320
\par \hich\af31506\dbch\af31505\loch\f31506     result = result + (input%10) //give reminder // 0+3=3 // 30+2=32 //320+1=321
\par \hich\af31506\dbch\af31505\loch\f31506     input = Math.floor(input/10) //12 //1
\par \hich\af31506\dbch\af31505\loch\f31506    // console.log("in", input)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506   return result
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(reverseNumber(123)) //321
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================\hich\af31506\dbch\af31505\loch\f31506 =========================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 64: Check Armstrong Number
\par \hich\af31506\dbch\af31505\loch\f31506 function CheckArmstrongNum(num)\{ //153
\par \hich\af31506\dbch\af31505\loch\f31506   var temp = num;
\par \hich\af31506\dbch\af31505\loch\f31506   var result =0;
\par \hich\af31506\dbch\af31505\loch\f31506   var a;
\par \hich\af31506\dbch\af31505\loch\f31506   w\hich\af31506\dbch\af31505\loch\f31506 hile(temp>0)\{ //153 //15 //1
\par \hich\af31506\dbch\af31505\loch\f31506     a= temp%10; //3 //5 //1
\par \hich\af31506\dbch\af31505\loch\f31506     temp= parseInt(temp/10) //15 // 1
\par \hich\af31506\dbch\af31505\loch\f31506     result= result+a*a*a //0+3*3*3 // 27+ 5*5*5 // 27+ 5*5*5 +1*1*1
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   if(result==num)\{
\par \hich\af31506\dbch\af31505\loch\f31506     return true
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return false
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(CheckArmstrongNum(153\hich\af31506\dbch\af31505\loch\f31506 )) //3*3*3 + 5*5*5 + 1*1*1 
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 code 65: To find the closest number in an array
\par \hich\af31506\dbch\af31505\loch\f31506 con\hich\af31506\dbch\af31505\loch\f31506 st needle = 5;
\par \hich\af31506\dbch\af31505\loch\f31506 const numbers = [1, 10, 7, 2, 4, 9];
\par \hich\af31506\dbch\af31505\loch\f31506 numbers.sort((a, b) => \{
\par \hich\af31506\dbch\af31505\loch\f31506     return Math.abs(needle - a) - Math.abs(needle - b);
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(numbers[0]);
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 code 66: To find the second largest number
\par \hich\af31506\dbch\af31505\loch\f31506 function secondLargestNum(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   re\hich\af31506\dbch\af31505\loch\f31506 turn arr.sort((a, b)=> b - a )[1]
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(secondLargestNum(['1', '2', '3', '4', '9']))
\par \hich\af31506\dbch\af31505\loch\f31506 ===================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =============

\par \hich\af31506\dbch\af31505\loch\f31506 code 67: To check whether particular word/number present in sentence or not using inbuilt function
\par \hich\af31506\dbch\af31505\loch\f31506 function wordInSentence(str)\{
\par \hich\af31506\dbch\af31505\loch\f31506   return str.includes("world"); //true
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(wordInSentence("Hello world, welcome to the universe."))
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 var nums =[0,1,3,5,6,7,8,9,7]
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(nums.includes(9)) //true
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 var item=3
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(nums.some(x => x === item)) //true
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ================================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 68: To check whether particular word/number present in sentence or not using custom function
\par \hich\af31506\dbch\af31505\loch\f31506 function checkValueExist(arr, item)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var status = "Not Exist"
\par \hich\af31506\dbch\af31505\loch\f31506   for(var i=0; i<arr.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(arr\hich\af31506\dbch\af31505\loch\f31506 [i]===item)\{
\par \hich\af31506\dbch\af31505\loch\f31506       status = "Exist"
\par \hich\af31506\dbch\af31505\loch\f31506       break;
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return status
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(checkValueExist(['priya', 'riya', 'supriya'], 'priya'))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 code 69: To check wheather property exist or not in object
\par \hich\af31506\dbch\af31505\loch\f31506 let student =\{
\par \hich\af31506\dbch\af31505\loch\f31506   nam\hich\af31506\dbch\af31505\loch\f31506 e : "priya",
\par \hich\af31506\dbch\af31505\loch\f31506   age: 20
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log('name' in student)
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(student.hasOwnProperty('name'))
\par \hich\af31506\dbch\af31505\loch\f31506 =========================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =======================

\par \hich\af31506\dbch\af31505\loch\f31506 code 70: To dlete the property of an object
\par \hich\af31506\dbch\af31505\loch\f31506 let student =\{
\par \hich\af31506\dbch\af31505\loch\f31506   name : "priya",
\par \hich\af31506\dbch\af31505\loch\f31506   age: 20,
\par \hich\af31506\dbch\af31505\loch\f31506   city: "pune"
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 delete student.age;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(student)
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 delete student['name']
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(student)
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================\hich\af31506\dbch\af31505\loch\f31506 =========================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 71: To find the length of the array in custom way
\par \hich\af31506\dbch\af31505\loch\f31506 function findLength(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var len =0;
\par \hich\af31506\dbch\af31505\loch\f31506   while(arr[len]!==undefined)\{
\par \hich\af31506\dbch\af31505\loch\f31506     len++
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return len;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(findLength([50,60,70,80,90]))
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 function findLength(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   return arr.length;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(findLength([50,60,70,80,90]))
\par \hich\af31506\dbch\af31505\loch\f31506 ===========================================================\hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 72: Star Pattern
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=1; i<=5;i++)\{ //use to create new row
\par \hich\af31506\dbch\af31505\loch\f31506   for(var j=i; j<=5; j++)\{ //use to add in existing row
\par \hich\af31506\dbch\af31505\loch\f31506     document\hich\af31506\dbch\af31505\loch\f31506 .write("*")
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   document.write("<br/>")
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 *****
\par \hich\af31506\dbch\af31505\loch\f31506 ****
\par \hich\af31506\dbch\af31505\loch\f31506 ***
\par \hich\af31506\dbch\af31505\loch\f31506 **
\par \hich\af31506\dbch\af31505\loch\f31506 *
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 code 73: Star P\hich\af31506\dbch\af31505\loch\f31506 attern
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=1; i<=5;i++)\{ //use to create new row
\par \hich\af31506\dbch\af31505\loch\f31506   for(var j=1; j<=5; j++)\{ //use to add in existing row
\par \hich\af31506\dbch\af31505\loch\f31506     document.write("*")
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   document.write("<br/>")
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 *****
\par \hich\af31506\dbch\af31505\loch\f31506 *****
\par \hich\af31506\dbch\af31505\loch\f31506 *****
\par \hich\af31506\dbch\af31505\loch\f31506 *****
\par \hich\af31506\dbch\af31505\loch\f31506 *****
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 code 74: Star Pattern
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=1; i<=5;i++)\{ //use to create new row
\par \hich\af31506\dbch\af31505\loch\f31506   for(var\hich\af31506\dbch\af31505\loch\f31506  j=i; j<=5; j++)\{ //use to add in existing row
\par \hich\af31506\dbch\af31505\loch\f31506     document.write(i)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   document.write("<br/>")
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 11111
\par \hich\af31506\dbch\af31505\loch\f31506 2222
\par \hich\af31506\dbch\af31505\loch\f31506 333
\par \hich\af31506\dbch\af31505\loch\f31506 44
\par \hich\af31506\dbch\af31505\loch\f31506 5
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =========================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 75: Star Pattern
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=1; i<=5;i++)\{ //use to create new row
\par \hich\af31506\dbch\af31505\loch\f31506   for(var j=i; j<=5; j++)\{ //use to add in existing row
\par \hich\af31506\dbch\af31505\loch\f31506     document.write(j)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   document.write("<br/>")
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 12345
\par \hich\af31506\dbch\af31505\loch\f31506 2345
\par \hich\af31506\dbch\af31505\loch\f31506 345
\par \hich\af31506\dbch\af31505\loch\f31506 45
\par \hich\af31506\dbch\af31505\loch\f31506 5
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 code 76: Star Pattern
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=1; i<=5;i++)\{ //use to create new row
\par \hich\af31506\dbch\af31505\loch\f31506   for(var\hich\af31506\dbch\af31505\loch\f31506  j=1; j<=i; j++)\{ //use to add in existing row
\par \hich\af31506\dbch\af31505\loch\f31506     document.write("*")
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   document.write("<br/>")
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 *
\par \hich\af31506\dbch\af31505\loch\f31506 **
\par \hich\af31506\dbch\af31505\loch\f31506 ***
\par \hich\af31506\dbch\af31505\loch\f31506 ****
\par \hich\af31506\dbch\af31505\loch\f31506 *****
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 77: To find the square root
\par \hich\af31506\dbch\af31505\loch\f31506 var num = [4, 9, 16, 25, 36]
\par \hich\af31506\dbch\af31505\loch\f31506 var result = num.map(Math.sqrt)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(result) //[2,3,4,5,6]
\par \hich\af31506\dbch\af31505\loch\f31506 ====================================================================================\hich\af31506\dbch\af31505\loch\f31506 ============================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 code 78: Make alternate character to upper case
\par \hich\af31506\dbch\af31505\loch\f31506 function alternateText(str)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var char = str.toLowerCase().split('')
\par \hich\af31506\dbch\af31505\loch\f31506       for(var i=0; i <char.length; i=i+2)\{
\par \hich\af31506\dbch\af31505\loch\f31506          char[i]=char[i].toUpperCase()
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506   return char.join('')
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(alternateText("Priya Bagde")) //"PrIyA BaGdE"
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 let alt = "Priya Bagde"
\par \hich\af31506\dbch\af31505\loch\f31506 alt = alt.split("")
\par \hich\af31506\dbch\af31505\loch\f31506   .map((letter,index)=>(index%2)==0 \hich\af31506\dbch\af31505\loch\f31506 ? letter.toUpperCase(): letter.toLowerCase())
\par \hich\af31506\dbch\af31505\loch\f31506   .join("")
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(alt) //"PrIyA BaGdE"
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========

\par \hich\af31506\dbch\af31505\loch\f31506 code 79:  To find the negative values in an array or 2D Array
\par \hich\af31506\dbch\af31505\loch\f31506 function countNegative(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let count = 0;
\par \hich\af31506\dbch\af31505\loch\f31506   for(let i=0;i<arr.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     for(let j=0; j<arr[i].length; j++)\{
\par \hich\af31506\dbch\af31505\loch\f31506       if(arr[i][j]<0)\{
\par \hich\af31506\dbch\af31505\loch\f31506         count++
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   ret\hich\af31506\dbch\af31505\loch\f31506 urn count;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(countNegative([[1,-1],[-1,-1]]))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 code 80: Find first r\hich\af31506\dbch\af31505\loch\f31506 epeating character with its index from an array
\par \hich\af31506\dbch\af31505\loch\f31506 function firstRepeatingIndex(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let count = \{\};
\par \hich\af31506\dbch\af31505\loch\f31506   for(let i=0;i<arr.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506       if(count[arr[i]])
\par \hich\af31506\dbch\af31505\loch\f31506       \{
\par \hich\af31506\dbch\af31505\loch\f31506         console.log("character", arr[i])
\par \hich\af31506\dbch\af31505\loch\f31506         console.log("index", count[arr[i]])
\par \hich\af31506\dbch\af31505\loch\f31506         return count[arr[i]] //if exist
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506       else
\par \hich\af31506\dbch\af31505\loch\f31506       \{
\par \hich\af31506\dbch\af31505\loch\f31506         count[arr[i]]=i //if not exist keep at count
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506       console.log("count", count) 
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   return count   
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 firstRepeatingIndex([1,\hich\af31506\dbch\af31505\loch\f31506 0,2,3,4,4,5,7,7])
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 code 81: To find all the subsets of the set
\par \hich\af31506\dbch\af31505\loch\f31506 function generat\hich\af31506\dbch\af31505\loch\f31506 eSubsets (arr) \{ //[1,2]
\par \hich\af31506\dbch\af31505\loch\f31506   let subsets = [];
\par \hich\af31506\dbch\af31505\loch\f31506   for (const item of arr) 
\par \hich\af31506\dbch\af31505\loch\f31506   \{
\par \hich\af31506\dbch\af31505\loch\f31506     const tempSubsets = [...subsets];
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("tempSubsets",tempSubsets) //[]//[[1]]
\par \hich\af31506\dbch\af31505\loch\f31506     for (const currSubset of tempSubsets) 
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506       subsets.push([...currSubset, item]);
\par \hich\af31506\dbch\af31505\loch\f31506       console.log("subsets",subsets) //not came//[[1], [1,2]]
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     subsets.push([item]);
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("subsets1",subsets) //[[1]]//[[1], [1,2],[2]]
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   subsets.push([]);
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("subsets2",subsets)\hich\af31506\dbch\af31505\loch\f31506  //[[1], [1, 2], [2], []]
\par \hich\af31506\dbch\af31505\loch\f31506   return subsets;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 generateSubsets([1, 2]);
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 function generateSubsets (arr) \{
\par \hich\af31506\dbch\af31505\loch\f31506   let subsets = [];
\par \hich\af31506\dbch\af31505\loch\f31506   for (const item of arr) //[1,2] 
\par \hich\af31506\dbch\af31505\loch\f31506   \{
\par \hich\af31506\dbch\af31505\loch\f31506     const tempSubsets = [...subsets];//[]//[[1]]
\par \hich\af31506\dbch\af31505\loch\f31506     for (const currSubset of tempSubsets)\hich\af31506\dbch\af31505\loch\f31506  
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506       subsets.push([...currSubset, item]);//not came//[[1], [1,2]]
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     subsets.push([item]); //[[1]]//[[1], [1,2],[2]]
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   subsets.push([]);//[[1], [1, 2], [2], []]
\par \hich\af31506\dbch\af31505\loch\f31506   return subsets;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 generateSubsets([1, 2]);
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 function findAllSubsetsoOfG\hich\af31506\dbch\af31505\loch\f31506 ivenSet(arr) 
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506    var result= arr.reduce((subsets, value) => subsets.concat(subsets.map(set => [value,...set])),
\par \hich\af31506\dbch\af31505\loch\f31506                           [[]]) //[[]] is used to pass initial value
\par \hich\af31506\dbch\af31505\loch\f31506   return result
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(findAllSubsetsoOfGivenSet([8,9]));
\par --------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function findAllSubsets(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var result = []
\par \hich\af31506\dbch\af31505\loch\f31506   for(var item of arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506     let tempSub = [...result]
\par \hich\af31506\dbch\af31505\loch\f31506     for(var curr of tempSub)\{
\par \hich\af31506\dbch\af31505\loch\f31506       result.push([.\hich\af31506\dbch\af31505\loch\f31506 ..curr, item])
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     result.push([item])
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   result.push([])
\par \hich\af31506\dbch\af31505\loch\f31506   return result
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(findAllSubsets([1,2]))
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =========================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 82: To find the maximum repetation of the character in a string  
\par \hich\af31506\dbch\af31505\loch\f31506  function maxRepeating(str)
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         let count = 0;
\par \hich\af31506\dbch\af31505\loch\f31506         let character = str[0];
\par \hich\af31506\dbch\af31505\loch\f31506         for (let i=0; i<str.length; i++)
\par \hich\af31506\dbch\af31505\loch\f31506         \{
\par \hich\af31506\dbch\af31505\loch\f31506             let tempCount = 1;
\par \hich\af31506\dbch\af31505\loch\f31506             for (let j=i+1; j<str.length; j++)
\par \hich\af31506\dbch\af31505\loch\f31506             \{
\par \hich\af31506\dbch\af31505\loch\f31506                 if (str[i] == str[j]) //if a is equal to a
\par \hich\af31506\dbch\af31505\loch\f31506                 tempCount++; //use to find out the counts of character i.e a
\par \hich\af31506\dbch\af31505\loch\f31506             \}
\par \hich\af31506\dbch\af31505\loch\f31506             if\hich\af31506\dbch\af31505\loch\f31506  (tempCount > count)
\par \hich\af31506\dbch\af31505\loch\f31506             \{
\par \hich\af31506\dbch\af31505\loch\f31506                 count = tempCount;
\par \hich\af31506\dbch\af31505\loch\f31506                 character = str[i];
\par \hich\af31506\dbch\af31505\loch\f31506             \}
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506         console.log(count, character)
\par \hich\af31506\dbch\af31505\loch\f31506         return character;
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506 maxRepeating("aaaabbaaccccccccccccccccccde");
\par \hich\af31506\dbch\af31505\loch\f31506 ==========\hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 83: To find all the missing numbers from an array
\par \hich\af31506\dbch\af31505\loch\f31506 function MissingElements(arr)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506   \hich\af31506\dbch\af31505\loch\f31506   for(let i = 0; i < arr.length; i++)
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         if (arr[i] - i != arr[0]) //1-0==1 //2-1==1 //6-2!=1 //checking for consecutive numbers
\par \hich\af31506\dbch\af31505\loch\f31506         \{
\par \hich\af31506\dbch\af31505\loch\f31506             while (arr[0] < arr[i] - i)//1<4 //2<4 //3<4 //finding missing numbers
\par \hich\af31506\dbch\af31505\loch\f31506             \{
\par \hich\af31506\dbch\af31505\loch\f31506          \hich\af31506\dbch\af31505\loch\f31506        console.log(i + arr[0]);//2+1 //3+1 //3+1
\par \hich\af31506\dbch\af31505\loch\f31506                 arr[0]++; //2 //3 //4
\par \hich\af31506\dbch\af31505\loch\f31506             \}
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 MissingElements([1,2,6]); //3,4,5
\par ---------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function MissingElements(arr)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506     for(let i = 0; i < arr.length; i++)
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         if (arr[0] != arr[i] - i) 
\par \hich\af31506\dbch\af31505\loch\f31506         \{
\par \hich\af31506\dbch\af31505\loch\f31506             while (arr[0] < arr[i] - i)
\par \hich\af31506\dbch\af31505\loch\f31506             \{
\par \hich\af31506\dbch\af31505\loch\f31506                 console.log(arr[0]+i);
\par \hich\af31506\dbch\af31505\loch\f31506                 arr[0]++; 
\par \hich\af31506\dbch\af31505\loch\f31506             \}
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 MissingElements([1,2,6])
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 84: Adding an elements to the \hich\af31506\dbch\af31505\loch\f31506 array when elements are consecutive numbers
\par \hich\af31506\dbch\af31505\loch\f31506 const as = [1,2,3,4];
\par \hich\af31506\dbch\af31505\loch\f31506 for (let index = 5; index <= 10; ++index) \{
\par \hich\af31506\dbch\af31505\loch\f31506     as.push(index);
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(as); //[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
\par \hich\af31506\dbch\af31505\loch\f31506 =========================================================================\hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 85: Create a new array by adding one to each elements of the existing array
\par \hich\af31506\dbch\af31505\loch\f31506 function plusOne(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   var output=[]
\par \hich\af31506\dbch\af31505\loch\f31506     for (let i = 0; i < arr.length; ++i) \{
\par \hich\af31506\dbch\af31505\loch\f31506         output.push(arr[i]+1);
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   return output
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(plusOne([1,2,3,4]));
\par \hich\af31506\dbch\af31505\loch\f31506 =============================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 86: To find kth smallest or largest element in an array
\par \hich\af31506\dbch\af31505\loch\f31506 function findKthSmallestOrLargest(arr, num) \{
\par \hich\af31506\dbch\af31505\loch\f31506   arr.sort(function(a, b) \{ return a - b\});
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(arr)
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("kth smallest", arr[\hich\af31506\dbch\af31505\loch\f31506 num- 1]) //kth smallest
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("kth largest", arr[arr.length-num]) //kth smallest
\par 
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(findKthSmallestOrLargest([2,1,4,3,6,5,7], 3)); //kth is 3rd //3,5
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================\hich\af31506\dbch\af31505\loch\f31506 
===============================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 87: sort by frequency of the letters
\par \hich\af31506\dbch\af31505\loch\f31506 function frequencySort(str) \{
\par \hich\af31506\dbch\af31505\loch\f31506    let map = \{\}
\par \hich\af31506\dbch\af31505\loch\f31506    for (const letter of str) \{
\par \hich\af31506\dbch\af31505\loch\f31506       map[letter] = (map[letter] || 0) + \hich\af31506\dbch\af31505\loch\f31506 1; //to count the occurance
\par \hich\af31506\dbch\af31505\loch\f31506      \};
\par \hich\af31506\dbch\af31505\loch\f31506      console.log(map) //\{a: 2,A: 2,b: 3,B: 3,c: 1,C: 1\}
\par \hich\af31506\dbch\af31505\loch\f31506    let res = "";
\par \hich\af31506\dbch\af31505\loch\f31506    let sorted = Object.keys(map).sort((a, b) => map[b] - map[a])
\par \hich\af31506\dbch\af31505\loch\f31506    console.log("sorted", sorted)// ["b", "B", "a", "A", "c", "C"]
\par \hich\af31506\dbch\af31505\loch\f31506    for (let letter of sorted) \{
\par \hich\af31506\dbch\af31505\loch\f31506       for (let count = 0; count < map[letter]; count++) \{
\par \hich\af31506\dbch\af31505\loch\f31506          res += letter
\par \hich\af31506\dbch\af31505\loch\f31506          console.log(res)
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    return res;
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(frequencySort("cCaaAAbbbBBB")); //"bbbBBBaaAAcC"
\par -------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function frequencySort(str) \{
\par \hich\af31506\dbch\af31505\loch\f31506  let map = \{\}, res = "", sortedArr;
\par \hich\af31506\dbch\af31505\loch\f31506  for (const letter of str)map[letter]=(map[letter] || 0) + 1; 
\par \hich\af31506\dbch\af31505\loch\f31506  sortedArr = Object.keys(map).sort((a, b) => map[b] - map[a]);
\par \hich\af31506\dbch\af31505\loch\f31506  for (let letter of s\hich\af31506\dbch\af31505\loch\f31506 ortedArr) \{
\par \hich\af31506\dbch\af31505\loch\f31506       for (let count = 0; count < map[letter]; count++) \{
\par \hich\af31506\dbch\af31505\loch\f31506          res += letter
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506  \}
\par \hich\af31506\dbch\af31505\loch\f31506  return res;
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(frequencySort("cCaaAAbbbBBB"));
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================================================================\hich\af31506\dbch\af31505\loch\f31506 ====================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 88: To find the OCCURANCE of the character
\par \hich\af31506\dbch\af31505\loch\f31506 function frequencySort(str) \{
\par \hich\af31506\dbch\af31505\loch\f31506    let map = \{\}
\par \hich\af31506\dbch\af31505\loch\f31506    for (var i=0; i<str.length; i++) 
\par \hich\af31506\dbch\af31505\loch\f31506    \{
\par \hich\af31506\dbch\af31505\loch\f31506      map[str[i]] = map[str[i]] ? ma\hich\af31506\dbch\af31505\loch\f31506 p[str[i]]+1 : 1;  //Adding an element to the object, if already present then incrementing by 1
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    console.log(map)////\{"c":1, "C:1", "a":2, "A":2, "b":3, "B":3\}
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 frequencySort("cCaaAAbbbBBB"); 
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 function frequencySortArr(arr) \{
\par \hich\af31506\dbch\af31505\loch\f31506    let map = \{\}
\par \hich\af31506\dbch\af31505\loch\f31506    arr.forEach((element)=>\{map[element] = map[element]+1 || 1 \}) // will get occurance of the number
\par \hich\af31506\dbch\af31505\loch\f31506       return [...arr].sort((a,b)=> map[b]-map[a])
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(frequencySortArr([2,5,67,89,2,3,4,4,4]));\hich\af31506\dbch\af31505\loch\f31506   //[4,4,4,2,2,5,67,89,3]
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 89: Permutation // Need to debug
\par \hich\af31506\dbch\af31505\loch\f31506 let perm= (str,\hich\af31506\dbch\af31505\loch\f31506  result)=> \{
\par \hich\af31506\dbch\af31505\loch\f31506   if(str.length==0)\{console.log("result", result)\} //let //lte //elt //etl //tle //tel
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506   for(var i=0; i<str.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     let rest= str.substring(0,i)+ str.substring(i+1) 
\par \hich\af31506\dbch\af31505\loch\f31506    // console.log("rest", rest) //et//t//"" //e//"" //lt//t//"" \hich\af31506\dbch\af31505\loch\f31506 //l//"" //le//e//"" //l//""
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("finalresult",result+str[i])  //l//le//let  //lt//lte  //e//el//elt  //et//etl  //t//tl//tle  //te//tel 
\par \hich\af31506\dbch\af31505\loch\f31506     perm(rest, result+str[i]) 
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 perm('let',''); 
\par \hich\af31506\dbch\af31505\loch\f31506 //"result" "let"
\par \hich\af31506\dbch\af31505\loch\f31506 //"result" "lte"
\par \hich\af31506\dbch\af31505\loch\f31506 //"result" "elt"
\par \hich\af31506\dbch\af31505\loch\f31506 //\hich\af31506\dbch\af31505\loch\f31506 "result" "etl"
\par \hich\af31506\dbch\af31505\loch\f31506 //"result" "tle"
\par \hich\af31506\dbch\af31505\loch\f31506 //"result" "tel"
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 90: To find the power of x
\par \hich\af31506\dbch\af31505\loch\f31506    var r = 1, i = 1;
\par \hich\af31506\dbch\af31505\loch\f31506     var b = 2;e =3 ;
\par \hich\af31506\dbch\af31505\loch\f31506     w\hich\af31506\dbch\af31505\loch\f31506 hile(i <= e) //1<3//2<3//3=3
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         r *= b; //1*2//2*2//4*2
\par \hich\af31506\dbch\af31505\loch\f31506         i++;
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(r) //8
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 let number = 2;
\par \hich\af31506\dbch\af31505\loch\f31506 let exponent = 3;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log( number ** exponent);
\par \hich\af31506\dbch\af31505\loch\f31506 console.log( Math.pow(number, exponent));
\par \hich\af31506\dbch\af31505\loch\f31506 ======================================\hich\af31506\dbch\af31505\loch\f31506 ==========================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 91: To find even and odd number by user input
\par \hich\af31506\dbch\af31505\loch\f31506 const number = prompt("Enter a number: ");
\par \hich\af31506\dbch\af31505\loch\f31506 if(number % 2 == 0) \{
\par \hich\af31506\dbch\af31505\loch\f31506  \hich\af31506\dbch\af31505\loch\f31506    console.log("The number is even.");
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 else \{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("The number is odd.");
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =========

\par \hich\af31506\dbch\af31505\loch\f31506 Code 92: Grouping of an Anagram
\par \hich\af31506\dbch\af31505\loch\f31506 let collectAnagrams = (words) => \{
\par \hich\af31506\dbch\af31505\loch\f31506     let anagrams = \{\}
\par \hich\af31506\dbch\af31505\loch\f31506     let collectedAnagrams = []
\par \hich\af31506\dbch\af31505\loch\f31506     for (let word of words)
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         let sortedWord = word.split('').sort().join('') //arrange ervery word in alphabetical order
\par \hich\af31506\dbch\af31505\loch\f31506         anagrams[sortedWord] = anagrams[sortedWord]  || [] //console.log(".",anagrams) //creating keys 
\par \hich\af31506\dbch\af31505\loch\f31506         anagrams[sortedWord].push(word) // assigning\hich\af31506\dbch\af31505\loch\f31506  exact values to keys //console.log("..", anagrams) 
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(anagrams)
\par \hich\af31506\dbch\af31505\loch\f31506     for (let item in anagrams)
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         collectedAnagrams.push(anagrams[item])  // add their values as subarrays of the collectedAnagrams array
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     return colle\hich\af31506\dbch\af31505\loch\f31506 ctedAnagrams
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(collectAnagrams(['bag', 'gab', 'foo', 'abg', 'oof', 'ofo'])) //[["bag", "gab", "abg"], ["foo", "oof", "ofo"]]
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =========================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 93: Sort an array of an element by parity means even then odd elements
\par \hich\af31506\dbch\af31505\loch\f31506 function sortByParity(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506  let even =[]
\par \hich\af31506\dbch\af31505\loch\f31506  let odd =[]
\par \hich\af31506\dbch\af31505\loch\f31506  let result=[]
\par \hich\af31506\dbch\af31505\loch\f31506  for(let i=0; i<arr.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506    if(arr[i]%2 ===\hich\af31506\dbch\af31505\loch\f31506 0 ) even.push(arr[i]) 
\par \hich\af31506\dbch\af31505\loch\f31506    else odd.push(arr[i])
\par \hich\af31506\dbch\af31505\loch\f31506  \}
\par \hich\af31506\dbch\af31505\loch\f31506 result = even.concat(odd)
\par \hich\af31506\dbch\af31505\loch\f31506 return result
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sortByParity([1,2,3,4,5,6,7,8,9]))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 94: Move all the zeroes at the end of an elements
\par \hich\af31506\dbch\af31505\loch\f31506 var array = [1,0,2,0,0,9\hich\af31506\dbch\af31505\loch\f31506 ,0,6,7];
\par \hich\af31506\dbch\af31505\loch\f31506 array.sort(function(a, b) \{
\par \hich\af31506\dbch\af31505\loch\f31506         if(a==0 && b!=0)
\par \hich\af31506\dbch\af31505\loch\f31506             return 1;
\par \hich\af31506\dbch\af31505\loch\f31506         else if (a!=0 && b==0)
\par \hich\af31506\dbch\af31505\loch\f31506             return -1;
\par \hich\af31506\dbch\af31505\loch\f31506         else 
\par \hich\af31506\dbch\af31505\loch\f31506             return 0;
\par \hich\af31506\dbch\af31505\loch\f31506     \});
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(array)
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 var moveZeroes = function(arr) \{
\par \hich\af31506\dbch\af31505\loch\f31506     for ( var i = 0\hich\af31506\dbch\af31505\loch\f31506 ; i < arr.length-1; i++)
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         if(arr[i] === 0) \{ //if place x here then move x last to the array
\par \hich\af31506\dbch\af31505\loch\f31506           var  temp = arr.splice(i, 1);
\par \hich\af31506\dbch\af31505\loch\f31506           console.log(temp[0])
\par \hich\af31506\dbch\af31505\loch\f31506             arr.push(temp[0]);
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     return arr; 
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(\hich\af31506\dbch\af31505\loch\f31506 moveZeroes([1,0,4,8,6,0,8,3,39,0])) //[1,4,8,6,8,3,39,0,0,0]
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 var moveZeroes = function(arr) \{
\par \hich\af31506\dbch\af31505\loch\f31506     for ( var i = 0; i < arr.length-1; i++)
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         if(arr[i] === 0) \{
\par \hich\af31506\dbch\af31505\loch\f31506             arr.splice(i, 1);
\par \hich\af31506\dbch\af31505\loch\f31506             arr.push(0);
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     return arr; 
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(moveZeroes([1,0,4,8,6,0,8,3,39,0]))
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 95: Pr\hich\af31506\dbch\af31505\loch\f31506 int consecutive numbers
\par \hich\af31506\dbch\af31505\loch\f31506 function range(num) 
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506     var result =[]
\par \hich\af31506\dbch\af31505\loch\f31506     for(var i =0; i<num; i++)
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506     result.push(i) 
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     return result
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(range(10)); //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
\par \hich\af31506\dbch\af31505\loch\f31506 ==================================================\hich\af31506\dbch\af31505\loch\f31506 ==============================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 96: 4 Ways to empty an array
\par \hich\af31506\dbch\af31505\loch\f31506 var arrayList =  ['a', 'b', 'c', 'd', 'e', 'f'];
\par \hich\af31506\dbch\af31505\loch\f31506 console.log("1", arrayList = [])
\par \hich\af31506\dbch\af31505\loch\f31506 console.log("\hich\af31506\dbch\af31505\loch\f31506 2", arrayList.length = 0)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log("3", arrayList.splice(0, arrayList.length))
\par \hich\af31506\dbch\af31505\loch\f31506 var result= function()\{while(arrayList.length) \{
\par \hich\af31506\dbch\af31505\loch\f31506   arrayList.pop();
\par \}\}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log("4", arrayList)
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 97: Create a function to calculate the sum of all the numbers in a jagged \hich\af31506\dbch\af31505\loch\f31506 array
\par \hich\af31506\dbch\af31505\loch\f31506 function sumArray(ar)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506     var sum = 0;
\par \hich\af31506\dbch\af31505\loch\f31506     for(var el of ar)
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506         if (Array.isArray(el))
\par \hich\af31506\dbch\af31505\loch\f31506         \{
\par \hich\af31506\dbch\af31505\loch\f31506             el = sumArray(el); //recursion
\par \hich\af31506\dbch\af31505\loch\f31506         \}   
\par \hich\af31506\dbch\af31505\loch\f31506         sum += el;
\par \hich\af31506\dbch\af31505\loch\f31506     \}   
\par \hich\af31506\dbch\af31505\loch\f31506     return sum;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sumArray([1, 2, [3, [4], [\hich\af31506\dbch\af31505\loch\f31506 5, 6]], [7]])) //28
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 98: To check weather perfect number or not
\par \hich\af31506\dbch\af31505\loch\f31506 function is\hich\af31506\dbch\af31505\loch\f31506 _perfect(number)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506      var temp = 0;
\par \hich\af31506\dbch\af31505\loch\f31506      for(var i=1;i<=number/2;i++)
\par \hich\af31506\dbch\af31505\loch\f31506      \{
\par \hich\af31506\dbch\af31505\loch\f31506          if(number%i === 0)
\par \hich\af31506\dbch\af31505\loch\f31506           \{
\par \hich\af31506\dbch\af31505\loch\f31506             console.log(i) //1,2,4,7,14
\par \hich\af31506\dbch\af31505\loch\f31506             temp += i;
\par \hich\af31506\dbch\af31505\loch\f31506           \}
\par \hich\af31506\dbch\af31505\loch\f31506      \}
\par \hich\af31506\dbch\af31505\loch\f31506      if(temp === number && temp !== 0)
\par \hich\af31506\dbch\af31505\loch\f31506         \{
\par \hich\af31506\dbch\af31505\loch\f31506        console.log("It is a perfect number.");
\par \hich\af31506\dbch\af31505\loch\f31506         \} 
\par \hich\af31506\dbch\af31505\loch\f31506      else
\par \hich\af31506\dbch\af31505\loch\f31506         \{
\par \hich\af31506\dbch\af31505\loch\f31506        console.log("It is not a perfect number.");
\par \hich\af31506\dbch\af31505\loch\f31506         \}   
\par \hich\af31506\dbch\af31505\loch\f31506  \} 
\par \hich\af31506\dbch\af31505\loch\f31506 is_perfect(28); 
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================\hich\af31506\dbch\af31505\loch\f31506 ====================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 99: Number of days between 2 dates calculation
\par \hich\af31506\dbch\af31505\loch\f31506 date1 = "2020-01-01", date2 = "2020-01-30"
\par \hich\af31506\dbch\af31505\loch\f31506 function daysBetweenDates (d\hich\af31506\dbch\af31505\loch\f31506 ate1, date2) \{
\par \hich\af31506\dbch\af31505\loch\f31506   const days = (new Date(date2) - new Date(date1)) / (1000 * 60 * 60 * 24)
\par \hich\af31506\dbch\af31505\loch\f31506   return days
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(daysBetweenDates(date1,date2))
\par \hich\af31506\dbch\af31505\loch\f31506 ===========================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =====================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 100: To find todays date
\par \hich\af31506\dbch\af31505\loch\f31506 var today = new Date();
\par \hich\af31506\dbch\af31505\loch\f31506 var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(date)
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code 100: String Compression (Microsoft, Amazon etc)
\par \hich\af31506\dbch\af31505\loch\f31506 function stringCompression (str) \{
\par \hich\af31506\dbch\af31505\loch\f31506   if (str.length ==0) \{
\par \hich\af31506\dbch\af31505\loch\f31506     \hich\af31506\dbch\af31505\loch\f31506 console.log('Please enter valid string.');
\par \hich\af31506\dbch\af31505\loch\f31506     return;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   var output = '';
\par \hich\af31506\dbch\af31505\loch\f31506   var count = 0; 
\par \hich\af31506\dbch\af31505\loch\f31506   for (var i = 0; i < str.length; i++) 
\par \hich\af31506\dbch\af31505\loch\f31506   \{
\par \hich\af31506\dbch\af31505\loch\f31506     count++;
\par \hich\af31506\dbch\af31505\loch\f31506     if (str[i] != str[i+1]) //if a is not equal to b
\par \hich\af31506\dbch\af31505\loch\f31506     \{
\par \hich\af31506\dbch\af31505\loch\f31506       output += str[i] + count; //a+4
\par \hich\af31506\dbch\af31505\loch\f31506       count = 0; //for b it will start from zero
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(output);
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 stringCompression(''); //Please enter valid string.
\par \hich\af31506\dbch\af31505\loch\f31506 stringCompression('aaaa\hich\af31506\dbch\af31505\loch\f31506 '); //a4
\par \hich\af31506\dbch\af31505\loch\f31506 stringCompression('aaaabbc'); //a4b2c1
\par \hich\af31506\dbch\af31505\loch\f31506 stringCompression('aaaabbcaabb'); //a4b2c1a2b2
\par ---------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function stringCompression (str) \{
\par \hich\af31506\dbch\af31505\loch\f31506   var output = '';
\par \hich\af31506\dbch\af31505\loch\f31506   var count = 0; 
\par \hich\af31506\dbch\af31505\loch\f31506   for (var i = 0; i < str\hich\af31506\dbch\af31505\loch\f31506 .length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     count++;
\par \hich\af31506\dbch\af31505\loch\f31506     if (str[i] != str[i+1]) \{
\par \hich\af31506\dbch\af31505\loch\f31506       output += str[i] + count; 
\par \hich\af31506\dbch\af31505\loch\f31506       count = 0; 
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(output);
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 stringCompression('aaaab');
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code 102: Given the roots of two binary trees root and subRoot, return true if \hich\af31506\dbch\af31505\loch\f31506 there is a subtree of root with the same structure and node values of subRoot and false otherwise.

\par \hich\af31506\dbch\af31505\loch\f31506 A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a sub\hich\af31506\dbch\af31505\loch\f31506 tree of itself.

\par \hich\af31506\dbch\af31505\loch\f31506 Given tree s:
\par \hich\af31506\dbch\af31505\loch\f31506      3
\par \hich\af31506\dbch\af31505\loch\f31506     / \\
\par \hich\af31506\dbch\af31505\loch\f31506    4   5
\par \hich\af31506\dbch\af31505\loch\f31506   / \\
\par \hich\af31506\dbch\af31505\loch\f31506  1   2
\par \hich\af31506\dbch\af31505\loch\f31506 Given tree t:
\par \hich\af31506\dbch\af31505\loch\f31506    4 
\par \hich\af31506\dbch\af31505\loch\f31506   / \\
\par \hich\af31506\dbch\af31505\loch\f31506  1   2
\par -----------------------
\par \hich\af31506\dbch\af31505\loch\f31506 class Node \{
\par \tab \hich\af31506\dbch\af31505\loch\f31506 constructor(val) \{
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 this.data = val;
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 this.left = null;
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 this.right = null;
\par \tab \}\}
\par \hich\af31506\dbch\af31505\loch\f31506     var root1,root2;
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root1 = new \hich\af31506\dbch\af31505\loch\f31506 Node(26); // TREE 1
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root1.right = new Node(3);
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root1.right.right = new Node(3);
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root1.left = new Node(10);
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root1.left.left = new Node(4);
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root1.left.left.right = new Node(30);
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root1.left.right = new Node(6);
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root2 = new Node(10); \tab \tab // TREE 2
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root2.right = new Node(6);
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root2.left = new Node(4);
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 root2.left.right = new Node(30);
\par \tab \hich\af31506\dbch\af31505\loch\f31506 function areIdentical(root1, root2) //to check for same
\par \tab \{
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 if (root1 == null && root2 == null)
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return true;
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 if (root1 ==\hich\af31506\dbch\af31505\loch\f31506  null || root2 == null)
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return false;
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return (root1.data == root2.data && areIdentical(root1.left, root2.left) && areIdentical(root1.right, root2.right));
\par \tab \}
\par \tab \hich\af31506\dbch\af31505\loch\f31506 function isSubtree(T, S) //main function
\par \tab \{
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 if (S == null)
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return true;
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 if (T == null\hich\af31506\dbch\af31505\loch\f31506 )
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return false;
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 if (areIdentical(T, S))
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return true;
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return isSubtree(T.left, S) || isSubtree(T.right, S);
\par \tab \}
\par \hich\af31506\dbch\af31505\loch\f31506  console.log(isSubtree(root1, root2))
\par \hich\af31506\dbch\af31505\loch\f31506 ==================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ==============================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Find triplets whose sum is zero
\par \hich\af31506\dbch\af31505\loch\f31506 function findTriplets(arr, n) \{
\par \hich\af31506\dbch\af31505\loch\f31506     arr.sort();
\par \hich\af31506\dbch\af31505\loch\f31506     for (var i = 0; i < arr.length; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506         var j = i + 1,
\par \hich\af31506\dbch\af31505\loch\f31506             k = arr.length - 1;
\par \hich\af31506\dbch\af31505\loch\f31506         while (j < k) \{
\par \hich\af31506\dbch\af31505\loch\f31506             if (arr[i] + arr[j] + arr[k] < n) \{
\par \hich\af31506\dbch\af31505\loch\f31506                 j++;
\par \hich\af31506\dbch\af31505\loch\f31506             \} else if (arr[i] + arr[j] + arr[k] > n) \{
\par \hich\af31506\dbch\af31505\loch\f31506                 k--;
\par \hich\af31506\dbch\af31505\loch\f31506             \} else \{
\par \hich\af31506\dbch\af31505\loch\f31506                 console.log(arr[i]\hich\af31506\dbch\af31505\loch\f31506  + "," + arr[j] + "," + arr[k]);
\par \hich\af31506\dbch\af31505\loch\f31506                 j++;
\par \hich\af31506\dbch\af31505\loch\f31506                 k--;
\par \hich\af31506\dbch\af31505\loch\f31506             \}
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     return true;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 var arr = [-1, -4, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
\par \hich\af31506\dbch\af31505\loch\f31506 findTriplets(arr, 0);
\par ------------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function findTriplets(arr, n) \{
\par \hich\af31506\dbch\af31505\loch\f31506  arr.sort((a, b) => a - b);
\par \hich\af31506\dbch\af31505\loch\f31506  for (let i = 0; i < arr.length - 2; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506   for (let j = i + 1; j < arr.length - 1; j++) \{
\par \hich\af31506\dbch\af31505\loch\f31506    for (let k = j + 1; k < arr.length; k++) \{
\par \hich\af31506\dbch\af31505\loch\f31506     if (arr[i] + arr[j] + arr[k] === 0) \{
\par \hich\af31506\dbch\af31505\loch\f31506      console.log(`$\{arr[i]\}, $\{arr[j]\}, $\{arr[k]\}`);
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506  \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 let arr = [1, 2, 5, 3, -2, 0, 1, -1, 5, 6, -2, -1];
\par \hich\af31506\dbch\af31505\loch\f31506 findTriplets(arr, 0);
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Convert Array into object:-
\par \hich\af31506\dbch\af31505\loch\f31506 const arr = ["John", "Peter", "Sally", "Jane"];
\par \hich\af31506\dbch\af31505\loch\f31506 con\hich\af31506\dbch\af31505\loch\f31506 st updatedArr=\{...arr\};
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(updatedArr)//\{0: 'John', 1: 'Peter', 2: 'Sally', 3: 'Jane'\}
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ================

\par \hich\af31506\dbch\af31505\loch\f31506 3 main use-cases of #map( ) function:-
\par \hich\af31506\dbch\af31505\loch\f31506 1 . Used for rendering a list of data to the Dom in React
\par \hich\af31506\dbch\af31505\loch\f31506 2. Used to modify an element in array depending on some requirement, which means calling a function on each item in Array
\par \hich\af31506\dbch\af31505\loch\f31506 3. Used to convert S\hich\af31506\dbch\af31505\loch\f31506 tring to Array
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 103. Find common elements:
\par \hich\af31506\dbch\af31505\loch\f31506 function commonElements(a, b)\{
\par \hich\af31506\dbch\af31505\loch\f31506  retur\hich\af31506\dbch\af31505\loch\f31506 n a.filter((item) => b.includes(item))
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 A = [1.2,3,4,5];
\par \hich\af31506\dbch\af31505\loch\f31506 B = [4, 5, 6, 7, 8];
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(commonElements(A, B)); //[4,5]
\par \hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ==========================================

\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ==================================\hich\af31506\dbch\af31505\loch\f31506 ==============================================================================================================================================

\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 JAVASCRIPTS Inbuilt Functions:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Code : JAVASCRIPT substr concept
\par \hich\af31506\dbch\af31505\loch\f31506 var sentence\hich\af31506\dbch\af31505\loch\f31506  ="I'm priya and having sounds kowledge."
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.substr(0,5)) //(startigIndex, NoOfCharatersWants-->take 1 less)//I'm p
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.substr(2,5)) //m pri
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.substr(2))   //m priya and having sounds kowledge.
\par \hich\af31506\dbch\af31505\loch\f31506 console.\hich\af31506\dbch\af31505\loch\f31506 log(sentence.substr(4))   //priya and having sounds kowledge.
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.substr(-4))  //Negative goes From ending of the string //dge.
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.substr(-5)) //edge.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code : JAVASCRIPT slice concept i.e, it doesn't change the original array
\par \hich\af31506\dbch\af31505\loch\f31506 var sentence ="I'm priya and having sounds kowledge."
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence\hich\af31506\dbch\af31505\loch\f31506 .slice(0,5)) //"I'm p"
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.slice(2,5)) //"m p"
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.slice(2))   //"m priya and having sounds kowledge."
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.slice(4))   //"priya and having sounds kowledge."
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.slice(-4))  //"dge."
\par \hich\af31506\dbch\af31505\loch\f31506 consol\hich\af31506\dbch\af31505\loch\f31506 e.log(sentence.slice(-5))  //"edge."
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var sentence =['a','b','c','d']
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.slice(0,2)) //['a','b']
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence) //['a','b','c','d']
\par \hich\af31506\dbch\af31505\loch\f31506 ===================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =============================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code : JAVASCRIPT splice concept i.e, it changes the original array
\par \hich\af31506\dbch\af31505\loch\f31506 var sentence =['a','b','c','d']
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence.splice(0,2)) //['a','b']
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sentence) //['c','d']
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Code: JAVASCRIPT indexOf concept
\par \hich\af31506\dbch\af31505\loch\f31506  var greeting = "Hello"
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(greeting.indexOf("e")) //1
\par \hich\af31506\dbch\af31505\loch\f31506 ===============================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =================

\par \hich\af31506\dbch\af31505\loch\f31506 Code: JAVASCRIPT split concept
\par \hich\af31506\dbch\af31505\loch\f31506 var name ="Priya Bagde"
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(name.split("")) //["P","r","i","y","a"," ","B","a","g","d","e"]
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(name.split(" ")) //["Priya","Bagde"]
\par \hich\af31506\dbch\af31505\loch\f31506 ==========================================================\hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code: JAVASCRIPT join concept
\par \hich\af31506\dbch\af31505\loch\f31506 var arr = ['a','b','c','d','e']
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(arr.join()) //"a,b,c,d,e"
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Code: JAVASCRIPT join concept
\par \hich\af31506\dbch\af31505\loch\f31506 var arr = ['a','b','c','d','e']
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=0; i<arr.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(arr[i])
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 "a"
\par \hich\af31506\dbch\af31505\loch\f31506 "b"
\par \hich\af31506\dbch\af31505\loch\f31506 "c"
\par \hich\af31506\dbch\af31505\loch\f31506 "d"
\par \hich\af31506\dbch\af31505\loch\f31506 "e"
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Advance Interview Concepts
\par 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 1. Closures- 
\par \hich\af31506\dbch\af31505\loch\f31506 A closure is the combination of a function and the lexical environment within which that function was declared.
\par \hich\af31506\dbch\af31505\loch\f31506 OR
\par \hich\af31506\dbch\af31505\loch\f31506 When inner function can have access to the outer function variables and parameter.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 The return statement does not execute the i\hich\af31506\dbch\af31505\loch\f31506 nner function - function is only executed only when followed by ()parathesis, but rather than returns the entire
\par \hich\af31506\dbch\af31505\loch\f31506 body of the function.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Uses/advantages of closures:
\par \hich\af31506\dbch\af31505\loch\f31506 -event handlers
\par \hich\af31506\dbch\af31505\loch\f31506 -callback functions
\par \hich\af31506\dbch\af31505\loch\f31506 -Encapsulation: can store data in separate store
\par \hich\af31506\dbch\af31505\loch\f31506 -Objec\hich\af31506\dbch\af31505\loch\f31506 t data privacy
\par \hich\af31506\dbch\af31505\loch\f31506 -Module Design Pattern
\par \hich\af31506\dbch\af31505\loch\f31506 -Currying
\par \hich\af31506\dbch\af31505\loch\f31506 -Functions like once
\par \hich\af31506\dbch\af31505\loch\f31506 -memoize
\par \hich\af31506\dbch\af31505\loch\f31506 -setTimeouts
\par \hich\af31506\dbch\af31505\loch\f31506 -Iterators
\par \hich\af31506\dbch\af31505\loch\f31506 -maintaining state in async world
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Disadvantages of closures:
\par \hich\af31506\dbch\af31505\loch\f31506 1. Creating function inside a function leads to duplicate in memory and cause slowing down t\hich\af31506\dbch\af31505\loch\f31506 he application means use only when required privacy.
\par \hich\af31506\dbch\af31505\loch\f31506 2. As long as the clousers are active, the memory can't be garbage collected means if we are using clousers in ten places then untill all the 10 process complete 
\par \hich\af31506\dbch\af31505\loch\f31506 it hold the memory and can overcome to s\hich\af31506\dbch\af31505\loch\f31506 et closure to Null.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const outerFunction =(a)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506   let b=10;
\par \hich\af31506\dbch\af31505\loch\f31506   const innerFunction =()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     let sum = a+b;
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(sum)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   innerFunction()
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 outerFunction(5)// 15
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const outerFunction =(a)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506   let b=10;
\par \hich\af31506\dbch\af31505\loch\f31506   const innerFunction =()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     let sum = a+b;
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(sum)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return innerFunction
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 outerFunction(5) //output : 
\par \hich\af31506\dbch\af31505\loch\f31506  ()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     let sum = a+b;
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(sum)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const outerFunction =(a)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506   let b=10;
\par \hich\af31506\dbch\af31505\loch\f31506   const innerFunction =()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     let \hich\af31506\dbch\af31505\loch\f31506 sum = a+b;
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(sum)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return innerFunction
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 let inner = outerFunction(5)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(inner)
\par \hich\af31506\dbch\af31505\loch\f31506 inner() //15
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Prototype: 
\par \hich\af31506\dbch\af31505\loch\f31506 Prototype allow to easily define methods to all the instances of ob\hich\af31506\dbch\af31505\loch\f31506 ject. It stored in the memory once but every object instances can access it.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 1. Javascript is a prototype based language, so, whenever we are creating a function using javascript, javascript engine adds a prototype property inside a function,
\par \hich\af31506\dbch\af31505\loch\f31506 Prototype pr\hich\af31506\dbch\af31505\loch\f31506 operty is basically an object (also known as Prototype object), where we can attach methods and properties in a prototype object, which enables all the
\par \hich\af31506\dbch\af31505\loch\f31506 other objects to inherit these methods and properties.
\par \hich\af31506\dbch\af31505\loch\f31506 2. We are creating prototype in constructor funct\hich\af31506\dbch\af31505\loch\f31506 ion. All the intances of objects can able to access properties and methods from constuctor function.
\par \hich\af31506\dbch\af31505\loch\f31506 3. The prototype is an object that is associated with every functions and objects by default in JavaScript, where function's prototype property is accessib\hich\af31506\dbch\af31505\loch\f31506 le and 
\par \hich\af31506\dbch\af31505\loch\f31506 modifiable and object's prototype property (aka attribute) is not visible.
\par \hich\af31506\dbch\af31505\loch\f31506 4. object's prototype property is invisible. Use Object.getPrototypeOf(obj) method instead of __proto__ to access prototype object.
\par \hich\af31506\dbch\af31505\loch\f31506 5. prototype is useful in keeping only on\hich\af31506\dbch\af31505\loch\f31506 e copy of functions for all the objects (instances).
\par \hich\af31506\dbch\af31505\loch\f31506 6. An Object has a prototype. A prototype is also an object. Hence Even it may have its own prototype object. This is referred to as prototype chain.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 <A>Several Types:
\par \hich\af31506\dbch\af31505\loch\f31506 1. Object.prototype- It is a proto\hich\af31506\dbch\af31505\loch\f31506 type OBJECT of object(cunstruction function where it will inherit all properties of Object.protorype). 
\par \hich\af31506\dbch\af31505\loch\f31506 Prototype Object of Object.prototype is NULL.
\par \hich\af31506\dbch\af31505\loch\f31506 2. Array.prototype-Prototype Object of Array.prototype is Object.prototype and Prototype Object of Object.\hich\af31506\dbch\af31505\loch\f31506 prototype is NULL.
\par \hich\af31506\dbch\af31505\loch\f31506 3. Function.prototype
\par \hich\af31506\dbch\af31505\loch\f31506 4. Example-
\par \hich\af31506\dbch\af31505\loch\f31506 var person = function(name)\{
\par \hich\af31506\dbch\af31505\loch\f31506    this.name = name;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 person.prototype.age = 21;
\par \hich\af31506\dbch\af31505\loch\f31506 var piya = new person("Piya");
\par \hich\af31506\dbch\af31505\loch\f31506 var priya = new person("Priya");
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(piya.age) //21
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(priya.age) //21
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 <B>Purpose/Use of prototype:
\par \hich\af31506\dbch\af31505\loch\f31506 1) to find properties and methods of an object 
\par \hich\af31506\dbch\af31505\loch\f31506 2) to implement inheritance in JavaScript
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 <C>Difference between Prototype and __proto__:
\par \hich\af31506\dbch\af31505\loch\f31506 1. In reality, the only true difference between prototype an\hich\af31506\dbch\af31505\loch\f31506 d __proto__ is that the former is a property of a class constructor, 
\par \hich\af31506\dbch\af31505\loch\f31506    while the latter is a property of a class instance.
\par \hich\af31506\dbch\af31505\loch\f31506 2. Instances have __proto__, classes have prototype.
\par \hich\af31506\dbch\af31505\loch\f31506 3. Instances of a constructor function use __proto__ to access the prototype p\hich\af31506\dbch\af31505\loch\f31506 roperty of its constructor function.
\par \hich\af31506\dbch\af31505\loch\f31506 4. __proto__ is invisible property of an object. It returns prototype object of a function to which it links to. 
\par \hich\af31506\dbch\af31505\loch\f31506 5. __proto__ is Deprecated. 
\par \hich\af31506\dbch\af31505\loch\f31506 6. Example:
\par \hich\af31506\dbch\af31505\loch\f31506 function Person(name)\{
\par \hich\af31506\dbch\af31505\loch\f31506     this.name = name
\par \hich\af31506\dbch\af31505\loch\f31506  \}; 
\par \hich\af31506\dbch\af31505\loch\f31506 var eve = new P\hich\af31506\dbch\af31505\loch\f31506 erson("Eve"); 
\par \hich\af31506\dbch\af31505\loch\f31506 eve.__proto__ == Person.prototype //true
\par \hich\af31506\dbch\af31505\loch\f31506 eve.prototype  //undefined
\par \hich\af31506\dbch\af31505\loch\f31506 7. Example:
\par \hich\af31506\dbch\af31505\loch\f31506 function Person() \{
\par \hich\af31506\dbch\af31505\loch\f31506     this.name = 'John'
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 // adding property 
\par \hich\af31506\dbch\af31505\loch\f31506 Person.prototype.name = 'Peter';
\par \hich\af31506\dbch\af31505\loch\f31506 Person.prototype.age = 23
\par \hich\af31506\dbch\af31505\loch\f31506 const person1 = new Person();
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(person1.name); // John
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(person1.age); // 23
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ==============================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ==================

\par \hich\af31506\dbch\af31505\loch\f31506 CSS Positions:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 1. Static: HTML elements are positioned static by default. Static positioned elements are not affected by the top, bottom, left, and right properties. 
\par \hich\af31506\dbch\af31505\loch\f31506    Imapct of margin or padding. Object can't move. it is always posit\hich\af31506\dbch\af31505\loch\f31506 ioned according to the normal flow of the page.
\par \hich\af31506\dbch\af31505\loch\f31506 2. Relative: Object can move. It is positioned relative to its normal position. If want gap from its actual placed position then use it. It work with left,
\par \hich\af31506\dbch\af31505\loch\f31506    right, top, bottom properties.
\par \hich\af31506\dbch\af31505\loch\f31506 3. Fixed: Not allo\hich\af31506\dbch\af31505\loch\f31506 w to scroll up or down. is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. 
\par \hich\af31506\dbch\af31505\loch\f31506    The top, right, bottom, and left properties are used to position the element. The element is positioned relative\hich\af31506\dbch\af31505\loch\f31506  to the browser window
\par \hich\af31506\dbch\af31505\loch\f31506 4. Absolute: it is work with relative i.e, w.r.t parent. It is positioned relative to the nearest positioned ancestor (instead of positioned relative to the 
\par \hich\af31506\dbch\af31505\loch\f31506    viewport, like fixed). if an absolute positioned element has no position\hich\af31506\dbch\af31505\loch\f31506 ed ancestors, it uses the document body, and moves along with page scrolling.
\par \hich\af31506\dbch\af31505\loch\f31506 5. Sticky: An element with position: sticky; is positioned based on the user's scroll position. Internet Explorer does not support sticky positioning. 
\par \hich\af31506\dbch\af31505\loch\f31506    You must also specify a\hich\af31506\dbch\af31505\loch\f31506 t least one of top, right, bottom or left for sticky positioning to work. Use for to create menu.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 =============================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===================

\par \hich\af31506\dbch\af31505\loch\f31506 Time based Event:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 SetTimeout: 
\par \hich\af31506\dbch\af31505\loch\f31506 1. allows us to run a FUNCTION ONCE, after the interval of time
\par \hich\af31506\dbch\af31505\loch\f31506 2. setTimeout() executes the passed function after given time. The id_value returned by setTimeout() function is stored in a variable and 
\par \hich\af31506\dbch\af31505\loch\f31506  \hich\af31506\dbch\af31505\loch\f31506   it\hich\f31506 \rquote \loch\f31506 s passed into the clearTimeout() function to clear the timer. 
\par \hich\af31506\dbch\af31505\loch\f31506 3. Syntax- let timerId = setTimeout(function, milliseconds, [arg1], [arg2], ...)
\par \hich\af31506\dbch\af31505\loch\f31506 4. Don't make a mistake by adding brackets () after the function otherwise gives undefined and nothing will\hich\af31506\dbch\af31505\loch\f31506  scheduled.
\par \hich\af31506\dbch\af31505\loch\f31506 5. Example-
\par \hich\af31506\dbch\af31505\loch\f31506 let timerId = function sayHi(phrase, who) \{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log( phrase + who );
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 setTimeout(sayHi, 1000, "Hello", "John"); 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 SetInterval:
\par \hich\af31506\dbch\af31505\loch\f31506 1. allows us to run a function repeatedly, starting after the interval of time, then repeating continuously at that interval.
\par \hich\af31506\dbch\af31505\loch\f31506 2. setInterval() executes the passed function for the given time interval. The number id value returned by setInterval() function \hich\af31506\dbch\af31505\loch\f31506 is stored 
\par \hich\af31506\dbch\af31505\loch\f31506    in a variable and it\hich\f31506 \rquote \loch\f31506 s passed into the clearInterval() function to clear the interval.
\par \hich\af31506\dbch\af31505\loch\f31506 3. Syntax-
\par \hich\af31506\dbch\af31505\loch\f31506 4. Example
\par \hich\af31506\dbch\af31505\loch\f31506 let timerId = function sayHi(phrase, who) \{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log( phrase + who );
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 setInterval(sayHi, 1000, "Hello", "John");
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ClearTimeout\hich\af31506\dbch\af31505\loch\f31506 :
\par \hich\af31506\dbch\af31505\loch\f31506 1. This method is used to cancel a setTimeout().  Inside the method you have to reference the timeoutID.
\par \hich\af31506\dbch\af31505\loch\f31506 clearTimeout(timerId)
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ClearInterval:
\par \hich\af31506\dbch\af31505\loch\f31506 1. This method is used to cancel a setInterval().  Inside the method you have to reference the intervalID.
\par \hich\af31506\dbch\af31505\loch\f31506 clea\hich\af31506\dbch\af31505\loch\f31506 rInterval(timerId)
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Debouncing and Throttling in JavaScript: using in search box\hich\af31506\dbch\af31505\loch\f31506 , scrolling or resize the widow size
\par \hich\af31506\dbch\af31505\loch\f31506 1. Create impact on performance of your website, but also prevent unnecessary API calls and load on the server.
\par \hich\af31506\dbch\af31505\loch\f31506 2. Debouncing and throttling techniques are used to limit the number of times a function can execute. ke bu\hich\af31506\dbch\af31505\loch\f31506 tton click, mouse move, search bar, window scrolling 
\par \hich\af31506\dbch\af31505\loch\f31506    and window resize allow the user to decide when to execute.
\par \hich\af31506\dbch\af31505\loch\f31506 3. The main difference between throttling and debouncing is that throttling executes the function at a regular interval, while debouncing executes the function only 
\par \hich\af31506\dbch\af31505\loch\f31506    after some cooling period.
\par \hich\af31506\dbch\af31505\loch\f31506 4. Example: If you're scrolling, throttle will slowly call y\hich\af31506\dbch\af31505\loch\f31506 our function while you scroll (every X milliseconds). Debounce will wait until after you're done scrolling 
\par \hich\af31506\dbch\af31505\loch\f31506    to call your function.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Throttling-
\par \hich\af31506\dbch\af31505\loch\f31506 Throttling is a technique in which, no matter how many times the user fires the event, the attached function \hich\af31506\dbch\af31505\loch\f31506 will be executed only once in a given time interval.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Debouncing- 
\par \hich\af31506\dbch\af31505\loch\f31506 No matter how many times the user fires the event, the attached function will be executed only after the specified time once the user stops firing the event.
\par \hich\af31506\dbch\af31505\loch\f31506 The Debounce technique allow us\hich\af31506\dbch\af31505\loch\f31506 \hich\f31506  to \'93\loch\f31506 \hich\f31506 group\'94\loch\f31506  multiple sequential calls in a single one.
\par \hich\af31506\dbch\af31505\loch\f31506 var debounced_version = _.debounce(doSomething, 200);
\par \hich\af31506\dbch\af31505\loch\f31506 $(window).on('scroll', debounced_version);
\par \hich\af31506\dbch\af31505\loch\f31506 debounced_version.cancel();
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================================================\hich\af31506\dbch\af31505\loch\f31506 ====================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 CALL, APPLY and BIND method: These methods allow us to write a function once and invoke it in a different context. They all attach this into a function (or\hich\af31506\dbch\af31505\loch\f31506  object) 
\par \hich\af31506\dbch\af31505\loch\f31506 and the difference is in the function invocation. Call and apply are pretty interchangeable. Just decide whether it\hich\f31506 \rquote \loch\f31506 s easier to send in an array or a comma separated 
\par \hich\af31506\dbch\af31505\loch\f31506 list of arguments. I always remember which one is which by remembering that Cal\hich\af31506\dbch\af31505\loch\f31506 l is for comma (separated list) and Apply is for Array. Bind is a bit different. 
\par \hich\af31506\dbch\af31505\loch\f31506 It returns a new function. Call and Apply execute the current function immediately. The main concept behind all this methods is Function burrowing.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 CALL:
\par \hich\af31506\dbch\af31505\loch\f31506 1. It is predefined\hich\af31506\dbch\af31505\loch\f31506  javascript method.
\par \hich\af31506\dbch\af31505\loch\f31506 2. An object can use a method belonging to another object.
\par \hich\af31506\dbch\af31505\loch\f31506 3. Call invokes the function and allows you to pass in arguments one by one.
\par \hich\af31506\dbch\af31505\loch\f31506 APPLY:
\par \hich\af31506\dbch\af31505\loch\f31506 1. Apply invokes the function and allows you to pass in arguments as an array.
\par \hich\af31506\dbch\af31505\loch\f31506 BIND:
\par \hich\af31506\dbch\af31505\loch\f31506 1. We ca\hich\af31506\dbch\af31505\loch\f31506 n bind an object to a common function, so that the function gives different results when its need.
\par \hich\af31506\dbch\af31505\loch\f31506 2. It takes an object as an first argument and creates a new function.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Example1:
\par \hich\af31506\dbch\af31505\loch\f31506 const people=\{
\par \hich\af31506\dbch\af31505\loch\f31506  fullName: function()\{
\par \hich\af31506\dbch\af31505\loch\f31506    return this.firstName+" "+this.lastName;
\par \hich\af31506\dbch\af31505\loch\f31506  \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const person1=\{
\par \hich\af31506\dbch\af31505\loch\f31506   firstName: "Priya",
\par \hich\af31506\dbch\af31505\loch\f31506   lastName:"Bagde"
\par \hich\af31506\dbch\af31505\loch\f31506  \} 
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(people.fullName.call(person1)); //Priya Bagde
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(people.fullName.apply(person1)); //Priya Bagde
\par \hich\af31506\dbch\af31505\loch\f31506 let bound = people.fullName.b\hich\af31506\dbch\af31505\loch\f31506 ind(person1)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(bound()) //Priya Bagde
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Example2:
\par \hich\af31506\dbch\af31505\loch\f31506 const obj = \{name:"Priya"\}
\par \hich\af31506\dbch\af31505\loch\f31506 let greeting = function(a,b)\{
\par \hich\af31506\dbch\af31505\loch\f31506   return a+" "+this.name+" "+b;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(greeting.call(obj, "Hello", "How are you?"));
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(greeting.apply(obj, ["Hello", "How a\hich\af31506\dbch\af31505\loch\f31506 re you?"]));
\par \hich\af31506\dbch\af31505\loch\f31506 let test=greeting.bind(obj);
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(test("Hello", "How are you?"))
\par \hich\af31506\dbch\af31505\loch\f31506 ===========================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =====

\par \hich\af31506\dbch\af31505\loch\f31506 Hoisting:
\par \hich\af31506\dbch\af31505\loch\f31506 1. To move all of the variable and function declarations at the top of the current scope.
\par \hich\af31506\dbch\af31505\loch\f31506 2. Hoisting is JavaScript's default behavior of moving declarations to the top.
\par \hich\af31506\dbch\af31505\loch\f31506 3. A variable can be used before it has been declared.
\par \hich\af31506\dbch\af31505\loch\f31506 4. Note: JavaScript only hoists declarations, not the initializations.
\par \hich\af31506\dbch\af31505\loch\f31506 5. JavaScript allocates memory for all variables and functions defined in the program before execution.
\par \hich\af31506\dbch\af31505\loch\f31506 6. Due to the concept of h\hich\af31506\dbch\af31505\loch\f31506 oisting in JavaScript, we can call a function even before we define the function definition in our program's code.
\par \hich\af31506\dbch\af31505\loch\f31506 7. Variables defined with let and const are hoisted to the top of the block, but not initialized.Let and const are also hoisted but we cant a\hich\af31506\dbch\af31505\loch\f31506 ccess them 
\par \hich\af31506\dbch\af31505\loch\f31506 until they are assigned because they are in Temporal dead zone.To avoid Temporal deadzone we need to declare let and const to the top of our program!
\par \hich\af31506\dbch\af31505\loch\f31506 ***when const gets hoisted it will be defined undefined,and further processing will get assign\hich\af31506\dbch\af31505\loch\f31506 
ed the value , this violated the meaning of const , this is the fundamental reason why const doesn't get hoisted and let just got tagged along with this feature.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 -- Can able to access variable and function before initialise. Can able to access it without \hich\af31506\dbch\af31505\loch\f31506 any error.
\par \hich\af31506\dbch\af31505\loch\f31506 -- console.log(getName); without parenthisis -- print the body of function.
\par \hich\af31506\dbch\af31505\loch\f31506 -- if we remove var x=7 then it will get as refrennce error: x is not defined because x is not present at all and we are trying to access it.
\par \hich\af31506\dbch\af31505\loch\f31506 -- with arrow and function \hich\af31506\dbch\af31505\loch\f31506 expression 
\par \hich\af31506\dbch\af31505\loch\f31506 -- callstack
\par \hich\af31506\dbch\af31505\loch\f31506 -- console.log(greetingName) //print the body  of a function
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables or classes to the top of their scope, 
\par \hich\af31506\dbch\af31505\loch\f31506 before e\hich\af31506\dbch\af31505\loch\f31506 xecution of the code.
\par \hich\af31506\dbch\af31505\loch\f31506 This is a complete textbook type definition (thanks to MDN Docs for this), but what does it mean in simple words.
\par \hich\af31506\dbch\af31505\loch\f31506 Hoisting simply means that we can access variables, before their initialisation & functions, before their declaration.
\par \hich\af31506\dbch\af31505\loch\f31506 i\hich\af31506\dbch\af31505\loch\f31506 t gives us an advantage that no matter where functions and variables are declared, they are moved to the top of their scope 
\par \hich\af31506\dbch\af31505\loch\f31506 regardless of whether their scope is global or local
\par 
\par 
\par 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Examples:
\par \hich\af31506\dbch\af31505\loch\f31506 1. Hoisting Function: If i write below code then JS compiler aut\hich\af31506\dbch\af31505\loch\f31506 o move declaration first then call of a function.
\par \hich\af31506\dbch\af31505\loch\f31506 hello() //call
\par \hich\af31506\dbch\af31505\loch\f31506 function hello()\{ //declaration
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("Hello world")
\par \}\hich\af31506\dbch\af31505\loch\f31506  
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 2. Hoisting Var keyword:
\par \hich\af31506\dbch\af31505\loch\f31506 var x; //declaration
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(x) //call //output will be undefined because if value is not assigned before call then always assign a "undefined" value. whereas it doesn't provide
\par \hich\af31506\dbch\af31505\loch\f31506 undefined for const and let keywords
\par \hich\af31506\dbch\af31505\loch\f31506 x=7; //assignment
\par ------------
\par \hich\af31506\dbch\af31505\loch\f31506 var x=7; //declaration and \hich\af31506\dbch\af31505\loch\f31506 assignment
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(x) //call //7
\par ------------
\par \hich\af31506\dbch\af31505\loch\f31506 x=7; //assignment
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(x) //call //7
\par \hich\af31506\dbch\af31505\loch\f31506 var x; //declaration
\par ------------
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(x) //call //undefined
\par \hich\af31506\dbch\af31505\loch\f31506 x=7; //assignment
\par \hich\af31506\dbch\af31505\loch\f31506 var x; //declaration
\par ------------
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(x) //call //undefined
\par \hich\af31506\dbch\af31505\loch\f31506 var x=7;\hich\af31506\dbch\af31505\loch\f31506  //declaration
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 3. Let/const Hoising:
\par \hich\af31506\dbch\af31505\loch\f31506 let x=7; //declaration and assignment
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(x) //call //7
\par -------------
\par \hich\af31506\dbch\af31505\loch\f31506 const x; //declaration 
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(x) //call //Missing initializer in const declaration 
\par \hich\af31506\dbch\af31505\loch\f31506 x=7; //assignment
\par 
\par -------------------------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 Hoisting:
\par \hich\af31506\dbch\af31505\loch\f31506 var x = 1;
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function greeting()\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("Hi greeting");
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var greeting1 = function ()\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("Hey greeting1");
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var greeting2 = () =>\{
\par \hich\af31506\dbch\af31505\loch\f31506   conso\hich\af31506\dbch\af31505\loch\f31506 le.log("Hello greeting2");
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(x); //1
\par \hich\af31506\dbch\af31505\loch\f31506 greeting(); //Hi greeting
\par \hich\af31506\dbch\af31505\loch\f31506 greeting1(); //Hey greeting1
\par \hich\af31506\dbch\af31505\loch\f31506 greeting2(); //Hello greeting2
\par -----------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(x); //undefined //1
\par \hich\af31506\dbch\af31505\loch\f31506 greeting(); //fu\hich\af31506\dbch\af31505\loch\f31506 nction body will assign before executing //Hi greeting- as output post execution
\par \hich\af31506\dbch\af31505\loch\f31506 //greeting1(); //Uncaught TypeError: greeting1 is not a function because its treeting like a variable not a function, so rather then storing a function body it's storing undef\hich\af31506\dbch\af31505\loch\f31506 
ined by default.
\par \hich\af31506\dbch\af31505\loch\f31506 //greeting2(); ////Uncaught TypeError: greeting1 is not a function because its treeting like a variable not a function, so rather then storing a function body it's storing undefined by default.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var x = 1;
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function greeting()\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("Hi greeting");
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var greeting1 = function ()\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("Hey greeting1");
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var greeting2 = () =>\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("Hello greeting2");
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 ===============================================================================\hich\af31506\dbch\af31505\loch\f31506 =================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Window and This:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Window:
\par \hich\af31506\dbch\af31505\loch\f31506 1. Javascript engine create global context execution and allocate some memory space. It is a big object with lot of methods and func\hich\af31506\dbch\af31505\loch\f31506 tions which is created in global space 

\par \hich\af31506\dbch\af31505\loch\f31506 by JS engine.
\par \hich\af31506\dbch\af31505\loch\f31506 2. Window is the main JavaScript object root, aka the global object in a browser, and it can also be treated as the root of the document object model. You can access it as window.
\par \hich\af31506\dbch\af31505\loch\f31506 3. window.document or \hich\af31506\dbch\af31505\loch\f31506 just document is the main object of the potentially visible (or better yet: rendered) document object model/DOM.
\par \hich\af31506\dbch\af31505\loch\f31506 4. window is the global object, you can reference any properties of it with just the property name - so you do not have to write down window. -\hich\af31506\dbch\af31505\loch\f31506 
 it will be figured out by the runtime.
\par \hich\af31506\dbch\af31505\loch\f31506 5. window.document.getElementById("header") is the same as document.getElementById("header").
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 This:
\par \hich\af31506\dbch\af31505\loch\f31506 1. At global level THIS points to the window. 
\par \hich\af31506\dbch\af31505\loch\f31506 2. With Window object THIS variable is created by default.
\par \hich\af31506\dbch\af31505\loch\f31506 3. This =\hich\af31506\dbch\af31505\loch\f31506 == window //true
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Example:
\par \hich\af31506\dbch\af31505\loch\f31506 var a=10;
\par \hich\af31506\dbch\af31505\loch\f31506 function b()\{
\par \hich\af31506\dbch\af31505\loch\f31506  var x=10;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(window.a); //10
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(a); //10
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(this.a); //10
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Even Propogation an STOP Propogation: Bydefault event capturing happen first an\hich\af31506\dbch\af31505\loch\f31506 d then even bubbling happen.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Event Bubbling:
\par \hich\af31506\dbch\af31505\loch\f31506 1. When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors. With bubbling, the event is 
\par \hich\af31506\dbch\af31505\loch\f31506    first captured and handled by the innermost \hich\af31506\dbch\af31505\loch\f31506 element and then propagated to outer elements.
\par \hich\af31506\dbch\af31505\loch\f31506 2. Bydefault event bubbling execute. To run event bubbling required to mention 3rd argument as FALSE or nothing.
\par \hich\af31506\dbch\af31505\loch\f31506 3. "child clicked"
\par \hich\af31506\dbch\af31505\loch\f31506 "parent clicked"
\par \hich\af31506\dbch\af31505\loch\f31506 "grandparent clicked"
\par \hich\af31506\dbch\af31505\loch\f31506 4. Drawback: Bubbling not occur at blu\hich\af31506\dbch\af31505\loch\f31506 r, focus, resizing of window etc.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Event Capturing or Event Trickling:
\par \hich\af31506\dbch\af31505\loch\f31506 1. With capturing, the event is first captured by the outermost element and propagated to the inner elements.
\par \hich\af31506\dbch\af31505\loch\f31506 2. To run event capturing required to mention 3rd argument as TRUE.
\par \hich\af31506\dbch\af31505\loch\f31506 3. "gra\hich\af31506\dbch\af31505\loch\f31506 ndparent clicked"
\par \hich\af31506\dbch\af31505\loch\f31506 "parent clicked"
\par \hich\af31506\dbch\af31505\loch\f31506 "child clicked"
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Example:
\par \hich\af31506\dbch\af31505\loch\f31506 html-
\par \hich\af31506\dbch\af31505\loch\f31506 <div id="grandparent">
\par \hich\af31506\dbch\af31505\loch\f31506   <div id="parent">
\par \hich\af31506\dbch\af31505\loch\f31506     <div id="child">
\par \hich\af31506\dbch\af31505\loch\f31506       </div>
\par \hich\af31506\dbch\af31505\loch\f31506 </div>
\par \hich\af31506\dbch\af31505\loch\f31506 </div>
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 css-
\par \hich\af31506\dbch\af31505\loch\f31506 div\{
\par \hich\af31506\dbch\af31505\loch\f31506   min-width: 10px;
\par \hich\af31506\dbch\af31505\loch\f31506   min-height: 10px;
\par \hich\af31506\dbch\af31505\loch\f31506   border: 1px solid red;
\par \hich\af31506\dbch\af31505\loch\f31506   padding: 30px;
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 js-
\par \hich\af31506\dbch\af31505\loch\f31506 for bubbling:
\par \hich\af31506\dbch\af31505\loch\f31506 document.querySelector("#grandparent").addEventListener("click",()=> \{console.log("grandparent clicked")\}, false); or document.querySelector("#grandparent").addEventListener("click",()=> \{conso
\hich\af31506\dbch\af31505\loch\f31506 le.log("grandparent clicked")\});
\par \hich\af31506\dbch\af31505\loch\f31506 document.querySelector("#parent").addEventListener("click",()=> \{console.log("parent clicked")\}, false); or document.querySelector("#parent").addEventListener("click",()=> \{console.log("parent clicked")\});
\par \hich\af31506\dbch\af31505\loch\f31506 document.querySel\hich\af31506\dbch\af31505\loch\f31506 ector("#child").addEventListener("click",()=> \{console.log("child clicked")\}, false); or document.querySelector("#child").addEventListener("click",()=> \{
console.log("child clicked")\})
\par \hich\af31506\dbch\af31505\loch\f31506 for capturing:
\par \hich\af31506\dbch\af31505\loch\f31506 document.querySelector("#grandparent").addEventListener("\hich\af31506\dbch\af31505\loch\f31506 click",()=> \{console.log("grandparent clicked")\}, true);
\par \hich\af31506\dbch\af31505\loch\f31506 document.querySelector("#parent").addEventListener("click",()=> \{console.log("parent clicked")\},true);
\par \hich\af31506\dbch\af31505\loch\f31506 document.querySelector("#child").addEventListener("click",()=> \{console.log("child clicked")\},tr\hich\af31506\dbch\af31505\loch\f31506 ue); 
\par \hich\af31506\dbch\af31505\loch\f31506 stopPropogation:
\par \hich\af31506\dbch\af31505\loch\f31506 document.querySelector("#grandparent").addEventListener("click",()=> \{console.log("grandparent clicked")\}, false);
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 document.querySelector("#parent").addEventListener("click",(e)=> \{console.log("parent clicked"); e.stopPropogation()\}\hich\af31506\dbch\af31505\loch\f31506 ,false);
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 document.querySelector("#child").addEventListener("click",()=> \{console.log("child clicked")\},false); 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Event Delegation:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 1. Event delegation makes use of one of the Event Propagatio\hich\af31506\dbch\af31505\loch\f31506 n techniques called Event Bubbling
\par \hich\af31506\dbch\af31505\loch\f31506 2. if we have a lot of elements handled in a similar way, then instead of assigning a handler to each of them \hich\f31506 \endash \loch\f31506  we put a single handler on their common ancestor.
\par \hich\af31506\dbch\af31505\loch\f31506 3. In the handler we get event.target to see where the even\hich\af31506\dbch\af31505\loch\f31506 t actually happened and handle it.
\par \hich\af31506\dbch\af31505\loch\f31506 4. Less memory usage, better performance.
\par \hich\af31506\dbch\af31505\loch\f31506 5. Less time required to set up event handlers on the page.
\par \hich\af31506\dbch\af31505\loch\f31506 6. Event delegation is a pattern to handle events efficiently in JavaScript. The main idea is to reduce the number of e\hich\af31506\dbch\af31505\loch\f31506 vent handlers on a webpage and thus 
\par \hich\af31506\dbch\af31505\loch\f31506    improving the performance of the website.
\par \hich\af31506\dbch\af31505\loch\f31506 7. When there are multiple DOM elements present, instead of adding event handlers on each one of them, you can just add one event handler 
\par \hich\af31506\dbch\af31505\loch\f31506    (on the parent/common ancestor e\hich\af31506\dbch\af31505\loch\f31506 lement) which can do the exact same work which all those multiple event handlers were supposed to do.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Example:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 html-
\par \hich\af31506\dbch\af31505\loch\f31506 Counter: <input type="button" value="1" data-counter>
\par \hich\af31506\dbch\af31505\loch\f31506 One more counter: <input type="button" value="2" data-counter>
\par \hich\af31506\dbch\af31505\loch\f31506 <script>
\par \hich\af31506\dbch\af31505\loch\f31506   document.\hich\af31506\dbch\af31505\loch\f31506 addEventListener('click', function(event) \{
\par 
\par \hich\af31506\dbch\af31505\loch\f31506     if (event.target.dataset.counter != undefined) \{ 
\par \hich\af31506\dbch\af31505\loch\f31506       event.target.value++;
\par \hich\af31506\dbch\af31505\loch\f31506       console.log(event.target.value)
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \});
\par \hich\af31506\dbch\af31505\loch\f31506 </script>
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 1. With the help of polyfill can write own implementation of BIND function.
\par \hich\af31506\dbch\af31505\loch\f31506 2. Polyfills is a way to use modern features (usually JS) on browsers where it is currently unsupported.  We do this by mimicking the functionality using supported methods 
\par \hich\af31506\dbch\af31505\loch\f31506 along w\hich\af31506\dbch\af31505\loch\f31506 ith our own logic.
\par \hich\af31506\dbch\af31505\loch\f31506 3. A polyfill is a piece of code (usually JavaScript on the Web) used to provide modern functionality on older browsers that do not natively support it.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill: Sometimes array push, pop or filter methods and some window's functions l\hich\af31506\dbch\af31505\loch\f31506 ike window.localstorage and window.sessionstorage these functions are not supported
\par \hich\af31506\dbch\af31505\loch\f31506 by browser, so in this case we can provide our own fallback support or own code that it replace the native functions
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Example for bind:
\par \hich\af31506\dbch\af31505\loch\f31506 With Bind-
\par \hich\af31506\dbch\af31505\loch\f31506 let name =\{
\par \hich\af31506\dbch\af31505\loch\f31506   first: "Pri\hich\af31506\dbch\af31505\loch\f31506 ya",
\par \hich\af31506\dbch\af31505\loch\f31506   last: "Bagde"
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 let printName = function()\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(this.first+this.last)
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 let printNameFinal= printName.bind(name)
\par \hich\af31506\dbch\af31505\loch\f31506 printNameFinal()
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Without Bind-
\par \hich\af31506\dbch\af31505\loch\f31506 let name =\{ first: "Priya", last: "Bagde"\}
\par \hich\af31506\dbch\af31505\loch\f31506 let printName = function(town, state)\{ console.log(\hich\af31506\dbch\af31505\loch\f31506 this.first+" "+this.last+" "+town+" "+state)\}
\par \hich\af31506\dbch\af31505\loch\f31506 Function.prototype.mybind= function(...args)\{ //printName arguments
\par \hich\af31506\dbch\af31505\loch\f31506   let obj = this; //printName
\par \hich\af31506\dbch\af31505\loch\f31506   params = args.slice(1)
\par \hich\af31506\dbch\af31505\loch\f31506   return function(...args2)\{ //printNameFinal arguments
\par \hich\af31506\dbch\af31505\loch\f31506    obj.apply(args[0], [...params, ...args2])
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 let printNameFinal= printName.mybind(name, "chhindwara")
\par \hich\af31506\dbch\af31505\loch\f31506 printNameFinal("MadyaPradesh")
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Promises:-
\par 
\par }{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10179\'3f\u-9143\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 \hich\af31506\dbch\af31505\loch\f31506 Why do you need a promise?
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 Promises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing the callback hell and writing the cl\hich\af31506\dbch\af31505\loch\f31506 eaner code.
\par 
\par }{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10179\'3f\u-9143\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 \hich\af31506\dbch\af31505\loch\f31506 What are the three states of promise ?
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 Promises have three states:
\par \hich\af31506\dbch\af31505\loch\f31506 Pending: This is an initial state of the Promise before an operation begins
\par \hich\af31506\dbch\af31505\loch\f31506 Fulfilled: This state indicates that the specified operation was completed.
\par \hich\af31506\dbch\af31505\loch\f31506 Rejected: This stat\hich\af31506\dbch\af31505\loch\f31506 e indicates that the operation did not complete. In this case an error value will be thrown.
\par 
\par }{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10179\'3f\u-9143\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 \hich\af31506\dbch\af31505\loch\f31506 What is promise chaining ?
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining.
\par 
\par }{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10179\'3f\u-9143\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 \hich\af31506\dbch\af31505\loch\f31506 What i\hich\af31506\dbch\af31505\loch\f31506 
s promise.all ?
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 
Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,
\par \hich\af31506\dbch\af31505\loch\f31506 Promise\hich\af31506\dbch\af31505\loch\f31506 .all([Promise1, Promise2, Promise3])
\par \hich\af31506\dbch\af31505\loch\f31506 .then(result) => \{ console.log(result) \})
\par \hich\af31506\dbch\af31505\loch\f31506 .catch(error => console.log(`Error in promises $\{error\}`))
\par 
\par }{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10179\'3f\u-9143\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 \hich\af31506\dbch\af31505\loch\f31506 What are the pros and cons of promises over callbacks ?

\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 Pros:
\par \hich\af31506\dbch\af31505\loch\f31506 It avoids callback hell which is unreadable
\par \hich\af31506\dbch\af31505\loch\f31506 Easy to write sequential asynchronous code with .then()
\par \hich\af31506\dbch\af31505\loch\f31506 Easy to write parallel asynchronous code with Promise.all()
\par \hich\af31506\dbch\af31505\loch\f31506 Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)
\par \hich\af31506\dbch\af31505\loch\f31506 Cons:
\par \hich\af31506\dbch\af31505\loch\f31506 It ma\hich\af31506\dbch\af31505\loch\f31506 kes little complex code
\par \hich\af31506\dbch\af31505\loch\f31506 You need to load a polyfill if ES6 is not supported
\par 
\par }{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10179\'3f\u-9143\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 \hich\af31506\dbch\af31505\loch\f31506 How to cancel a fetch request ?
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 One shortcoming of native promises is no direct way to cancel a fetch request. But the new AbortController from js specification allows you to\hich\af31506\dbch\af31505\loch\f31506 
 use a signal to abort one or multiple fetch calls. 
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par }{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10179\'3f\u-9143\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 \hich\af31506\dbch\af31505\loch\f31506 What are default paramet
\hich\af31506\dbch\af31505\loch\f31506 ers?
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 
In E5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let's 
\hich\af31506\dbch\af31505\loch\f31506 compare the behavior with an examples,
\par \hich\af31506\dbch\af31505\loch\f31506 //ES5
\par \hich\af31506\dbch\af31505\loch\f31506 var calculateArea = function(height, width) \{
\par \hich\af31506\dbch\af31505\loch\f31506    height =  height || 50;
\par \hich\af31506\dbch\af31505\loch\f31506    width = width || 60;
\par \hich\af31506\dbch\af31505\loch\f31506    return width * height;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(calculateArea()); //300
\par \hich\af31506\dbch\af31505\loch\f31506 //ES6
\par \hich\af31506\dbch\af31505\loch\f31506 var calculateArea = function(height = 50, wi\hich\af31506\dbch\af31505\loch\f31506 dth = 60) \{
\par \hich\af31506\dbch\af31505\loch\f31506    return width * height;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(calculateArea()); //300
\par 
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 After default parameters you should not have parameters without default value-
\par \hich\af31506\dbch\af31505\loch\f31506 function printValue(a=1, b) \{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("a = " + a + " and b = " + b);
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 printValue();    // Logs: a = 1 and b = undefined
\par \hich\af31506\dbch\af31505\loch\f31506 printValue(7);    // Logs: a = 7 and b = undefined
\par \hich\af31506\dbch\af31505\loch\f31506 printValue(7, 3);    // Logs: a = 7 and b = 3
\par 
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 Default values for parameters and calling it without arguments-
\par \hich\af31506\dbch\af31505\loch\f31506 function add(a=10, b=20)
\par \{
\par \tab \hich\af31506\dbch\af31505\loch\f31506 return a+b;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(" Sum is : " + add());   // No argument //30
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(" Sum is : " + add(1));   // with one argument //21
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(" Sum is : " + add(5,6));   // with both argument  //11
\par 
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 JavaScript Default Parameters with null or empty Argument-
\par \hich\af31506\dbch\af31505\loch\f31506 fun\hich\af31506\dbch\af31505\loch\f31506 ction test(a = 1)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(typeof a);
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("Value of a: " + a);
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 test();    // number, Value of a: 1
\par \hich\af31506\dbch\af31505\loch\f31506 test(undefined);    // number, Value of a: 1
\par \hich\af31506\dbch\af31505\loch\f31506 test('');    // string, Value of a: 
\par \hich\af31506\dbch\af31505\loch\f31506 test(null);    // object, Value of a: null
\par 
\par }{\rtlch\fcs1 \af43 \ltrch\fcs0 \f43\insrsid339097 \loch\af43\dbch\af31505\hich\f43 \u9996\'3f}{\rtlch\fcs1 \af42 \ltrch\fcs0 \f42\insrsid339097 \loch\af42\dbch\af31505\hich\f42 \u-10180\'3f\u-8196\'3f}{\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid339097 
\hich\af31506\dbch\af31505\loch\f31506 Defau\hich\af31506\dbch\af31505\loch\f31506 lt Parameters are evaluated at Call time-
\par \hich\af31506\dbch\af31505\loch\f31506 function append(value, array = []) \{
\par \hich\af31506\dbch\af31505\loch\f31506     array.push(value)
\par \hich\af31506\dbch\af31505\loch\f31506     return array
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 append(1)  // [1]
\par \hich\af31506\dbch\af31505\loch\f31506 append(2)  // [2], not [1, 2]
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 JWT Token:
\par \hich\af31506\dbch\af31505\loch\f31506 1. JSON Web Token (JWT) is an open standard (RFC 7519) that defines \hich\af31506\dbch\af31505\loch\f31506 a compact and self-contained way for securely transmitting information between parties as a JSON object.

\par \hich\af31506\dbch\af31505\loch\f31506 2. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a public/private key pair using RSA.
\par \hich\af31506\dbch\af31505\loch\f31506 =========\hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of Bind:
\par \hich\af31506\dbch\af31505\loch\f31506 const name =\{
\par \hich\af31506\dbch\af31505\loch\f31506   firstName: "Priya", 
\par \hich\af31506\dbch\af31505\loch\f31506   lastName: "Bagde"
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let printN\hich\af31506\dbch\af31505\loch\f31506 ame = function(hometown, state, country)\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(this.firstName + " " + this.lastName + " " + state + " " + country)
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 let printMyName = printName.bind(name, "Mumbai", "MH"); 
\par \hich\af31506\dbch\af31505\loch\f31506 printMyName("India"); //with bind method
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 //polyfill
\par \hich\af31506\dbch\af31505\loch\f31506 Function.prototype.m\hich\af31506\dbch\af31505\loch\f31506 ybind = function(...args)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let obj = this,
\par \hich\af31506\dbch\af31505\loch\f31506       params = args.slice(1);
\par \hich\af31506\dbch\af31505\loch\f31506   return function (...args2)\{
\par \hich\af31506\dbch\af31505\loch\f31506     obj.apply(args[0], [...params, ...args2])
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 let printMyName2 = printName.mybind(name, "Mumbai", "MH")
\par \hich\af31506\dbch\af31505\loch\f31506 printMyName2("India"); //with polyfill of\hich\af31506\dbch\af31505\loch\f31506  bind 
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of Call:
\par \hich\af31506\dbch\af31505\loch\f31506 const myName = \{
\par \hich\af31506\dbch\af31505\loch\f31506   firstName: "Priya",
\par \hich\af31506\dbch\af31505\loch\f31506   lastName : "Bagde"  
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function printName(city, country)\{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log( `$\{this.firstName\} $\{this.lastName\}, $\{city\}, $\{country\}` );
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Function.prototype.myCall= function(context, ...args)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let currentContext = context || globalThis;
\par \hich\af31506\dbch\af31505\loch\f31506   let randomProp = Math.random();
\par \hich\af31506\dbch\af31505\loch\f31506  \hich\af31506\dbch\af31505\loch\f31506  while(currentContext.randomProp !== undefined)\{
\par \hich\af31506\dbch\af31505\loch\f31506     randomProp = Math.random();
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   currentContext.randomProp = this;
\par \hich\af31506\dbch\af31505\loch\f31506   let result = currentContext.randomProp(...args);
\par \hich\af31506\dbch\af31505\loch\f31506   delete currentContext.randomProp;
\par \hich\af31506\dbch\af31505\loch\f31506   return result;
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 printName.myCall(myName, "MH\hich\af31506\dbch\af31505\loch\f31506 ", "India")
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of Apply:
\par \hich\af31506\dbch\af31505\loch\f31506 const myName = \{
\par \hich\af31506\dbch\af31505\loch\f31506   firstName: "Priya",
\par \hich\af31506\dbch\af31505\loch\f31506   lastNam\hich\af31506\dbch\af31505\loch\f31506 e : "Bagde"  
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function printName(city, country)\{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log( `$\{this.firstName\} $\{this.lastName\}, $\{city\}, $\{country\}` );
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Function.prototype.myCall= function(context, args)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let currentContext = context || globalThis;
\par \hich\af31506\dbch\af31505\loch\f31506   let randomProp = Math.random();
\par \hich\af31506\dbch\af31505\loch\f31506   while(currentContext.randomProp !== undefined)\{
\par \hich\af31506\dbch\af31505\loch\f31506     randomProp = Math.random();
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   currentContext.randomProp = this;
\par \hich\af31506\dbch\af31505\loch\f31506   let result = currentContext.randomProp(...args);
\par \hich\af31506\dbch\af31505\loch\f31506   d\hich\af31506\dbch\af31505\loch\f31506 elete currentContext.randomProp;
\par \hich\af31506\dbch\af31505\loch\f31506   return result;
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 printName.myCall(myName, ["MH", "India"])
\par \hich\af31506\dbch\af31505\loch\f31506 =================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===============

\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill od forEach:
\par \hich\af31506\dbch\af31505\loch\f31506 Array.prototype.ourForEach = function (callBack) \{
\par \hich\af31506\dbch\af31505\loch\f31506   for (let i = 0; i < this.length; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506     callBack(this[i]);
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 const names = ["ali", "hamza", "jack"];
\par \hich\af31506\dbch\af31505\loch\f31506 names.ourForEach((x)=> console.log(x))
\par \hich\af31506\dbch\af31505\loch\f31506 =================\hich\af31506\dbch\af31505\loch\f31506 ===============================================================================================================================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of Map:
\par \hich\af31506\dbch\af31505\loch\f31506 // Doing this will allow us to use arr.myMap() syntax
\par \hich\af31506\dbch\af31505\loch\f31506 Array.prototype.myMap =function(cb) \{
\par \hich\af31506\dbch\af31505\loch\f31506   // rseults results array that gets returned at the end
\par \hich\af31506\dbch\af31505\loch\f31506   const results = [];
\par \hich\af31506\dbch\af31505\loch\f31506   for (let i = 0; i < this.length; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506     // returned values of our cb are pushed\hich\af31506\dbch\af31505\loch\f31506  in the reults[]
\par \hich\af31506\dbch\af31505\loch\f31506     // 'this' referes to the passed array
\par \hich\af31506\dbch\af31505\loch\f31506     results.push(cb(this[i], i, this));
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506   return results;
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const arr = [1, 2, 3, 4, 5, 6];
\par \hich\af31506\dbch\af31505\loch\f31506 const myMapResult = arr.myMap((el, _idx, _arr) => \{
\par \hich\af31506\dbch\af31505\loch\f31506   return el * 2;
\par \}\hich\af31506\dbch\af31505\loch\f31506 );
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(myMapResult);\hich\af31506\dbch\af31505\loch\f31506  //[2, 4, 6, 8, 10, 12];
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of Filter:
\par \hich\af31506\dbch\af31505\loch\f31506 // Doing this will allow us to use\hich\af31506\dbch\af31505\loch\f31506  arr.myFilter() syntax
\par \hich\af31506\dbch\af31505\loch\f31506 Array.prototype.myFilter = function myFilter(cb) \{
\par \hich\af31506\dbch\af31505\loch\f31506   const results = [];
\par \hich\af31506\dbch\af31505\loch\f31506   for (let i = 0; i < this.length; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506      if (cb(this[i])) \{
\par \hich\af31506\dbch\af31505\loch\f31506       results.push(this[i]);
\par \hich\af31506\dbch\af31505\loch\f31506     \}   
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return results;
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const arr = [1, 2, 3, 4, 5, 6];
\par \hich\af31506\dbch\af31505\loch\f31506 const foo = [
\par \hich\af31506\dbch\af31505\loch\f31506   \{ name: "S", age: 2 \},
\par \hich\af31506\dbch\af31505\loch\f31506   \{ name: "V", age: 3 \},
\par \hich\af31506\dbch\af31505\loch\f31506 ];
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const myFilterResult = foo.myFilter((el, _idx, _arr) => \{
\par \hich\af31506\dbch\af31505\loch\f31506   return el.name !== "S";
\par \}\hich\af31506\dbch\af31505\loch\f31506 );
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(myFilterResult); // [\{ name: "V", age: 3 \}]
\par \hich\af31506\dbch\af31505\loch\f31506 ============\hich\af31506\dbch\af31505\loch\f31506 ==========================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of Reduce:
\par \hich\af31506\dbch\af31505\loch\f31506 // Doing this will allow us to use arr.myReduce() syntax
\par \hich\af31506\dbch\af31505\loch\f31506 Array.prototype.myReduce\hich\af31506\dbch\af31505\loch\f31506  =function (cb, initialValue) \{
\par \hich\af31506\dbch\af31505\loch\f31506   let acc;let curr;
\par \hich\af31506\dbch\af31505\loch\f31506   if (!this.length && !initialValue)
\par \hich\af31506\dbch\af31505\loch\f31506     throw new Error("Can't reduce on empty array, provide initial value");
\par \hich\af31506\dbch\af31505\loch\f31506   else \{
\par \hich\af31506\dbch\af31505\loch\f31506     //  If initialValue is given then acc is that or acc = is the 0th index of this
\par \hich\af31506\dbch\af31505\loch\f31506     acc = initialValue ? initialValue : this[0];
\par \hich\af31506\dbch\af31505\loch\f31506     for (let i = 1; i < this.length; i++) \{
\par \hich\af31506\dbch\af31505\loch\f31506       // current value of the array
\par \hich\af31506\dbch\af31505\loch\f31506       curr = this[i];
\par \hich\af31506\dbch\af31505\loch\f31506       // the retuned cb value is assigned to acc
\par \hich\af31506\dbch\af31505\loch\f31506       acc = cb(acc, curr, i, this);
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return acc;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const arr = [1, 2, 3, 4];
\par \hich\af31506\dbch\af31505\loch\f31506 const myReduceResult = arr.myReduce((acc, curr, _idx, _arr) => \{
\par \hich\af31506\dbch\af31505\loch\f31506   acc += curr;
\par \hich\af31506\dbch\af31505\loch\f31506   return acc;
\par \}\hich\af31506\dbch\af31505\loch\f31506 );
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(myReduceResult); // 10
\par \hich\af31506\dbch\af31505\loch\f31506 =================================================================================\hich\af31506\dbch\af31505\loch\f31506 =========================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of promise.all:
\par \hich\af31506\dbch\af31505\loch\f31506 //let myPromiseAll
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.all = (promises) => \{
\par \hich\af31506\dbch\af31505\loch\f31506   let responses = [];
\par \hich\af31506\dbch\af31505\loch\f31506   let errorResp = [];
\par \hich\af31506\dbch\af31505\loch\f31506   return new Promise((resolve, reject) => \{
\par \hich\af31506\dbch\af31505\loch\f31506     \hich\af31506\dbch\af31505\loch\f31506 /** Loop over promises array **/
\par \hich\af31506\dbch\af31505\loch\f31506     promises.forEach(async (singlePromise, i) => \{
\par \hich\af31506\dbch\af31505\loch\f31506       try \{
\par \hich\af31506\dbch\af31505\loch\f31506         /** wait for resolving 1 promise **/
\par \hich\af31506\dbch\af31505\loch\f31506         let res = await singlePromise;
\par \hich\af31506\dbch\af31505\loch\f31506         responses.push(res);
\par \hich\af31506\dbch\af31505\loch\f31506         if (i == promises.length - 1) \{
\par \hich\af31506\dbch\af31505\loch\f31506        \hich\af31506\dbch\af31505\loch\f31506    if (errorResp.length > 0) \{
\par \hich\af31506\dbch\af31505\loch\f31506             reject(errorResp);
\par \hich\af31506\dbch\af31505\loch\f31506           \} else \{
\par \hich\af31506\dbch\af31505\loch\f31506             // resolve(esponses)
\par \hich\af31506\dbch\af31505\loch\f31506             // To know our cutom promise function returning result
\par \hich\af31506\dbch\af31505\loch\f31506             resolve("custom promise ::" + responses);
\par \hich\af31506\dbch\af31505\loch\f31506           \}
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506       \} catch (err) \{
\par \hich\af31506\dbch\af31505\loch\f31506         errorResp.push(err);
\par \hich\af31506\dbch\af31505\loch\f31506         reject(err);
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506     \});
\par \hich\af31506\dbch\af31505\loch\f31506   \});
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let p1 = Promise.resolve("Promise1 resolved");
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let p2 = new Promise((resolve, rej\hich\af31506\dbch\af31505\loch\f31506 ect) => \{
\par \hich\af31506\dbch\af31505\loch\f31506   setTimeout(() => \{
\par \hich\af31506\dbch\af31505\loch\f31506     resolve("Promise 2 resolved after 2 seconds");
\par \hich\af31506\dbch\af31505\loch\f31506   \}, 1000);
\par \}\hich\af31506\dbch\af31505\loch\f31506 );
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.all([p1, p2]).then(
\par \hich\af31506\dbch\af31505\loch\f31506   (res) => \{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("Response => ", res);
\par \hich\af31506\dbch\af31505\loch\f31506     document.write("<b>Response => </b>" + res);
\par \hich\af31506\dbch\af31505\loch\f31506   \},
\par \hich\af31506\dbch\af31505\loch\f31506   (err) => \{
\par \hich\af31506\dbch\af31505\loch\f31506     console\hich\af31506\dbch\af31505\loch\f31506 .log("error =>", err);
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506 );
\par \hich\af31506\dbch\af31505\loch\f31506 ========================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of //let myPromiseAll
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.all = (promises) => \{
\par \hich\af31506\dbch\af31505\loch\f31506   let responses = [];
\par \hich\af31506\dbch\af31505\loch\f31506   let errorResp = [];
\par \hich\af31506\dbch\af31505\loch\f31506   return new Promise((resolve, reject) => \{
\par \hich\af31506\dbch\af31505\loch\f31506     /** Loop over promises array **/
\par \hich\af31506\dbch\af31505\loch\f31506     promises.forEach(async (singlePromise, i) => \{
\par \hich\af31506\dbch\af31505\loch\f31506       try \{
\par \hich\af31506\dbch\af31505\loch\f31506        \hich\af31506\dbch\af31505\loch\f31506  /** wait for resolving 1 promise **/
\par \hich\af31506\dbch\af31505\loch\f31506         let res = await singlePromise;
\par \hich\af31506\dbch\af31505\loch\f31506         responses.push(res);
\par \hich\af31506\dbch\af31505\loch\f31506         if (i == promises.length - 1) \{
\par \hich\af31506\dbch\af31505\loch\f31506           if (errorResp.length > 0) \{
\par \hich\af31506\dbch\af31505\loch\f31506             reject(errorResp);
\par \hich\af31506\dbch\af31505\loch\f31506           \} else \{
\par \hich\af31506\dbch\af31505\loch\f31506             // resolve\hich\af31506\dbch\af31505\loch\f31506 (esponses)
\par \hich\af31506\dbch\af31505\loch\f31506             // To know our cutom promise function returning result
\par \hich\af31506\dbch\af31505\loch\f31506             resolve("custom promise ::" + responses);
\par \hich\af31506\dbch\af31505\loch\f31506           \}
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506       \} catch (err) \{
\par \hich\af31506\dbch\af31505\loch\f31506         errorResp.push(err);
\par \hich\af31506\dbch\af31505\loch\f31506         reject(err);
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506     \});
\par \hich\af31506\dbch\af31505\loch\f31506   \});
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let \hich\af31506\dbch\af31505\loch\f31506 p1 = Promise.resolve("Promise1 resolved");
\par \hich\af31506\dbch\af31505\loch\f31506 let p2 = new Promise((resolve, reject) => \{
\par \hich\af31506\dbch\af31505\loch\f31506   setTimeout(() => \{
\par \hich\af31506\dbch\af31505\loch\f31506     resolve("Promise 2 resolved after 2 seconds");
\par \hich\af31506\dbch\af31505\loch\f31506   \}, 1000);
\par \}\hich\af31506\dbch\af31505\loch\f31506 );
\par \hich\af31506\dbch\af31505\loch\f31506 let p3 = Promise.reject("Promise Rejected")
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.all([p1, p2, p3]).then(
\par \hich\af31506\dbch\af31505\loch\f31506   (res) => \{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("Response => ", res);
\par \hich\af31506\dbch\af31505\loch\f31506     document.write("<b>Response => </b>" + res);
\par \hich\af31506\dbch\af31505\loch\f31506   \},
\par \hich\af31506\dbch\af31505\loch\f31506   (err) => \{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log("error =>", err);
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506 );
\par \hich\af31506\dbch\af31505\loch\f31506 =====================\hich\af31506\dbch\af31505\loch\f31506 =================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of all.settled:-
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.allSettled = function(promises) \{
\par \hich\af31506\dbch\af31505\loch\f31506   let mappedPromises = promises.map((p) =>\hich\af31506\dbch\af31505\loch\f31506  \{
\par \hich\af31506\dbch\af31505\loch\f31506     return p
\par \hich\af31506\dbch\af31505\loch\f31506       .then((value) => \{
\par \hich\af31506\dbch\af31505\loch\f31506         return \{
\par \hich\af31506\dbch\af31505\loch\f31506           status: 'fulfilled',
\par \hich\af31506\dbch\af31505\loch\f31506           value
\par \hich\af31506\dbch\af31505\loch\f31506         \};
\par \hich\af31506\dbch\af31505\loch\f31506       \})
\par \hich\af31506\dbch\af31505\loch\f31506       .catch((reason) => \{
\par \hich\af31506\dbch\af31505\loch\f31506         return \{
\par \hich\af31506\dbch\af31505\loch\f31506           status: 'rejected',
\par \hich\af31506\dbch\af31505\loch\f31506           reason
\par \hich\af31506\dbch\af31505\loch\f31506         \};
\par \hich\af31506\dbch\af31505\loch\f31506       \});
\par \hich\af31506\dbch\af31505\loch\f31506   \});
\par \hich\af31506\dbch\af31505\loch\f31506   return Promise.all(mappedPromises);
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let promises = [
\par \hich\af31506\dbch\af31505\loch\f31506   Promise.resolve(2),
\par \hich\af31506\dbch\af31505\loch\f31506   Promise.reject('This is rejected'),
\par \hich\af31506\dbch\af31505\loch\f31506   new Promise((resolve, reject) => setTimeout(resolve, 400, 67)),
\par \hich\af31506\dbch\af31505\loch\f31506 ];
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.allSettled(promises).then((result) => console.log(result));\hich\af31506\dbch\af31505\loch\f31506  
\par \hich\af31506\dbch\af31505\loch\f31506 /*[\{
\par \hich\af31506\dbch\af31505\loch\f31506   status: "fulfilled",
\par \hich\af31506\dbch\af31505\loch\f31506   value: 2
\par \}\hich\af31506\dbch\af31505\loch\f31506 , \{
\par \hich\af31506\dbch\af31505\loch\f31506   reason: "This is rejected",
\par \hich\af31506\dbch\af31505\loch\f31506   status: "rejected"
\par \}\hich\af31506\dbch\af31505\loch\f31506 , \{
\par \hich\af31506\dbch\af31505\loch\f31506   status: "fulfilled",
\par \hich\af31506\dbch\af31505\loch\f31506   value: 67
\par \}\hich\af31506\dbch\af31505\loch\f31506 ]*/
\par \hich\af31506\dbch\af31505\loch\f31506 ==================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =========================================================

\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of promises.allsettled:
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.allSettled = function (arrayOfPromises = []) \{
\par \hich\af31506\dbch\af31505\loch\f31506   return new Promise(function promiseIterator(resolve, reject) \{
\par \hich\af31506\dbch\af31505\loch\f31506     let result = [];
\par \hich\af31506\dbch\af31505\loch\f31506     arrayOfPromises.forEach((item) => \{
\par \hich\af31506\dbch\af31505\loch\f31506       item
\par \hich\af31506\dbch\af31505\loch\f31506         .then((value) => \{
\par \hich\af31506\dbch\af31505\loch\f31506           result.push(\{ status: "fulfilled", value: value \});
\par \hich\af31506\dbch\af31505\loch\f31506           if (arrayOfPromises.length === result.length) resolve(result);
\par \hich\af31506\dbch\af31505\loch\f31506         \})
\par \hich\af31506\dbch\af31505\loch\f31506         .catch((err) => \{
\par \hich\af31506\dbch\af31505\loch\f31506       \hich\af31506\dbch\af31505\loch\f31506     result.push(\{ status: "rejected", reason: `$\{err\}` \});
\par \hich\af31506\dbch\af31505\loch\f31506           if (arrayOfPromises.length === result.length) resolve(result);
\par \hich\af31506\dbch\af31505\loch\f31506         \});
\par \hich\af31506\dbch\af31505\loch\f31506     \});
\par \hich\af31506\dbch\af31505\loch\f31506   \});
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let promises = [
\par \hich\af31506\dbch\af31505\loch\f31506   Promise.resolve(2),
\par \hich\af31506\dbch\af31505\loch\f31506   Promise.reject('This is rejected'),
\par \hich\af31506\dbch\af31505\loch\f31506   new Promise((re\hich\af31506\dbch\af31505\loch\f31506 solve, reject) => setTimeout(resolve, 400, 67)),
\par \hich\af31506\dbch\af31505\loch\f31506 ];
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.allSettled(promises).then((result) => console.log(result));
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of race:
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.letsBuildARace = function(arrayOfPromises)\{
\par \hich\af31506\dbch\af31505\loch\f31506 return new Promise((resolve, reject) => \{
\par \hich\af31506\dbch\af31505\loch\f31506 arrayOfPromises.forEach((promise) => \{
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.resolve(promise).then(resolve, reject);
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 For Example:
\par \hich\af31506\dbch\af31505\loch\f31506 var a = new Promise((resolve) => setTimeout(()=>\{resolve(3)\},200));
\par \hich\af31506\dbch\af31505\loch\f31506 var b = new Promise((resolve,reject)=>reject(9));
\par \hich\af31506\dbch\af31505\loch\f31506 var c= new Promise((resolve) => resolve(5));
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var d= Promise.letsBuildARace([a,b,c]);
\par \hich\af31506\dbch\af31505\loch\f31506 d.then(result=>console.log(result))
\par \hich\af31506\dbch\af31505\loch\f31506 ===\hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of Any:
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.letsBuildAnAny = function(arrayOfPromises)\{
\par \hich\af31506\dbch\af31505\loch\f31506 let errors = [];
\par \hich\af31506\dbch\af31505\loch\f31506 ret\hich\af31506\dbch\af31505\loch\f31506 urn new Promise((resolve, reject) => \{
\par \hich\af31506\dbch\af31505\loch\f31506 arrayOfPromises.forEach((promise, index)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506 Promise.resolve(promise)
\par \hich\af31506\dbch\af31505\loch\f31506 .then(resolve)
\par \hich\af31506\dbch\af31505\loch\f31506 .catch((error)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506 errors.push(error);
\par \hich\af31506\dbch\af31505\loch\f31506 if(errors.length == arrayOfPromises.length)
\par \hich\af31506\dbch\af31505\loch\f31506 reject(errors);
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 For Example:
\par \hich\af31506\dbch\af31505\loch\f31506 var a = new\hich\af31506\dbch\af31505\loch\f31506  Promise((resolve) => setTimeout(()=>\{resolve(3)\},200));
\par \hich\af31506\dbch\af31505\loch\f31506 var b = new Promise((resolve,reject)=>reject(9));
\par \hich\af31506\dbch\af31505\loch\f31506 var c= new Promise((resolve) => resolve(5));
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var d= Promise.letsBuildAnAny([a,b,c]);
\par \hich\af31506\dbch\af31505\loch\f31506 d.then(result=>console.log(result))
\par \hich\af31506\dbch\af31505\loch\f31506 ===========================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Rest Parameter in Array : 
\par \hich\af31506\dbch\af31505\loch\f31506 function addSum(a,b,c\hich\af31506\dbch\af31505\loch\f31506 , ...rest)\{ // ...rest indicating combination of those arguments which are left(rest).
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(...rest) //6,7
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(rest) //[6,7]
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(arguments) //ES5 //\{"0":2, "1":3, "2":4, "3":6, "4":7\}
\par \hich\af31506\dbch\af31505\loch\f31506   return a+b+c+rest[0]+rest[1];
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.l\hich\af31506\dbch\af31505\loch\f31506 og(addSum(2,3,4,6,7)) //22
\par \hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 //Spread Operator  in Array:
\par \hich\af31506\dbch\af31505\loch\f31506 function getNames(name1, name2, n\hich\af31506\dbch\af31505\loch\f31506 ame3)\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(name1,name2, name3);
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 var names =["priya", "riya", "supriya"]
\par \hich\af31506\dbch\af31505\loch\f31506 getNames(names[0], names[1], names[2]); //"priya" "riya" "supriya"
\par \hich\af31506\dbch\af31505\loch\f31506 getNames(...names) //spread operator here used to spread the individual arguments //best approach because\hich\af31506\dbch\af31505\loch\f31506 
 here we are passing all the arguments but we can use some of the arguments inside function without an error. Other approaches will gives an error to pass those arguments which are used in function.
\par \hich\af31506\dbch\af31505\loch\f31506 getNames(names)
\par \hich\af31506\dbch\af31505\loch\f31506 =========================================\hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Rest Spread in object: 
\par \hich\af31506\dbch\af31505\loch\f31506 var student =\{
\par \hich\af31506\dbch\af31505\loch\f31506   name: "priya",
\par \hich\af31506\dbch\af31505\loch\f31506   age : 100,
\par \hich\af31506\dbch\af31505\loch\f31506   hobbies : ["cooking", "dancing"]
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 //const age = studen\hich\af31506\dbch\af31505\loch\f31506 t.age; //earlier we like this
\par \hich\af31506\dbch\af31505\loch\f31506 //console.log(age) //10
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 //const \{age, ...rest\} = student; //using destructuring
\par \hich\af31506\dbch\af31505\loch\f31506 //console.log(age, rest) //100 \{"name": "priya", "hobbies":["cooking", "dancing"]\}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const \{...rest\} = student;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(rest) //\{"name": "priya", "age": 100, "hobbies":["cooking", "dancing"]\}
\par \hich\af31506\dbch\af31505\loch\f31506 =============================================================\hich\af31506\dbch\af31505\loch\f31506 ========================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 //spread operator in object: (Change the value of age)
\par \hich\af31506\dbch\af31505\loch\f31506 var student =\{
\par \hich\af31506\dbch\af31505\loch\f31506   name: "priya",
\par \hich\af31506\dbch\af31505\loch\f31506   age : 100,
\par \hich\af31506\dbch\af31505\loch\f31506   hobbies : ["cooking", "dancing"]
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var newStuden\hich\af31506\dbch\af31505\loch\f31506 t =\{
\par \hich\af31506\dbch\af31505\loch\f31506   ...student, //coping one object to another object
\par \hich\af31506\dbch\af31505\loch\f31506   age : 101
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(newStudent)
\par \hich\af31506\dbch\af31505\loch\f31506 =================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===
\par \hich\af31506\dbch\af31505\loch\f31506 Callback, Promise and Async/await :-
\par \hich\af31506\dbch\af31505\loch\f31506 const data = [ //array of object
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "priya", role: "software developer"\},
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "riya", role: "software developer"\},
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "supriya", role: "software developer"\}
\par \hich\af31506\dbch\af31505\loch\f31506 ];
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function getData()\{
\par \hich\af31506\dbch\af31505\loch\f31506    setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506    let output ="";
\par \hich\af31506\dbch\af31505\loch\f31506    data.forEach((item)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     output +=`<li> $\{item.name\}</li>`
\par \hich\af31506\dbch\af31505\loch\f31506    \})    
\par \hich\af31506\dbch\af31505\loch\f31506    document.body.innerHTML = output;
\par \hich\af31506\dbch\af31505\loch\f31506  \}, 1000)  //use 5000 instead of 1000 then we get a name of "dhanupriya".
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 function createData(dataInput)\{
\par \hich\af31506\dbch\af31505\loch\f31506 setTimeout(()=>\{data.push(dataInput)\}, 2000) 
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 createData(\{name: "dhanupriya", role: "software developer"\})
\par \hich\af31506\dbch\af31505\loch\f31506 getData()
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Callback:
\par \hich\af31506\dbch\af31505\loch\f31506 const data = [ //array of object
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "priya", role\hich\af31506\dbch\af31505\loch\f31506 : "software developer"\},
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "riya", role: "software developer"\},
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "supriya", role: "software developer"\}
\par \hich\af31506\dbch\af31505\loch\f31506 ];
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function getData()\{
\par \hich\af31506\dbch\af31505\loch\f31506    setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506    let output ="";
\par \hich\af31506\dbch\af31505\loch\f31506    data.forEach((item)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     output +=`<li> $\{item.name\}</li>`
\par \hich\af31506\dbch\af31505\loch\f31506    \})    
\par \hich\af31506\dbch\af31505\loch\f31506    document.body.innerHTML = output;
\par \hich\af31506\dbch\af31505\loch\f31506  \}, 1000)  
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 function createData(dataInput, callback)\{
\par \hich\af31506\dbch\af31505\loch\f31506    setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506         data.push(dataInput) 
\par \hich\af31506\dbch\af31505\loch\f31506         callback(); //getdata function will get call once we push the new dataInput
\par \hich\af31506\dbch\af31505\loch\f31506    \},2000) 
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 createData(\{name: "dhanupriya", role: "software developer"\}, getData) //we are passing getData function as a callback
\par \hich\af31506\dbch\af31505\loch\f31506 ========================================\hich\af31506\dbch\af31505\loch\f31506 ============================
\par \hich\af31506\dbch\af31505\loch\f31506 Promises:
\par \hich\af31506\dbch\af31505\loch\f31506 const data = [ //array of object
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "priya", role: "software developer"\},
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "riya", role: "software developer"\},
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "supriya", role: "software developer"\}
\par \hich\af31506\dbch\af31505\loch\f31506 ];
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function getData()\{
\par \hich\af31506\dbch\af31505\loch\f31506    setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506    let output ="";
\par \hich\af31506\dbch\af31505\loch\f31506    data.forEach((item)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     output +=`<li> $\{item.name\}</li>`
\par \hich\af31506\dbch\af31505\loch\f31506    \})    
\par \hich\af31506\dbch\af31505\loch\f31506    document.body.innerHTML = output;
\par \hich\af31506\dbch\af31505\loch\f31506  \}, 1000)  //use 5000 instead of 1000 then we get a name of "dhanupriya".
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 function createData(dataInput)\{
\par \hich\af31506\dbch\af31505\loch\f31506 return new Promis\hich\af31506\dbch\af31505\loch\f31506 e((resolve, reject)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506   setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506         data.push(dataInput);
\par \hich\af31506\dbch\af31505\loch\f31506         let error = false; //if trure then went to catch block
\par \hich\af31506\dbch\af31505\loch\f31506         if(!error) resolve();
\par \hich\af31506\dbch\af31505\loch\f31506         else reject("Error!!!!");
\par \hich\af31506\dbch\af31505\loch\f31506    \},2000) 
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \hich\af31506\dbch\af31505\loch\f31506    
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 createData(\{name: "dhanupriya", role: "software developer"\})
\par \hich\af31506\dbch\af31505\loch\f31506 .then(getData)
\par \hich\af31506\dbch\af31505\loch\f31506 .catch(err => console.log("Errors !"))
\par \hich\af31506\dbch\af31505\loch\f31506 ====================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Async/Await:
\par \hich\af31506\dbch\af31505\loch\f31506 const data = [ //array of object
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "priya", role: "s\hich\af31506\dbch\af31505\loch\f31506 oftware developer"\},
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "riya", role: "software developer"\},
\par \hich\af31506\dbch\af31505\loch\f31506   \{name: "supriya", role: "software developer"\}
\par \hich\af31506\dbch\af31505\loch\f31506 ];
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function getData()\{
\par \hich\af31506\dbch\af31505\loch\f31506    setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506    let output ="";
\par \hich\af31506\dbch\af31505\loch\f31506    data.forEach((item)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     output +=`<li> $\{item.name\}</li>`
\par \hich\af31506\dbch\af31505\loch\f31506    \})    
\par \hich\af31506\dbch\af31505\loch\f31506    d\hich\af31506\dbch\af31505\loch\f31506 ocument.body.innerHTML = output;
\par \hich\af31506\dbch\af31505\loch\f31506  \}, 1000)  //use 5000 instead of 1000 then we get a name of "dhanupriya".
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 function createData(dataInput)\{
\par \hich\af31506\dbch\af31505\loch\f31506 return new Promise((resolve, reject)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506   setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506         data.push(dataInput);
\par \hich\af31506\dbch\af31505\loch\f31506         let error = false; //if trure then went to catch block
\par \hich\af31506\dbch\af31505\loch\f31506         if(!error) resolve();
\par \hich\af31506\dbch\af31505\loch\f31506         else reject("Error!!!!");
\par \hich\af31506\dbch\af31505\loch\f31506    \},2000) 
\par \}\hich\af31506\dbch\af31505\loch\f31506 )   
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 async function start()\{ //using sync and await
\par \hich\af31506\dbch\af31505\loch\f31506 await createData(\{name: "dhanup\hich\af31506\dbch\af31505\loch\f31506 riya", role: "software developer"\});
\par \hich\af31506\dbch\af31505\loch\f31506 getData();
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 start();
\par \hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Callback:
\par \hich\af31506\dbch\af31505\loch\f31506 var sum = function(a\hich\af31506\dbch\af31505\loch\f31506 ,b,c)\{
\par \hich\af31506\dbch\af31505\loch\f31506   return\{
\par \hich\af31506\dbch\af31505\loch\f31506     sumOfTwo: function()\{return a+b\},
\par \hich\af31506\dbch\af31505\loch\f31506     sumOfThree:function()\{return a+b+c\}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var store = sum(2,3,4);
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(store)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(store.sumOfTwo())
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(store.sumOfThree())
\par --------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 var sum = function(a)\{
\par \hich\af31506\dbch\af31505\loch\f31506      var c=4;
\par \hich\af31506\dbch\af31505\loch\f31506      return function(b)\{
\par \hich\af31506\dbch\af31505\loch\f31506        return a+b+c;
\par \hich\af31506\dbch\af31505\loch\f31506      \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 var store = sum(2);
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(store)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(store(5))
\par \hich\af31506\dbch\af31505\loch\f31506 =========================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Call, apply and bind:
\par \hich\af31506\dbch\af31505\loch\f31506 var userDetails =\{
\par \hich\af31506\dbch\af31505\loch\f31506   name: "Priya",
\par \hich\af31506\dbch\af31505\loch\f31506   age: 100,
\par \hich\af31506\dbch\af31505\loch\f31506   role: "Software Developer",
\par \hich\af31506\dbch\af31505\loch\f31506   printDetail : function()\{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(this)// this representing userDetails \hich\af31506\dbch\af31505\loch\f31506 whole object 
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 userDetails.printDetail();
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var userDetails2 =\{
\par \hich\af31506\dbch\af31505\loch\f31506   name: "Riya",
\par \hich\af31506\dbch\af31505\loch\f31506   age: 101,
\par \hich\af31506\dbch\af31505\loch\f31506   role: "Software Developer"
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 userDetails.printDetail.call(userDetails2); //if i want line 6th "this" should point to userDetails2 then use call function.
\par -----------------------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 var userDetails =\{
\par \hich\af31506\dbch\af31505\loch\f31506   name: "Priya",
\par \hich\af31506\dbch\af31505\loch\f31506   age: 100,
\par \hich\af31506\dbch\af31505\loch\f31506   role: "Software Developer"
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 let printDetail =  function()\{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(this.name)
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 printDetail.call(userDetails); // if function is independented of object.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var userDetails2 =\{
\par \hich\af31506\dbch\af31505\loch\f31506   name: "Riya",
\par \hich\af31506\dbch\af31505\loch\f31506   age: 101,
\par \hich\af31506\dbch\af31505\loch\f31506   role: "Software Developer"
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 printDetail.call(userDetails2); 
\par --------------------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 var userDetails =\{
\par \hich\af31506\dbch\af31505\loch\f31506   name: "Priya",
\par \hich\af31506\dbch\af31505\loch\f31506   age: 100,
\par \hich\af31506\dbch\af31505\loch\f31506   role: "Software Developer"
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 let printDetail =  function(country)\{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(this.name+" "+country)
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 printDetail.call(userDetails, "India"); // if function is independented of object.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 va\hich\af31506\dbch\af31505\loch\f31506 r userDetails2 =\{
\par \hich\af31506\dbch\af31505\loch\f31506   name: "Riya",
\par \hich\af31506\dbch\af31505\loch\f31506   age: 101,
\par \hich\af31506\dbch\af31505\loch\f31506   role: "Software Developer"
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 printDetail.call(userDetails2, "India"); 
\par \hich\af31506\dbch\af31505\loch\f31506 printDetail.apply(userDetails2, ["India"]); 
\par \hich\af31506\dbch\af31505\loch\f31506 let bindfunc= printDetail.bind(userDetails2, "India"); //creating a copy and invoke whenever require //don't call the diectly here like call function
\par \hich\af31506\dbch\af31505\loch\f31506 bindfunc();
\par \hich\af31506\dbch\af31505\loch\f31506 ==============================================================================================\hich\af31506\dbch\af31505\loch\f31506 ==========================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Foreach:
\par \hich\af31506\dbch\af31505\loch\f31506 const Data=[
\par \{\hich\af31506\dbch\af31505\loch\f31506 name:"Google", category:"Product Based"\},
\par \{\hich\af31506\dbch\af31505\loch\f31506 name:"Accenture", category:"service Based"\},
\par \{\hich\af31506\dbch\af31505\loch\f31506 name:"Amazon", category:"Product Based"\}
\par \hich\af31506\dbch\af31505\loch\f31506 ];
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 for(let i=0; i<Data.leng\hich\af31506\dbch\af31505\loch\f31506 th; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(Data[i])
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 //foreach is HOF which take callback 
\par \hich\af31506\dbch\af31505\loch\f31506 Data.forEach((item)=>\{ console.log(item) \})
\par \hich\af31506\dbch\af31505\loch\f31506 ==========================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================
\par \hich\af31506\dbch\af31505\loch\f31506 Filter:
\par \hich\af31506\dbch\af31505\loch\f31506 const Age=[1,2,3,4,5,6,7,8,9,0]
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=0;i<Age.length;i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506   if(Age[i]>5)\{
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(Age[i])
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const UpdatedAge= Age.filter(function(item)\{
\par \hich\af31506\dbch\af31505\loch\f31506   if(item>5)\{
\par \hich\af31506\dbch\af31505\loch\f31506     return true;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(UpdatedAge)
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const UpdatedAge= Age.filter((item)=>(item>5))
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(UpdatedAge)
\par \hich\af31506\dbch\af31505\loch\f31506 ================================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =====
\par \hich\af31506\dbch\af31505\loch\f31506 sort:-
\par \hich\af31506\dbch\af31505\loch\f31506 const Data =[11,44,2,66,3,7,22,3]
\par \hich\af31506\dbch\af31505\loch\f31506 const sorted= Data.sort((a,b)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506   if(a>b) return 1;
\par \hich\af31506\dbch\af31505\loch\f31506   else return -1;
\par \}\hich\af31506\dbch\af31505\loch\f31506 )
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sorted) //prefer for object
\par \hich\af31506\dbch\af31505\loch\f31506 //a<b //[66,44,22,11,7,3,3,2]
\par \hich\af31506\dbch\af31505\loch\f31506 //a>b //[2,3,3,7,11,22,44,66]
\par 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const sorted1= Data.sort((a,b)=>b\hich\af31506\dbch\af31505\loch\f31506 -a)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sorted1) //prefer for arrays
\par \hich\af31506\dbch\af31505\loch\f31506 //b-a //[66,44,22,11,7,3,3,2]
\par \hich\af31506\dbch\af31505\loch\f31506 //a-b //[2,3,3,7,11,22,44,66]
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===============
\par \hich\af31506\dbch\af31505\loch\f31506 Reduce:
\par \hich\af31506\dbch\af31505\loch\f31506 const Data =[11,44,2,66,3,7,22,3]
\par \hich\af31506\dbch\af31505\loch\f31506 var updatedData=0;
\par \hich\af31506\dbch\af31505\loch\f31506 for(var i=0; i<Data.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506   updatedData=updatedData+Data[i]
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(updatedData)
\par ----------------
\par \hich\af31506\dbch\af31505\loch\f31506 const updated= Data.reduce((acc, item)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506   return acc+item
\par \}\hich\af31506\dbch\af31505\loch\f31506 ,0)
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(updated)
\par \hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Pr\hich\af31506\dbch\af31505\loch\f31506 otoType: If we can inherit the property of the one class to other class called as Inheritence. 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const objName = \{
\par \hich\af31506\dbch\af31505\loch\f31506  name : "priya",
\par \hich\af31506\dbch\af31505\loch\f31506  getName : function()\{
\par \hich\af31506\dbch\af31505\loch\f31506    return this.name; //wanted to access above name inside block so we used "this"
\par \hich\af31506\dbch\af31505\loch\f31506  \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log("1\hich\af31506\dbch\af31505\loch\f31506 ",objName.getName()); 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const objState = \{
\par \hich\af31506\dbch\af31505\loch\f31506   //name: "riya",
\par \hich\af31506\dbch\af31505\loch\f31506   state : "pune",
\par \hich\af31506\dbch\af31505\loch\f31506   __proto__ : objName
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log("2",objState.getName()); //if will find in current object, if not available then it move to upper object continuously. If still not found the\hich\af31506\dbch\af31505\loch\f31506 
n it will give undefined.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const objCountry = \{
\par \hich\af31506\dbch\af31505\loch\f31506   name: "supriya",
\par \hich\af31506\dbch\af31505\loch\f31506   country : "india",
\par \hich\af31506\dbch\af31505\loch\f31506   __proto__ : objState
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log("3", objCountry.getName() ,objCountry.state)
\par -----------------------------------------------------------------
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Array.prototype.convertToObject = function()\{
\par \hich\af31506\dbch\af31505\loch\f31506   let newObj =\{\}
\par \hich\af31506\dbch\af31505\loch\f31506   this.forEach( ele =>\{
\par \hich\af31506\dbch\af31505\loch\f31506             newObj[ele]= ele;
\par \hich\af31506\dbch\af31505\loch\f31506         \}      
\par \hich\af31506\dbch\af31505\loch\f31506   )
\par \hich\af31506\dbch\af31505\loch\f31506   return newObj;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const arr =["priya"];
\par \hich\af31506\dbch\af31505\loch\f31506 console.log\hich\af31506\dbch\af31505\loch\f31506 (arr.convertToObject()); //array to object conversion with prototype
\par ------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function myProtoType(name)\{
\par \hich\af31506\dbch\af31505\loch\f31506  return this.name=name;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 myProtoType.prototype=objName;
\par \hich\af31506\dbch\af31505\loch\f31506 const myproto = myProtoType("priya"\hich\af31506\dbch\af31505\loch\f31506 )
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(myproto);
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(myproto.getName());
\par \hich\af31506\dbch\af31505\loch\f31506 ==========================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Set: It contains only unique \hich\af31506\dbch\af31505\loch\f31506 values. Can iterate.
\par \hich\af31506\dbch\af31505\loch\f31506 let arr =[1,2,3]
\par \hich\af31506\dbch\af31505\loch\f31506 let obj = new Set(arr) //set takesarray, string, object etc
\par \hich\af31506\dbch\af31505\loch\f31506 obj.add(4)
\par \hich\af31506\dbch\af31505\loch\f31506 obj.delete(3)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(obj)
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 var obj1=\{name:"priya"\}
\par \hich\af31506\dbch\af31505\loch\f31506 obj.add(obj1)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(obj)
\par \hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Map: store in key value pair. Can iterate.
\par \hich\af31506\dbch\af31505\loch\f31506 let myMap = new Map([["a1", "priya"],["a2","ri\hich\af31506\dbch\af31505\loch\f31506 ya"]])
\par \hich\af31506\dbch\af31505\loch\f31506 myMap.set("a2","supriya")
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(myMap.get("a2"))// will get last value which we will assign
\par \hich\af31506\dbch\af31505\loch\f31506 for(let [key,value] of myMap)\{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log(`keys $\{key\}, value $\{value\}`)
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 =========================================================================\hich\af31506\dbch\af31505\loch\f31506 ==============================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 WeakSet: only store object, can't iterate with for/foreach
\par \hich\af31506\dbch\af31505\loch\f31506 let ws = new WeakSet()
\par \hich\af31506\dbch\af31505\loch\f31506 const obj=\{"name":"priya"\}
\par \hich\af31506\dbch\af31505\loch\f31506 ws.add(obj)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(ws.has(obj));
\par \hich\af31506\dbch\af31505\loch\f31506 WeakMap: It's \hich\af31506\dbch\af31505\loch\f31506 similar to WeakSet where can't able to iterate and only stores an object
\par \hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Hoisting : Its r\hich\af31506\dbch\af31505\loch\f31506 elated to memory management.
\par \hich\af31506\dbch\af31505\loch\f31506 Global execution context having 2 component. In memory componenet variable and functions will store. Variable store with undefined and function store with prototype
\par \hich\af31506\dbch\af31505\loch\f31506 of function. Var or functions will push to Callstack and then \hich\af31506\dbch\af31505\loch\f31506 pop.
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 2 ways of Currying function with closures:
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506 *****Using Normal Function******
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506 function add(a)\{
\par \hich\af31506\dbch\af31505\loch\f31506   return function(b)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(b) return add(a+b);
\par \hich\af31506\dbch\af31505\loch\f31506     return a;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log('Sum :', add(1)(2)(3)(4)(5)(6)(7)(8)()) //"Sum :", 36
\par 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 *****Using Arrow Function******
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506 function sum(num1) \{
\par \hich\af31506\dbch\af31505\loch\f31506         re\hich\af31506\dbch\af31505\loch\f31506 turn (num2) => \{
\par \hich\af31506\dbch\af31505\loch\f31506             if(!num2) \{
\par \hich\af31506\dbch\af31505\loch\f31506                 return num1;
\par \hich\af31506\dbch\af31505\loch\f31506             \}
\par \hich\af31506\dbch\af31505\loch\f31506             return sum(num1 + num2);
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log('Sum :', sum(1)(2)(3)(4)(5)(6)(7)(8)()) //"Sum :", 36
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 *****Using Arrow ShortHand Function******
\par \hich\af31506\dbch\af31505\loch\f31506 const sum \hich\af31506\dbch\af31505\loch\f31506 = (a) => (b) => (c) => (d) => a+b+c+d
\par \hich\af31506\dbch\af31505\loch\f31506 console.log('Sum :', sum(1)(2)(3)(4))
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 *****Using Partial Function******
\par \hich\af31506\dbch\af31505\loch\f31506 function sum(...a)\{
\par \hich\af31506\dbch\af31505\loch\f31506   return function(...b)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(b?.length)\{
\par \hich\af31506\dbch\af31505\loch\f31506       return sum([...a,...b].reduce((acc, curr)=>acc+curr,0))
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     return a;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log('Sum :', sum(1,2,3)(4,5)(6,7,8,9)()) //"Sum :", 36
\par \hich\af31506\dbch\af31505\loch\f31506 =========================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ============================================================
\par \hich\af31506\dbch\af31505\loch\f31506 How to Remove All Falsy Values from an Array in JavaScript:
\par \hich\af31506\dbch\af31505\loch\f31506 *************Using Filter Auto Coercion*************
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 [1, 2, 'b', 0, \{\}, '', NaN, 3, undefined, null, 5].filter(a => a);
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 *************\hich\af31506\dbch\af31505\loch\f31506 Using !!*************
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 [1, 2, 'b', 0, \{\}, '', NaN, 3, undefined, null, 5].filter(a => !!a);
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 *************Using Boolean*************
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 [1, 2, 'b', 0, \{\}, '', NaN, 3, undefined, null, 5].filter(a => Boolean(a));
\par \hich\af31506\dbch\af31505\loch\f31506  
\par \hich\af31506\dbch\af31505\loch\f31506 *************Using Boolean directly*********\hich\af31506\dbch\af31505\loch\f31506 ****
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506 [1, 2, 'b', 0, \{\}, '', NaN, 3, undefined, null, 5].filter(Boolean); 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 //This works because Boolean itself is a function, and the arguments filter supplies are passed directly to it.
\par \hich\af31506\dbch\af31505\loch\f31506 //Boolean() is also a function that returns truthy when true and falsy when false!
\par \hich\af31506\dbch\af31505\loch\f31506 ========================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Memo\hich\af31506\dbch\af31505\loch\f31506  Function:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ********************Memoizing functions**********************
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506 const add = (n) => (n + 10);
\par \hich\af31506\dbch\af31505\loch\f31506 add(9);
\par \hich\af31506\dbch\af31505\loch\f31506 // a simple memoized function to add something
\par \hich\af31506\dbch\af31505\loch\f31506 const memoizedAdd = () => \{
\par \hich\af31506\dbch\af31505\loch\f31506   let cache = \{\};
\par \tab \hich\af31506\dbch\af31505\loch\f31506 return (n) => \{
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 if (n in cache) \{
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 console.l\hich\af31506\dbch\af31505\loch\f31506 og('Fetching from cache');
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return cache[n];
\par \tab \tab \}
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 else \{
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 console.log('Calculating result');
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 let result = n + 10;
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 cache[n] = result;
\par \tab \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return result;
\par \tab \tab \}
\par \tab \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 // returned function from memoizedAdd
\par \hich\af31506\dbch\af31505\loch\f31506 const newAdd = memoizedAdd(); 
\par \hich\af31506\dbch\af31505\loch\f31506 console.time(); \hich\af31506\dbch\af31505\loch\f31506 console.log(newAdd(9)); console.timeEnd();// calculated
\par \hich\af31506\dbch\af31505\loch\f31506 console.time(); console.log(newAdd(9)); console.timeEnd();\tab // cached
\par \hich\af31506\dbch\af31505\loch\f31506 console.time(); console.log(newAdd(9)); console.timeEnd();\tab // cached
\par \hich\af31506\dbch\af31505\loch\f31506 //output:
\par \hich\af31506\dbch\af31505\loch\f31506 //Calculating result    19    default: 0.38427734375 ms
\par \hich\af31506\dbch\af31505\loch\f31506 //Fetching from cache   19    default: 0.30810546875 ms
\par \hich\af31506\dbch\af31505\loch\f31506 //Fetching from cache   19    default: 0.27612304687 ms
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ********************Memoizing recursive functions**********************
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506 // a simple \hich\af31506\dbch\af31505\loch\f31506 pure function to get a value adding 10
\par \hich\af31506\dbch\af31505\loch\f31506 const add = (n) => (n + 10);
\par \hich\af31506\dbch\af31505\loch\f31506 // a simple memoize function that takes in a function and returns a memoized function
\par \hich\af31506\dbch\af31505\loch\f31506 const memoize = (fn) => \{
\par \hich\af31506\dbch\af31505\loch\f31506   let cache = \{\};
\par \hich\af31506\dbch\af31505\loch\f31506   return (...args) => \{
\par \hich\af31506\dbch\af31505\loch\f31506     let n = args[0];  // just taki\hich\af31506\dbch\af31505\loch\f31506 ng one argument here
\par \hich\af31506\dbch\af31505\loch\f31506     if (n in cache) \{
\par \hich\af31506\dbch\af31505\loch\f31506       console.log('Fetching from cache');
\par \hich\af31506\dbch\af31505\loch\f31506       return cache[n];
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     else \{
\par \hich\af31506\dbch\af31505\loch\f31506       console.log('Calculating result');
\par \hich\af31506\dbch\af31505\loch\f31506       let result = fn(n);
\par \hich\af31506\dbch\af31505\loch\f31506       cache[n] = result;
\par \hich\af31506\dbch\af31505\loch\f31506       return result;
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 // cre\hich\af31506\dbch\af31505\loch\f31506 ating a memoized function for the 'add' pure function
\par \hich\af31506\dbch\af31505\loch\f31506 const memoizedAdd = memoize(add);
\par \hich\af31506\dbch\af31505\loch\f31506 console.time(); console.log(memoizedAdd(3)); console.timeEnd();// calculated
\par \hich\af31506\dbch\af31505\loch\f31506 console.time(); console.log(memoizedAdd(3)); console.timeEnd();\tab // cached
\par \hich\af31506\dbch\af31505\loch\f31506 console.time(); console.log(memoizedAdd(3)); console.timeEnd();\tab // cached
\par \hich\af31506\dbch\af31505\loch\f31506 //output:
\par \hich\af31506\dbch\af31505\loch\f31506 //Calculating result     13      default: 0.45068359375 ms
\par \hich\af31506\dbch\af31505\loch\f31506 //Fetching from cache    13      defaul\hich\af31506\dbch\af31505\loch\f31506 t: 0.16674804687 ms
\par \hich\af31506\dbch\af31505\loch\f31506 //Fetching from cache    13      default: 0.161865234375 ms
\par \hich\af31506\dbch\af31505\loch\f31506 ========================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 *******\hich\af31506\dbch\af31505\loch\f31506 **************Using Custom function with Recursion*****************
\par \hich\af31506\dbch\af31505\loch\f31506 const age=[1,2,
\par \hich\af31506\dbch\af31505\loch\f31506            [12,23,[75,34,[2,34]],[32,45]],
\par \hich\af31506\dbch\af31505\loch\f31506            [3,456],
\par \hich\af31506\dbch\af31505\loch\f31506            [56,[5]]]
\par \hich\af31506\dbch\af31505\loch\f31506 var result=[]
\par \hich\af31506\dbch\af31505\loch\f31506 function flattenArray(inputArray)
\par \{
\par \hich\af31506\dbch\af31505\loch\f31506   inputArray.map((value)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(Arr\hich\af31506\dbch\af31505\loch\f31506 ay.isArray(value))
\par \hich\af31506\dbch\af31505\loch\f31506     \{ 
\par \hich\af31506\dbch\af31505\loch\f31506       flattenArray(value)
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     else\{
\par \hich\af31506\dbch\af31505\loch\f31506       result.push(value)
\par \hich\af31506\dbch\af31505\loch\f31506     \}\})
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506 flattenArray(age)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(result) ////[1,2,12,23,75,34,2,34,32,45,3,456,56,5]
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 *********************Using One Line Arrow function*****************
\par \hich\af31506\dbch\af31505\loch\f31506 var result=[]
\par \hich\af31506\dbch\af31505\loch\f31506 const flattenArray = (inputArray) => \{
\par \hich\af31506\dbch\af31505\loch\f31506   inputArray.map((value)=> Array.isArray(value) ?  flattenArray(value) :  result.push(value))
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 flattenArray(age)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(result) //[1,2,12,23,75,34,2,34,32,45,3,456,56,5]
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 *********************Using Flat*****************
\par \hich\af31506\dbch\af31505\loch\f31506 const age=[1,2,
\par \hich\af31506\dbch\af31505\loch\f31506            [12,23,[75,34,[2,34]],[32,45]],
\par \hich\af31506\dbch\af31505\loch\f31506            [3,456],
\par \hich\af31506\dbch\af31505\loch\f31506            [56,[5]]]
\par \hich\af31506\dbch\af31505\loch\f31506 var updatedArr= age.flat(Infinity);
\par \hich\af31506\dbch\af31505\loch\f31506 console.\hich\af31506\dbch\af31505\loch\f31506 log(updatedArr) //[1,2,12,23,75,34,2,34,32,45,3,456,56,5]
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506 *********************Using Reducer****************
\par \hich\af31506\dbch\af31505\loch\f31506 function flatDeep(arr, d = 1) \{
\par \hich\af31506\dbch\af31505\loch\f31506    return d > 0 ? arr.reduce((acc, val) => 
\par \hich\af31506\dbch\af31505\loch\f31506                              acc.concat(Array.isArray(val) ? flatDee\hich\af31506\dbch\af31505\loch\f31506 p(val, d - 1) : val), [])
\par \hich\af31506\dbch\af31505\loch\f31506                 : arr.slice();
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(flatDeep(arr, Infinity)) //[1,2,12,23,75,34,2,34,32,45,3,456,56,5]
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ==================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Regular Expression(Regex):
\par \hich\af31506\dbch\af31505\loch\f31506 A regular expression is a group of characters or symbols which is used to find a specific pattern in a text.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 Regular expressions are normally case-sensitive so the regular expre\hich\af31506\dbch\af31505\loch\f31506 ssion The would not match the string the
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Multiple functions:
\par \hich\af31506\dbch\af31505\loch\f31506 var arr = [];
\par \hich\af31506\dbch\af31505\loch\f31506 const checkSort =(a)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506   if(!arr.includes(a) && Number.isInteger(a))\{
\par \hich\af31506\dbch\af31505\loch\f31506     arr.push(a)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return console.log(arr.sort((a,b)=>a-b));
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 checkSort(5);
\par \hich\af31506\dbch\af31505\loch\f31506 checkSort(4);
\par \hich\af31506\dbch\af31505\loch\f31506 checkSort(2);
\par \hich\af31506\dbch\af31505\loch\f31506 checkSort("abc");
\par \hich\af31506\dbch\af31505\loch\f31506 checkSort("44");
\par \hich\af31506\dbch\af31505\loch\f31506 checkSort(-44);
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 //output: [-44,2,4,5]
\par \hich\af31506\dbch\af31505\loch\f31506 ===\hich\af31506\dbch\af31505\loch\f31506 ===============================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 [..."priya"]
\par \hich\af31506\dbch\af31505\loch\f31506 //\~['p', 'r', 'i', 'y', 'a']
\par \hich\af31506\dbch\af31505\loch\f31506 "priya".split('')
\par \hich\af31506\dbch\af31505\loch\f31506 //\~['p', 'r', 'i', 'y', 'a']
\par \hich\af31506\dbch\af31505\loch\f31506 =======\hich\af31506\dbch\af31505\loch\f31506 ============================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Deep Copy and Shallow Copy:
\par \hich\af31506\dbch\af31505\loch\f31506 A deep copy means that "all of the values of the new variable" are copi\hich\af31506\dbch\af31505\loch\f31506 
ed and disconnected from the original variable. It makes a copy of all the members of X, allocates different memory location for Y and then assigns the copied members to Y to achieve deep copy. In this way, if X vanishes Y is still valid in the memory.

\par \hich\af31506\dbch\af31505\loch\f31506 A s\hich\af31506\dbch\af31505\loch\f31506 
hallow copy means that certain (sub-)values are still connected to the original variable. It is primarily utilized for copying One Dimensional array elements, where it only copies the elements present at the first level.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 A deep copying means that value of\hich\af31506\dbch\af31505\loch\f31506  the new variable is disconnected from the original variable 
\par \hich\af31506\dbch\af31505\loch\f31506 while a shallow copy means that some values are still connected to the original variable.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 addresses of X and Y will be the same i.e. they will be pointing to the same memory location.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 To copy an object in JavaScript, you have three options. Both spread (...) and Object.assign() perform a shallow copy while the JSON methods carry a deep copy.
\par \hich\af31506\dbch\af31505\loch\f31506 \hich\f31506 --->Assignment operator \'93\loch\f31506 \hich\f31506 =\'94
\par \hich\af31506\dbch\af31505\loch\f31506 --->Use the spread (...) syntax
\par \hich\af31506\dbch\af31505\loch\f31506 --->Use the Object.assign() method
\par -\hich\af31506\dbch\af31505\loch\f31506 
-->Use the JSON.stringify() and JSON.parse() methods --where the stringify() method converts a particular JavaScript object to a string, and then the parse() method performs the parsing operation and returns an object.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 For a primitive value, you just simp\hich\af31506\dbch\af31505\loch\f31506 ly use a simple assignment:The important takeaway here is that you can quickly copy a primitive data type\hich\f31506 \rquote \loch\f31506 
s exact value 
\par \hich\af31506\dbch\af31505\loch\f31506 in a separate memory space by creating and assigning another variable to the variable being copied. Take note of how it is instantiated\hich\af31506\dbch\af31505\loch\f31506  \hich\f31506 \emdash \loch\f31506 
 const will not 
\par \hich\af31506\dbch\af31505\loch\f31506 allow later changes.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let counter = 1;
\par \hich\af31506\dbch\af31505\loch\f31506 let copiedCounter = counter;
\par \hich\af31506\dbch\af31505\loch\f31506 copiedCounter = 2; //And when you change the value of the copied variable, the value of the original remains the same.
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(counter); 
\par \hich\af31506\dbch\af31505\loch\f31506 Output: 1
\par 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 However, if you\hich\af31506\dbch\af31505\loch\f31506  use the assignment operator for a reference value, it will not copy the value. Instead, both variables will reference the same object in the memory:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506  JS objects (as non-primitive data types) differ because they have reference values and those values are \hich\af31506\dbch\af31505\loch\f31506 mutable. This means they share a memory address when shallow copied.

\par \hich\af31506\dbch\af31505\loch\f31506 =========================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Airbus Interview \hich\af31506\dbch\af31505\loch\f31506 Question:
\par \hich\af31506\dbch\af31505\loch\f31506 function countOccurance(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let map =\{\}, sortedArr = arr.sort((a,b)=>a-b);
\par \hich\af31506\dbch\af31505\loch\f31506   for(var item of sortedArr)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(map[item])\{
\par \hich\af31506\dbch\af31505\loch\f31506         map[item]++
\par \hich\af31506\dbch\af31505\loch\f31506     \}else\{
\par \hich\af31506\dbch\af31505\loch\f31506         map[item] = 1; 
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return map;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(countOccurance([1, 4, 91, 21, 91, 0, 32, 4, 11, 3, 54, 34, 21]))
\par --------------------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function countOccurance(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506  let map =\{\}, sortedArr = arr.sort((a,b)=>a-b);
\par \hich\af31506\dbch\af31505\loch\f31506   for(var item of so\hich\af31506\dbch\af31505\loch\f31506 rtedArr)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(!(item in map))\{ map[item] = 0\}
\par \hich\af31506\dbch\af31505\loch\f31506     map[item]++;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return map;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(countOccurance([1, 4, 91, 21, 91, 0, 32, 4, 11, 3, 54, 34, 21]))
\par -------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function countOccurance(a\hich\af31506\dbch\af31505\loch\f31506 rr)\{
\par \hich\af31506\dbch\af31505\loch\f31506  let map =\{\}, sortedArr = arr.sort((a,b)=>a-b);
\par \hich\af31506\dbch\af31505\loch\f31506   for(var item of sortedArr)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(map[item] ==null)\{ map[item] = 0\}
\par \hich\af31506\dbch\af31505\loch\f31506     map[item]++;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return map;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(countOccurance([1, 4, 91, 21, 91, 0, 32, 4, 11, 3, 54, 34, 21]))
\par -------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function countOccurance(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506  let map =\{\}, sortedArr = arr.sort((a,b)=>a-b);
\par \hich\af31506\dbch\af31505\loch\f31506   for(var item of sortedArr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   if(map.hasOwnProperty(item))\{
\par \hich\af31506\dbch\af31505\loch\f31506     map[item] = map[item] + 1
\par \hich\af31506\dbch\af31505\loch\f31506   \}else\{
\par \hich\af31506\dbch\af31505\loch\f31506     map[item] = 1; 
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return map;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(countOccurance([1, 4, 91, 21, 91, 0, 32, 4, 11, 3, 54, 34, 21]))
\par -------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function countOccurance(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let map =\{\}, sortedArr = arr.sort((\hich\af31506\dbch\af31505\loch\f31506 a,b)=>a-b); 
\par \hich\af31506\dbch\af31505\loch\f31506   for(var item of sortedArr)\{
\par \hich\af31506\dbch\af31505\loch\f31506    map[item] = map[item]+1 || 1
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return map
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(countOccurance([1, 4, 91, 21, 91, 0, 32, 4, 11, 3, 54, 34, 21]))
\par -------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function countOcc\hich\af31506\dbch\af31505\loch\f31506 urance(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let map =\{\}, sortedArr = arr.sort((a,b)=>a-b); //[0,1,3,4,4,11,21,21,32,34,54,91,91]
\par \hich\af31506\dbch\af31505\loch\f31506   for(var item of sortedArr)\{
\par \hich\af31506\dbch\af31505\loch\f31506    map[item] = (map[item] || 0) + 1
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return map
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(countOccurance([1, 4, 91, 21, 91, 0, 32, 4, 11, 3, 54, 34, \hich\af31506\dbch\af31505\loch\f31506 21]))
\par -------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function countOccurance(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let map =\{\}, sortedArr = arr.sort((a,b)=>a-b);
\par \hich\af31506\dbch\af31505\loch\f31506   for(var item of sortedArr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   if(map[item])\{
\par \hich\af31506\dbch\af31505\loch\f31506  map[item] = map[item] + 1
\par \hich\af31506\dbch\af31505\loch\f31506   \}else\{
\par \hich\af31506\dbch\af31505\loch\f31506   map[item] = 1; 
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return map;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(countOccurance([1, 4, 91, 21, 91, 0, 32, 4, 11, 3, 54, 34, 21]))
\par -------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function countOccurance(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let map =\{\}, sortedArr = arr.sort((a,\hich\af31506\dbch\af31505\loch\f31506 b)=>a-b); 
\par \hich\af31506\dbch\af31505\loch\f31506   for (var i=0; i<sortedArr.length; i++) 
\par \hich\af31506\dbch\af31505\loch\f31506    \{
\par \hich\af31506\dbch\af31505\loch\f31506    map[sortedArr[i]] = map[sortedArr[i]] ? map[sortedArr[i]]+1 : 1; 
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506   return map
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(countOccurance([1, 4, 91, 21, 91, 0, 32, 4, 11, 3, 54, 34, 21]))
\par -------------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 var frequencySort = function(nums) \{
\par \hich\af31506\dbch\af31505\loch\f31506   const hash=\{\}
\par \hich\af31506\dbch\af31505\loch\f31506     for(let item of nums)\{
\par \hich\af31506\dbch\af31505\loch\f31506       hash[item] 
\par \hich\af31506\dbch\af31505\loch\f31506           ?hash[item]++
\par \hich\af31506\dbch\af31505\loch\f31506           :hash[item]=1
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506  return hash    
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(frequencySort([1,1,2,2,2,3]))
\par --------------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 var frequencySort = function(nums) \{
\par \hich\af31506\dbch\af31505\loch\f31506     let map = new Map();
\par \hich\af31506\dbch\af31505\loch\f31506     for (const i of nums) \{
\par \hich\af31506\dbch\af31505\loch\f31506         if (map.has(i)) \{
\par \hich\af31506\dbch\af31505\loch\f31506             map.set(i, map.get(i) +\hich\af31506\dbch\af31505\loch\f31506  1);
\par \hich\af31506\dbch\af31505\loch\f31506         \} else \{
\par \hich\af31506\dbch\af31505\loch\f31506             map.set(i, 1);
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506     console.log(map);
\par \hich\af31506\dbch\af31505\loch\f31506     return map;
\par 
\par \}\hich\af31506\dbch\af31505\loch\f31506 ;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(frequencySort([1,1,2,2,2,3]))
\par \hich\af31506\dbch\af31505\loch\f31506 ===========================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===============================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Anagram:O(N) 
\par \hich\af31506\dbch\af31505\loch\f31506 let NO_OF_CHARS = 256;
\par \hich\af31506\dbch\af31505\loch\f31506 function areAnagram(str1, str2)
\par \{
\par \tab \hich\af31506\dbch\af31505\loch\f31506 // Create a count array and initialize all values as 0
\par \tab \hich\af31506\dbch\af31505\loch\f31506 let count = new Array(NO_OF_CHARS).fill(0);
\par \tab \hich\af31506\dbch\af31505\loch\f31506 let i;
\par 
\par \hich\af31506\dbch\af31505\loch\f31506   if (str1.\hich\af31506\dbch\af31505\loch\f31506 length != str2.length) return false;
\par \tab \hich\af31506\dbch\af31505\loch\f31506 for(i = 0; i < str1.length; i++)
\par \tab \{
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506   count[str1[i].charCodeAt(0)]++;
\par \hich\af31506\dbch\af31505\loch\f31506       count[str2[i].charCodeAt(0)]--;
\par \tab \}
\par 
\par \tab \hich\af31506\dbch\af31505\loch\f31506 // See if there is any non-zero value in count array
\par \tab \hich\af31506\dbch\af31505\loch\f31506 for(i = 0; i < NO_OF_CHARS; i++)
\par \tab \hich\af31506\dbch\af31505\loch\f31506 if (count[i] != 0)
\par \tab \{
\par \tab \tab \hich\af31506\dbch\af31505\loch\f31506 return false;
\par \tab \}
\par \tab \hich\af31506\dbch\af31505\loch\f31506 return true;
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 // Driver code
\par \hich\af31506\dbch\af31505\loch\f31506 let str1 =
\par \hich\af31506\dbch\af31505\loch\f31506 "priya".split("");
\par \hich\af31506\dbch\af31505\loch\f31506 let str2 =
\par \hich\af31506\dbch\af31505\loch\f31506 "riyap".split("");
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 // Function call
\par \hich\af31506\dbch\af31505\loch\f31506 if (areAnagram(s\hich\af31506\dbch\af31505\loch\f31506 tr1, str2))
\par \tab \hich\af31506\dbch\af31505\loch\f31506 document.write(
\par \tab \hich\af31506\dbch\af31505\loch\f31506 "The two strings are " +
\par \tab \hich\af31506\dbch\af31505\loch\f31506 "anagram of each other");
\par \hich\af31506\dbch\af31505\loch\f31506 else
\par \tab \hich\af31506\dbch\af31505\loch\f31506 document.write(
\par \tab \hich\af31506\dbch\af31505\loch\f31506 "The two strings are " +
\par \tab \hich\af31506\dbch\af31505\loch\f31506 "not anagram of each other");
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ========================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 // How can you make a linkedlist nodes in javascript and 
\par \hich\af31506\dbch\af31505\loch\f31506 // hpw to check linkedlist is\hich\af31506\dbch\af31505\loch\f31506  cyclic or not.
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 class LinkedList \{
\par \hich\af31506\dbch\af31505\loch\f31506   constructor(data)\{
\par \hich\af31506\dbch\af31505\loch\f31506     this.data = data;
\par \hich\af31506\dbch\af31505\loch\f31506     this.next = null;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 let head = new LinkedList(10);
\par \hich\af31506\dbch\af31505\loch\f31506 let A = new LinkedList(20);
\par \hich\af31506\dbch\af31505\loch\f31506 let B = new LinkedList(30);
\par \hich\af31506\dbch\af31505\loch\f31506 let C = new LinkedList(40);
\par \hich\af31506\dbch\af31505\loch\f31506 let D = new LinkedList(50);
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 head\hich\af31506\dbch\af31505\loch\f31506 .next = A;
\par \hich\af31506\dbch\af31505\loch\f31506 A.next = B;
\par \hich\af31506\dbch\af31505\loch\f31506 B.next = C;
\par \hich\af31506\dbch\af31505\loch\f31506 C.next = D;
\par \hich\af31506\dbch\af31505\loch\f31506 D.next = A; //it will be circluar linked list
\par \hich\af31506\dbch\af31505\loch\f31506 //D.next = null; //it will be single linked list
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 //output : 10 -> 20 -> 30 -> 40 -> Null
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function floyedCycleDetection()\{
\par \hich\af31506\dbch\af31505\loch\f31506   let fast = head, slow = head;
\par \hich\af31506\dbch\af31505\loch\f31506   while(fast && fast.next)\{
\par \hich\af31506\dbch\af31505\loch\f31506     slow = slow.next;
\par \hich\af31506\dbch\af31505\loch\f31506     fast = fast.next.next;
\par \hich\af31506\dbch\af31505\loch\f31506     if(slow == fast) return true;
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return false
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================
\par \hich\af31506\dbch\af31505\loch\f31506 This: This is a keyword from where it gets belongs to. This is a current object. In javascript, this behave in diff manner, it depends in the env where it's getting
\par \hich\af31506\dbch\af31505\loch\f31506 invoked. (https://www.youtube.com/watch?v=wp-NE\hich\af31506\dbch\af31505\loch\f31506 cAck1k&t=427s)
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 In IIFE : this is pointing to Window 
\par \hich\af31506\dbch\af31505\loch\f31506 In object : if normal function then pointing to block scope. if arrow function pointing to window.
\par \hich\af31506\dbch\af31505\loch\f31506 In function constructor : pointing to function 
\par \hich\af31506\dbch\af31505\loch\f31506 If we didn't invoked properly(without paranthesis) then\hich\af31506\dbch\af31505\loch\f31506  it will give undefined.
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 function curryingWithRecursion(a)\{
\par \hich\af31506\dbch\af31505\loch\f31506   return function(b) \{
\par \hich\af31506\dbch\af31505\loch\f31506     r\hich\af31506\dbch\af31505\loch\f31506 eturn  b ? curryingWithRecursion(a+b) : a
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(curryingWithRecursion(1)(2)(3)(4)(5)()) //always use at last empty parenthesis
\par \hich\af31506\dbch\af31505\loch\f31506 =====================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =================================================
\par \hich\af31506\dbch\af31505\loch\f31506 How can you optimise the multiple of times API calls - using debaouncing, we can restrict the function calls ..
\par \hich\af31506\dbch\af31505\loch\f31506 Check code implementation:
\par \hich\af31506\dbch\af31505\loch\f31506 function debounce(func, a)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let timer;
\par \hich\af31506\dbch\af31505\loch\f31506   return ()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     clearTi\hich\af31506\dbch\af31505\loch\f31506 meout(timer);
\par \hich\af31506\dbch\af31505\loch\f31506     timer = setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506       func();
\par \hich\af31506\dbch\af31505\loch\f31506     \}, a)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const printName = () => \{
\par \hich\af31506\dbch\af31505\loch\f31506   console.log("Priya"); 
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 debounce(printName(), 8000)()
\par \hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================================================
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function maxSumSubArray(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let max = 0;
\par \hich\af31506\dbch\af31505\loch\f31506   for(let i=0; i<arr.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     let \hich\af31506\dbch\af31505\loch\f31506 currMax = 0;
\par \hich\af31506\dbch\af31505\loch\f31506     for(let j=i; j<arr.length; j++)\{
\par \hich\af31506\dbch\af31505\loch\f31506         currMax += arr[j]
\par \hich\af31506\dbch\af31505\loch\f31506         if(currMax > max)\{ //or max = Math.max(max, currMax)
\par \hich\af31506\dbch\af31505\loch\f31506           max = currMax
\par \hich\af31506\dbch\af31505\loch\f31506         \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return max
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(maxSumSubArray([1,2,-1,3,-2]))
\par \hich\af31506\dbch\af31505\loch\f31506 ================\hich\af31506\dbch\af31505\loch\f31506 ======================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 function hello()\{
\par \hich\af31506\dbch\af31505\loch\f31506   for(var i=0; i<=3; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506       console.log(i)
\par \hich\af31506\dbch\af31505\loch\f31506     \}, 1000)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 hello() //4 4 4 4
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function hello()\{
\par \hich\af31506\dbch\af31505\loch\f31506   for(let i=0; i<=3; i++)\{ //using let getting new refrences
\par \hich\af31506\dbch\af31505\loch\f31506     setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506       console.log(i)
\par \hich\af31506\dbch\af31505\loch\f31506     \}, 1000)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 hello() //0 1 2 3
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function hello()\{
\par \hich\af31506\dbch\af31505\loch\f31506   for(let i=0; i<=3;\hich\af31506\dbch\af31505\loch\f31506  i++)\{ //alternative of let i.e closures and passing indexes
\par \hich\af31506\dbch\af31505\loch\f31506    function hi(i)\{
\par \hich\af31506\dbch\af31505\loch\f31506       setTimeout(()=>\{
\par \hich\af31506\dbch\af31505\loch\f31506       console.log(i)
\par \hich\af31506\dbch\af31505\loch\f31506     \}, 1000)
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    hi(i)
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 hello() //0 1 2 3
\par \hich\af31506\dbch\af31505\loch\f31506 =================================================================================\hich\af31506\dbch\af31505\loch\f31506 ========================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 //move zeroes
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function moveZeroes(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   for(let i=0; i<arr.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(arr[i] === 0)\{
\par \hich\af31506\dbch\af31505\loch\f31506       arr.push(0);
\par \hich\af31506\dbch\af31505\loch\f31506       arr.splice(i,1)
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return arr
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(moveZeroes([0,2,3,0,50,0,3,0,8,2,0]))
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 function sumofTwopair(a\hich\af31506\dbch\af31505\loch\f31506 rr, target)\{
\par \hich\af31506\dbch\af31505\loch\f31506   for(let i=0; i<arr.length; i++)\{
\par \hich\af31506\dbch\af31505\loch\f31506    for(let j=i+1; j<arr.length; j++)\{
\par \hich\af31506\dbch\af31505\loch\f31506      if(arr[i]+arr[j] === target) return true
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return false
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sumofTwopair([0,22,3,0,50,0,3,0,8,2,0],5))
\par --------------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function sumofTwopair(arr, target)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let s = new Set();
\par \hich\af31506\dbch\af31505\loch\f31506   for(let item of arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506     if(s.has(target-item))\{
\par \hich\af31506\dbch\af31505\loch\f31506       return true
\par \hich\af31506\dbch\af31505\loch\f31506     \}else\{
\par \hich\af31506\dbch\af31505\loch\f31506       s.add(item)
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \hich\af31506\dbch\af31505\loch\f31506   return false
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(sumofTwopair([0,2,3,0,50,0,3,0,8,2,0],5))
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Polyfill of Flat:
\par \hich\af31506\dbch\af31505\loch\f31506 function flatArr\hich\af31506\dbch\af31505\loch\f31506 ay(arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let result = arr.reduce((accum, item)=>\{
\par \hich\af31506\dbch\af31505\loch\f31506     Array.isArray(item) 
\par \hich\af31506\dbch\af31505\loch\f31506     ? accum.push(...flatArray(item))
\par \hich\af31506\dbch\af31505\loch\f31506     : accum.push(item);
\par \hich\af31506\dbch\af31505\loch\f31506     return accum
\par \hich\af31506\dbch\af31505\loch\f31506   \},[])
\par \hich\af31506\dbch\af31505\loch\f31506   return result;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(flatArray([1,2,3,[4,[5,[6,7,[8]]]]]))
\par \hich\af31506\dbch\af31505\loch\f31506 ========================\hich\af31506\dbch\af31505\loch\f31506 ===============================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 Merge 2 sorted array:
\par \hich\af31506\dbch\af31505\loch\f31506 function mergedTwoArrays(arr1,arr2)\{
\par \hich\af31506\dbch\af31505\loch\f31506    let mergedArray= [];
\par \hich\af31506\dbch\af31505\loch\f31506    let i = 0, j=0;
\par \hich\af31506\dbch\af31505\loch\f31506    while((\hich\af31506\dbch\af31505\loch\f31506 i < arr1.length)&&(j< arr2.length))\{
\par \hich\af31506\dbch\af31505\loch\f31506      if(arr1[i]<arr2[j])\{
\par \hich\af31506\dbch\af31505\loch\f31506          mergedArray.push(arr1[i]);
\par \hich\af31506\dbch\af31505\loch\f31506          i++;  
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506       else\{
\par \hich\af31506\dbch\af31505\loch\f31506          mergedArray.push(arr2[j]);
\par \hich\af31506\dbch\af31505\loch\f31506          j++;
\par \hich\af31506\dbch\af31505\loch\f31506       \}   
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506    if(i<=(arr1.length-1))\{    
\par \hich\af31506\dbch\af31505\loch\f31506      arr1.splice(0,i);
\par \hich\af31506\dbch\af31505\loch\f31506      mergedArray=mergedArray.concat(arr1);
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    else if(j<=(arr2.length-1))\{
\par \hich\af31506\dbch\af31505\loch\f31506      arr2.splice(0,j);
\par \hich\af31506\dbch\af31505\loch\f31506      mergedArray=mergedArray.concat(arr2);  
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    return mergedArray;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(mergedTwoArr\hich\af31506\dbch\af31505\loch\f31506 ays([1,2,3,4], [2,5,6]))
\par -----------------------------------------------------
\par \hich\af31506\dbch\af31505\loch\f31506 function mergedTwoArrays(arr1,arr2)\{
\par \hich\af31506\dbch\af31505\loch\f31506   let result= [], i=0, j=0;
\par \hich\af31506\dbch\af31505\loch\f31506   while(i < arr1.length && j< arr2.length)\{
\par \hich\af31506\dbch\af31505\loch\f31506      if(arr1[i]<arr2[j])\{
\par \hich\af31506\dbch\af31505\loch\f31506          result.push(arr1[i]); i++;
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506       else\{
\par \hich\af31506\dbch\af31505\loch\f31506          result.push(arr2[j]); j++;
\par \hich\af31506\dbch\af31505\loch\f31506       \}   
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    while(i < arr1.length)\{    
\par \hich\af31506\dbch\af31505\loch\f31506          result.push(arr1[i]); i++;
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    while(j< arr2.length)\{ 
\par \hich\af31506\dbch\af31505\loch\f31506          result.push(arr2[j]); j++;
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    return result;
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(mergedTwoArrays([1,2,3,4], [2,5,6]))
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 How to avoid multiple function calls:
\par \hich\af31506\dbch\af31505\loch\f31506 f\hich\af31506\dbch\af31505\loch\f31506 unction once(fn, context)\{
\par \hich\af31506\dbch\af31505\loch\f31506  let ran
\par \hich\af31506\dbch\af31505\loch\f31506  return function()\{
\par \hich\af31506\dbch\af31505\loch\f31506    if(fn)\{
\par \hich\af31506\dbch\af31505\loch\f31506      ran = fn.apply(context || this, arguments)
\par \hich\af31506\dbch\af31505\loch\f31506      fn= null
\par \hich\af31506\dbch\af31505\loch\f31506    \}
\par \hich\af31506\dbch\af31505\loch\f31506    return ran
\par \hich\af31506\dbch\af31505\loch\f31506  \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const hello = (a,b) => console.log("without ONCE",a, b)
\par \hich\af31506\dbch\af31505\loch\f31506 const hello1 = once((a,b ) => console.log("ONCE\hich\af31506\dbch\af31505\loch\f31506 ", a, b))
\par \hich\af31506\dbch\af31505\loch\f31506 hello(1,2);
\par \hich\af31506\dbch\af31505\loch\f31506 hello(1,2);
\par \hich\af31506\dbch\af31505\loch\f31506 hello(1,2);
\par \hich\af31506\dbch\af31505\loch\f31506 hello1(1,2);
\par \hich\af31506\dbch\af31505\loch\f31506 hello1(1,2);
\par \hich\af31506\dbch\af31505\loch\f31506 hello1(1,2);
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================================
\par \hich\af31506\dbch\af31505\loch\f31506 ***\hich\af31506\dbch\af31505\loch\f31506 *****************Implementation of Currying*****************
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506 //fn is pointing to sum function, i.e (a,b,c,d) => a+b+c+d.
\par \hich\af31506\dbch\af31505\loch\f31506 function currying(fn)\{
\par \hich\af31506\dbch\af31505\loch\f31506   //args is pointing to (1)(2)(3)(4)(5)
\par \hich\af31506\dbch\af31505\loch\f31506   return function curry(...args)\{ //1 //2 //3 //4
\par \hich\af31506\dbch\af31505\loch\f31506     //when length get matched, then add all the values
\par \hich\af31506\dbch\af31505\loch\f31506     if(args.length >= fn.length) return fn(...args);
\par \hich\af31506\dbch\af31505\loch\f31506     else\{
\par \hich\af31506\dbch\af31505\loch\f31506       return function(...next)\{
\par \hich\af31506\dbch\af31505\loch\f31506         return curry(...args, ...next)
\par \hich\af31506\dbch\af31505\loch\f31506       \}
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 const sum = (a,b,c,d) => a+b+c+d;
\par \hich\af31506\dbch\af31505\loch\f31506 const totalSum = currying(sum)
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(totalSum(1)(2)(3)(4))
\par \hich\af31506\dbch\af31505\loch\f31506 ==========================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 =============
\par \hich\af31506\dbch\af31505\loch\f31506 Destructuring in nested object:
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const obj = \{
\par \hich\af31506\dbch\af31505\loch\f31506   name : "John",
\par \hich\af31506\dbch\af31505\loch\f31506   address : \{
\par \hich\af31506\dbch\af31505\loch\f31506     country : "India",
\par \hich\af31506\dbch\af31505\loch\f31506     add : \{
\par \hich\af31506\dbch\af31505\loch\f31506       city : "Delhi"
\par \hich\af31506\dbch\af31505\loch\f31506     \}
\par \hich\af31506\dbch\af31505\loch\f31506   \}
\par \}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const \{address\} = obj;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(address) //\{country : "India", "add": \{"city" : "India"\}\}
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const \{address:\{country\}\} = obj;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(country) //India
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 const \{address:\{add:\{city\}\}\} = obj;
\par \hich\af31506\dbch\af31505\loch\f31506 console.log(city) //Delhi
\par \hich\af31506\dbch\af31505\loch\f31506 ============================================================\hich\af31506\dbch\af31505\loch\f31506 ===========================================================================================================
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 ===================================================================================================================================================\hich\af31506\dbch\af31505\loch\f31506 ====================
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 =======================================================================================================================================================================
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par -------
\par \hich\af31506\dbch\af31505\loch\f31506 Dassault Systems:
\par \hich\af31506\dbch\af31505\loch\f31506 const inputArray = ["INDIA:[\hich\af31506\dbch\af31505\loch\f31506 Delhi,Mumbai,Chennai]"]; //1
\par \hich\af31506\dbch\af31505\loch\f31506 const extepctedOutputArray = ["INDIA:[Delhi]", "OR", "INDIA:[Mumbai]", "OR", "INDIA:[Chennai]"];
\par 
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 //GENERIC JS FUNCTION --> String with  comma will split as separate Items in new ARRAY and separated with OR between each
\par 
\par \hich\af31506\dbch\af31505\loch\f31506 function convertToORBasedExpression (arr)\{
\par \hich\af31506\dbch\af31505\loch\f31506  var outputArray =[];
\par \hich\af31506\dbch\af31505\loch\f31506  var temp = arr[0].split(":")[1]; //"[Delhi,Mumbai,Chennai]"
\par \hich\af31506\dbch\af31505\loch\f31506  var tm\hich\af31506\dbch\af31505\loch\f31506 p = temp.slice(1,21).split(",") //["Delhi","Mumbai","Chennai"]
\par \hich\af31506\dbch\af31505\loch\f31506  for (let item of tmp)\{
\par \hich\af31506\dbch\af31505\loch\f31506    //console.log("INDIA:"+item)
\par \hich\af31506\dbch\af31505\loch\f31506    outputArray.push("INDIA:"+item)
\par \hich\af31506\dbch\af31505\loch\f31506  \}
\par \hich\af31506\dbch\af31505\loch\f31506 // console.log(temp.slice(1,21).split(","))
\par \hich\af31506\dbch\af31505\loch\f31506   
\par \hich\af31506\dbch\af31505\loch\f31506  return outputArray; //5
\par \}
\par \hich\af31506\dbch\af31505\loch\f31506 convertToORBasedExpressio\hich\af31506\dbch\af31505\loch\f31506 n(inputArray)
\par 
\par ---------------------------------
\par 
\par 
\par 
\par }\pard \ltrpar\ql \li0\ri0\sa160\sl259\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\rtlch\fcs1 \af31507 \ltrch\fcs0 \insrsid13257675 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b030414000600080000002100b6f4679893070000c9200000160000007468656d652f7468656d652f
7468656d65312e786d6cec59cd8b1bc915bf07f23f347d97f5d5ad8fc1f2a24fcfda33b6b164873dd648a5eef2547789aad28cc56208de532e81c026e49085bd
ed21842cecc22eb9e48f31d8249b3f22afaa5bdd5552c99e191c3061463074977eefd5afde7bf5de53d5ddcf5e26d4bbc05c1096f6fcfa9d9aefe174ce16248d
7afeb3d9a4d2f13d2151ba4094a5b8e76fb0f03fbbf7eb5fdd454732c609f6403e1547a8e7c752ae8eaa5531876124eeb0154ee1bb25e30992f0caa3ea82a34b
d09bd06aa3566b55134452df4b51026a1f2f97648ebd9952e9dfdb2a1f53784da5500373caa74a35b6243476715e5708b11143cabd0b447b3eccb3609733fc52
fa1e4542c2173dbfa6fffceabdbb5574940b517940d6909be8bf5c2e17589c37f49c3c3a2b260d823068f50bfd1a40e53e6edc1eb7c6ad429f06a0f91c569a71
b175b61bc320c71aa0ecd1a17bd41e35eb16ded0dfdce3dc0fd5c7c26b50a63fd8c34f2643b0a285d7a00c1feee1c3417730b2f56b50866fede1dbb5fe28685b
fa3528a6243ddf43d7c25673b85d6d0159327aec8477c360d26ee4ca4b144443115d6a8a254be5a1584bd00bc6270050408a24493db959e1259a43140f112567
9c7827248a21f056286502866b8ddaa4d684ffea13e827ed5174849121ad780113b137a4f87862cec94af6fc07a0d537206f7ffef9cdeb1fdfbcfee9cd575fbd
79fdf77c6eadca923b466964cafdf2dd1ffef3cd6fbd7ffff0ed2f5fff319b7a172f4cfcbbbffdeedd3ffef93ef5b0e2d2146ffff4fdbb1fbf7ffbe7dfffebaf
5f3bb4f7393a33e1339260e13dc297de5396c0021dfcf119bf9ec42c46c494e8a791402952b338f48f656ca11f6d10450edc00db767cce21d5b880f7d72f2cc2
d398af2571687c182716f094313a60dc6985876a2ec3ccb3751ab927e76b13f714a10bd7dc43945a5e1eaf579063894be530c616cd2714a5124538c5d253dfb1
738c1dabfb8210cbaea764ce99604be97d41bc01224e93ccc899154da5d03149c02f1b1741f0b7659bd3e7de8051d7aa47f8c246c2de40d4417e86a965c6fb68
2d51e252394309350d7e8264ec2239ddf0b9891b0b099e8e3065de78818570c93ce6b05ec3e90f21cdb8dd7e4a37898de4929cbb749e20c64ce4889d0f6394ac
5cd829496313fbb938871045de13265df05366ef10f50e7e40e941773f27d872f787b3c133c8b026a53240d4376beef0e57dccacf89d6ee8126157aae9f3c44a
b17d4e9cd131584756689f604cd1255a60ec3dfbdcc160c05696cd4bd20f62c82ac7d815580f901dabea3dc5027a25d5dcece7c91322ac909de2881de073bad9
493c1b9426881fd2fc08bc6eda7c0ca52e7105c0633a3f37818f08f480102f4ea33c16a0c308ee835a9fc4c82a60ea5db8e375c32dff5d658fc1be7c61d1b8c2
be04197c6d1948eca6cc7b6d3343d49aa00c9819822ec3956e41c4727f29a28aab165b3be596f6a62ddd00dd91d5f42424fd6007b4d3fb84ffbbde073a8cb77f
f9c6b10f3e4ebfe3566c25ab6b763a8792c9f14e7f7308b7dbd50c195f904fbfa919a175fa04431dd9cf58b73dcd6d4fe3ffdff73487f6f36d2773a8dfb8ed64
7ce8306e3b99fc70e5e3743265f3027d8d3af0c80e7af4b14f72f0d46749289dca0dc527421ffc08f83db398c0a092d3279eb838055cc5f0a8ca1c4c60e1228e
b48cc799fc0d91f134462b381daafb4a492472d591f0564cc0a1911e76ea5678ba4e4ed9223becacd7d5c16656590592e5782d2cc6e1a04a66e856bb3cc02bd4
6bb6913e68dd1250b2d721614c6693683a48b4b783ca48fa58178ce620a157f65158741d2c3a4afdd6557b2c805ae115f8c1edc1cff49e1f06200242701e07cd
f942f92973f5d6bbda991fd3d3878c69450034d8db08283ddd555c0f2e4fad2e0bb52b78da2261849b4d425b46377822869fc17974aad1abd0b8aeafbba54b2d
7aca147a3e08ad9246bbf33e1637f535c8ede6069a9a9982a6de65cf6f35430899395af5fc251c1ac363b282d811ea3717a211dcbccc25cf36fc4d32cb8a0b39
4222ce0cae934e960d122231f728497abe5a7ee1069aea1ca2b9d51b90103e59725d482b9f1a3970baed64bc5ce2b934dd6e8c284b67af90e1b35ce1fc568bdf
1cac24d91adc3d8d1797de195df3a708422c6cd795011744c0dd413db3e682c0655891c8caf8db294c79da356fa3740c65e388ae62945714339967709dca0b3a
faadb081f196af190c6a98242f8467912ab0a651ad6a5a548d8cc3c1aafb6121653923699635d3ca2aaa6abab39835c3b60cecd8f26645de60b53531e434b3c2
67a97b37e576b7b96ea74f28aa0418bcb09fa3ea5ea12018d4cac92c6a8af17e1a56393b1fb56bc776811fa07695226164fdd656ed8edd8a1ae19c0e066f54f9
416e376a6168b9ed2bb5a5f5adb979b1cdce5e40f2184197bba6526857c2c92e47d0104d754f92a50dd8222f65be35e0c95b73d2f3bfac85fd60d80887955a27
1c57826650ab74c27eb3d20fc3667d1cd66ba341e31514161927f530bbb19fc00506dde4f7f67a7cefee3ed9ded1dc99b3a4caf4dd7c5513d777f7f5c6e1bb7b
8f40d2f9b2d598749bdd41abd26df627956034e854bac3d6a0326a0ddba3c9681876ba9357be77a1c141bf390c5ae34ea5551f0e2b41aba6e877ba9576d068f4
8376bf330efaaff23606569ea58fdc16605ecdebde7f010000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d65
2f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d36
3f2451eced0dae2c082e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e
3198720e274a939cd08a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d985
0528a2c6cce0239baa4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c020000130000000000000000000000
0000000000005b436f6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b00000000000000000000
000000300100005f72656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c0000000000000000000000000019020000
7468656d652f7468656d652f7468656d654d616e616765722e786d6c504b01022d0014000600080000002100b6f4679893070000c92000001600000000000000
000000000000d60200007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b01000027000000
000000000000000000009d0a00007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000980b00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax376\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 9;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 1;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 2;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 3;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 4;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 5;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 6;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 7;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 8;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 header;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footer;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index heading;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of figures;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope return;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation reference;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 line number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 page number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote text;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of authorities;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 macro;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 toa heading;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 5;\lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Closing;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Signature;\lsdsemihidden1 \lsdunhideused1 \lsdpriority1 \lsdlocked0 Default Paragraph Font;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Message Header;\lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Salutation;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Date;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Note Heading;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Block Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 FollowedHyperlink;\lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;
\lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Document Map;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Plain Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 E-mail Signature;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Top of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Bottom of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal (Web);\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Acronym;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Cite;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Code;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Definition;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Keyboard;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Preformatted;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Sample;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Typewriter;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Variable;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Table;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation subject;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 No List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Contemporary;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Elegant;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Professional;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Balloon Text;\lsdpriority39 \lsdlocked0 Table Grid;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden1 \lsdlocked0 Placeholder Text;
\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdpriority60 \lsdlocked0 Light Shading;\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;
\lsdpriority65 \lsdlocked0 Medium List 1;\lsdpriority66 \lsdlocked0 Medium List 2;\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;
\lsdpriority71 \lsdlocked0 Colorful Shading;\lsdpriority72 \lsdlocked0 Colorful List;\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdpriority61 \lsdlocked0 Light List Accent 1;
\lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdsemihidden1 \lsdlocked0 Revision;
\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;
\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdpriority72 \lsdlocked0 Colorful List Accent 1;
\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;
\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;
\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;
\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;
\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;
\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;
\lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Mention;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Smart Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hashtag;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Unresolved Mention;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Smart Link;}}{\*\datastore 01050000
02000000180000004d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e5000000000000000000000000d096
63cae7eed801feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}